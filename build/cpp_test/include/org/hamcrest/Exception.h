// Generated by Haxe 3.3.0
#ifndef INCLUDED_org_hamcrest_Exception
#define INCLUDED_org_hamcrest_Exception

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(org,hamcrest,Exception)

namespace org{
namespace hamcrest{


class HXCPP_CLASS_ATTRIBUTES Exception_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Exception_obj OBJ_;
		Exception_obj();

	public:
		void __construct(::String __o_message, ::Dynamic cause, ::Dynamic info);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="org.hamcrest.Exception")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"org.hamcrest.Exception"); }
		static hx::ObjectPtr< Exception_obj > __new(::String __o_message, ::Dynamic cause, ::Dynamic info);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Exception_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Exception","\x2f","\xf0","\x6c","\xeb"); }

		::String name;
		::String get_name();
		::Dynamic get_name_dyn();

		::String message;
		::String get_message();
		::Dynamic get_message_dyn();

		 ::Dynamic cause;
		 ::Dynamic get_cause();
		::Dynamic get_cause_dyn();

		 ::Dynamic info;
		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace org
} // end namespace hamcrest

#endif /* INCLUDED_org_hamcrest_Exception */ 
