// Generated by Haxe 3.3.0
#ifndef INCLUDED_massive_munit_TestSuite
#define INCLUDED_massive_munit_TestSuite

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(massive,munit,TestSuite)

namespace massive{
namespace munit{


class HXCPP_CLASS_ATTRIBUTES TestSuite_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TestSuite_obj OBJ_;
		TestSuite_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="massive.munit.TestSuite")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"massive.munit.TestSuite"); }
		static hx::ObjectPtr< TestSuite_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TestSuite_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("TestSuite","\xe6","\xdc","\x8f","\xef"); }

		::cpp::VirtualArray tests;
		Int index;
		void add(hx::Class test);
		::Dynamic add_dyn();

		Bool hasNext();
		::Dynamic hasNext_dyn();

		hx::Class next();
		::Dynamic next_dyn();

		void repeat();
		::Dynamic repeat_dyn();

		void sortTests();
		::Dynamic sortTests_dyn();

		Int sortByName(hx::Class x,hx::Class y);
		::Dynamic sortByName_dyn();

};

} // end namespace massive
} // end namespace munit

#endif /* INCLUDED_massive_munit_TestSuite */ 
