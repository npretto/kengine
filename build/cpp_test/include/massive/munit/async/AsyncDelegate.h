// Generated by Haxe 3.3.0
#ifndef INCLUDED_massive_munit_async_AsyncDelegate
#define INCLUDED_massive_munit_async_AsyncDelegate

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(massive,munit,async,AsyncDelegate)
HX_DECLARE_CLASS3(massive,munit,async,IAsyncDelegateObserver)
HX_DECLARE_CLASS3(massive,munit,util,Timer)

namespace massive{
namespace munit{
namespace async{


class HXCPP_CLASS_ATTRIBUTES AsyncDelegate_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef AsyncDelegate_obj OBJ_;
		AsyncDelegate_obj();

	public:
		void __construct( ::Dynamic testCase, ::Dynamic handler, ::Dynamic timeout, ::Dynamic info);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="massive.munit.async.AsyncDelegate")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"massive.munit.async.AsyncDelegate"); }
		static hx::ObjectPtr< AsyncDelegate_obj > __new( ::Dynamic testCase, ::Dynamic handler, ::Dynamic timeout, ::Dynamic info);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AsyncDelegate_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("AsyncDelegate","\x81","\x9e","\x1a","\x8f"); }

		static void __boot();
		static Int DEFAULT_TIMEOUT;
		::Dynamic observer;
		 ::Dynamic info;
		 ::Dynamic delegateHandler;
		Int timeoutDelay;
		Bool timedOut;
		 ::Dynamic testCase;
		 ::Dynamic handler;
		 ::massive::munit::util::Timer timer;
		Bool canceled;
		 ::massive::munit::util::Timer deferredTimer;
		::cpp::VirtualArray params;
		void runTest();
		::Dynamic runTest_dyn();

		void cancelTest();
		::Dynamic cancelTest_dyn();

		 ::Dynamic responseHandler(::cpp::VirtualArray params);
		::Dynamic responseHandler_dyn();

		void delayActualResponseHandler();
		::Dynamic delayActualResponseHandler_dyn();

		void timeoutHandler();
		::Dynamic timeoutHandler_dyn();

		void actualTimeoutHandler();
		::Dynamic actualTimeoutHandler_dyn();

};

} // end namespace massive
} // end namespace munit
} // end namespace async

#endif /* INCLUDED_massive_munit_async_AsyncDelegate */ 
