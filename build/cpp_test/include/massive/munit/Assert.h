// Generated by Haxe 3.3.0
#ifndef INCLUDED_massive_munit_Assert
#define INCLUDED_massive_munit_Assert

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(massive,munit,Assert)

namespace massive{
namespace munit{


class HXCPP_CLASS_ATTRIBUTES Assert_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Assert_obj OBJ_;
		Assert_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="massive.munit.Assert")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"massive.munit.Assert"); }
		static hx::ObjectPtr< Assert_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Assert_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Assert","\xe6","\xba","\x97","\x80"); }

		static void __boot();
		static Int assertionCount;
		static void isTrue(Bool value, ::Dynamic info);
		static ::Dynamic isTrue_dyn();

		static void isFalse(Bool value, ::Dynamic info);
		static ::Dynamic isFalse_dyn();

		static void isNull( ::Dynamic value, ::Dynamic info);
		static ::Dynamic isNull_dyn();

		static void isNotNull( ::Dynamic value, ::Dynamic info);
		static ::Dynamic isNotNull_dyn();

		static void isNaN(Float value, ::Dynamic info);
		static ::Dynamic isNaN_dyn();

		static void isNotNaN(Float value, ::Dynamic info);
		static ::Dynamic isNotNaN_dyn();

		static void isType( ::Dynamic value, ::Dynamic type, ::Dynamic info);
		static ::Dynamic isType_dyn();

		static void isNotType( ::Dynamic value, ::Dynamic type, ::Dynamic info);
		static ::Dynamic isNotType_dyn();

		static void areEqual( ::Dynamic expected, ::Dynamic actual, ::Dynamic info);
		static ::Dynamic areEqual_dyn();

		static void areNotEqual( ::Dynamic expected, ::Dynamic actual, ::Dynamic info);
		static ::Dynamic areNotEqual_dyn();

		static void areSame( ::Dynamic expected, ::Dynamic actual, ::Dynamic info);
		static ::Dynamic areSame_dyn();

		static void areNotSame( ::Dynamic expected, ::Dynamic actual, ::Dynamic info);
		static ::Dynamic areNotSame_dyn();

		static void fail(::String msg, ::Dynamic info);
		static ::Dynamic fail_dyn();

};

} // end namespace massive
} // end namespace munit

#endif /* INCLUDED_massive_munit_Assert */ 
