// Generated by Haxe 3.3.0
#ifndef INCLUDED_massive_munit_client_AbstractTestResultClient
#define INCLUDED_massive_munit_client_AbstractTestResultClient

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_massive_munit_ICoverageTestResultClient
#include <massive/munit/ICoverageTestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_IAdvancedTestResultClient
#include <massive/munit/IAdvancedTestResultClient.h>
#endif
HX_DECLARE_CLASS2(massive,munit,IAdvancedTestResultClient)
HX_DECLARE_CLASS2(massive,munit,ICoverageTestResultClient)
HX_DECLARE_CLASS2(massive,munit,ITestResultClient)
HX_DECLARE_CLASS2(massive,munit,TestResult)
HX_DECLARE_CLASS3(massive,munit,client,AbstractTestResultClient)

namespace massive{
namespace munit{
namespace client{


class HXCPP_CLASS_ATTRIBUTES AbstractTestResultClient_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef AbstractTestResultClient_obj OBJ_;
		AbstractTestResultClient_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="massive.munit.client.AbstractTestResultClient")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"massive.munit.client.AbstractTestResultClient"); }
		static hx::ObjectPtr< AbstractTestResultClient_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AbstractTestResultClient_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("AbstractTestResultClient","\x9c","\x6f","\x8b","\x10"); }

		static ::Array< ::String > traces;
		::String id;
		 ::Dynamic completionHandler;
		 ::Dynamic &completionHandler_dyn() { return completionHandler;}
		 ::Dynamic get_completionHandler();
		::Dynamic get_completionHandler_dyn();

		 ::Dynamic set_completionHandler( ::Dynamic value);
		::Dynamic set_completionHandler_dyn();

		::String output;
		::String get_output();
		::Dynamic get_output_dyn();

		Int passCount;
		Int failCount;
		Int errorCount;
		Int ignoreCount;
		::String currentTestClass;
		::Array< ::Dynamic> currentClassResults;
		 ::Dynamic currentCoverageResult;
		::Array< ::Dynamic> totalResults;
		Float totalCoveragePercent;
		::String totalCoverageReport;
		::Array< ::Dynamic> totalCoverageResults;
		 ::Dynamic originalTrace;
		Bool finalResult;
		virtual void init();
		::Dynamic init_dyn();

		void setCurrentTestClass(::String className);
		::Dynamic setCurrentTestClass_dyn();

		void addPass( ::massive::munit::TestResult result);
		::Dynamic addPass_dyn();

		void addFail( ::massive::munit::TestResult result);
		::Dynamic addFail_dyn();

		void addError( ::massive::munit::TestResult result);
		::Dynamic addError_dyn();

		void addIgnore( ::massive::munit::TestResult result);
		::Dynamic addIgnore_dyn();

		virtual void setCurrentTestClassCoverage( ::Dynamic result);
		::Dynamic setCurrentTestClassCoverage_dyn();

		virtual void reportFinalCoverage( ::Dynamic percent,::Array< ::Dynamic> missingCoverageResults,::String summary,::String classBreakdown,::String packageBreakdown,::String executionFrequency);
		::Dynamic reportFinalCoverage_dyn();

		virtual  ::Dynamic reportFinalStatistics(Int testCount,Int passCount,Int failCount,Int errorCount,Int ignoreCount,Float time);
		::Dynamic reportFinalStatistics_dyn();

		virtual void initializeTestClass();
		::Dynamic initializeTestClass_dyn();

		virtual void updateTestClass( ::massive::munit::TestResult result);
		::Dynamic updateTestClass_dyn();

		virtual void finalizeTestClass();
		::Dynamic finalizeTestClass_dyn();

		virtual void printReports();
		::Dynamic printReports_dyn();

		virtual void printFinalStatistics(Bool result,Int testCount,Int passCount,Int failCount,Int errorCount,Int ignoreCount,Float time);
		::Dynamic printFinalStatistics_dyn();

		virtual void printOverallResult(Bool result);
		::Dynamic printOverallResult_dyn();

		void addTrace( ::Dynamic value, ::Dynamic info);
		::Dynamic addTrace_dyn();

		::Array< ::String > getTraces();
		::Dynamic getTraces_dyn();

		Int sortTestResults( ::massive::munit::TestResult a, ::massive::munit::TestResult b);
		::Dynamic sortTestResults_dyn();

};

} // end namespace massive
} // end namespace munit
} // end namespace client

#endif /* INCLUDED_massive_munit_client_AbstractTestResultClient */ 
