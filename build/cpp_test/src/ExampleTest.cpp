// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_ExampleTest
#include <ExampleTest.h>
#endif
#ifndef INCLUDED_massive_munit_Assert
#include <massive/munit/Assert.h>
#endif
#ifndef INCLUDED_massive_munit_async_AsyncFactory
#include <massive/munit/async/AsyncFactory.h>
#endif
#ifndef INCLUDED_massive_munit_util_Timer
#include <massive/munit/util/Timer.h>
#endif


void ExampleTest_obj::__construct(){
            	HX_STACK_FRAME("ExampleTest","new",0xa041006e,"ExampleTest.new","ExampleTest.hx",17,0x2d7d66c2)
            	HX_STACK_THIS(this)
            	}

Dynamic ExampleTest_obj::__CreateEmpty() { return new ExampleTest_obj; }

hx::ObjectPtr< ExampleTest_obj > ExampleTest_obj::__new()
{
	hx::ObjectPtr< ExampleTest_obj > _hx_result = new ExampleTest_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic ExampleTest_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ExampleTest_obj > _hx_result = new ExampleTest_obj();
	_hx_result->__construct();
	return _hx_result;
}

void ExampleTest_obj::beforeClass(){
            	HX_STACK_FRAME("ExampleTest","beforeClass",0x6f86d547,"ExampleTest.beforeClass","ExampleTest.hx",23,0x2d7d66c2)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ExampleTest_obj,beforeClass,(void))

void ExampleTest_obj::afterClass(){
            	HX_STACK_FRAME("ExampleTest","afterClass",0x294aea2e,"ExampleTest.afterClass","ExampleTest.hx",28,0x2d7d66c2)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ExampleTest_obj,afterClass,(void))

void ExampleTest_obj::setup(){
            	HX_STACK_FRAME("ExampleTest","setup",0xd3d37e0b,"ExampleTest.setup","ExampleTest.hx",33,0x2d7d66c2)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ExampleTest_obj,setup,(void))

void ExampleTest_obj::tearDown(){
            	HX_STACK_FRAME("ExampleTest","tearDown",0x2baab356,"ExampleTest.tearDown","ExampleTest.hx",38,0x2d7d66c2)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ExampleTest_obj,tearDown,(void))

void ExampleTest_obj::testExample(){
            	HX_STACK_FRAME("ExampleTest","testExample",0xe3a4e406,"ExampleTest.testExample","ExampleTest.hx",45,0x2d7d66c2)
            	HX_STACK_THIS(this)
HXLINE(  45)		::massive::munit::Assert_obj::isTrue(true,hx::SourceInfo(HX_("ExampleTest.hx",c2,66,7d,2d),45,HX_("ExampleTest",7c,f1,08,e6),HX_("testExample",f8,f5,d3,41)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ExampleTest_obj,testExample,(void))

void ExampleTest_obj::testAsyncExample( ::massive::munit::async::AsyncFactory factory){
            	HX_STACK_FRAME("ExampleTest","testAsyncExample",0xfa8e76f2,"ExampleTest.testAsyncExample","ExampleTest.hx",50,0x2d7d66c2)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(factory,"factory")
HXLINE(  51)		HX_VARI(  ::Dynamic,handler) = factory->createHandler(hx::ObjectPtr<OBJ_>(this),this->onTestAsyncExampleComplete_dyn(),(int)300,hx::SourceInfo(HX_("ExampleTest.hx",c2,66,7d,2d),51,HX_("ExampleTest",7c,f1,08,e6),HX_("testAsyncExample",c0,17,7f,a5)));
HXLINE(  52)		this->timer = ::massive::munit::util::Timer_obj::delay(handler,(int)200);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ExampleTest_obj,testAsyncExample,(void))

void ExampleTest_obj::onTestAsyncExampleComplete(){
            	HX_STACK_FRAME("ExampleTest","onTestAsyncExampleComplete",0xdc23288a,"ExampleTest.onTestAsyncExampleComplete","ExampleTest.hx",57,0x2d7d66c2)
            	HX_STACK_THIS(this)
HXLINE(  57)		::massive::munit::Assert_obj::isFalse(false,hx::SourceInfo(HX_("ExampleTest.hx",c2,66,7d,2d),57,HX_("ExampleTest",7c,f1,08,e6),HX_("onTestAsyncExampleComplete",d8,16,16,49)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ExampleTest_obj,onTestAsyncExampleComplete,(void))

void ExampleTest_obj::testExampleThatOnlyRunsWithDebugFlag(){
            	HX_STACK_FRAME("ExampleTest","testExampleThatOnlyRunsWithDebugFlag",0x41029df8,"ExampleTest.testExampleThatOnlyRunsWithDebugFlag","ExampleTest.hx",67,0x2d7d66c2)
            	HX_STACK_THIS(this)
HXLINE(  67)		::massive::munit::Assert_obj::isTrue(true,hx::SourceInfo(HX_("ExampleTest.hx",c2,66,7d,2d),67,HX_("ExampleTest",7c,f1,08,e6),HX_("testExampleThatOnlyRunsWithDebugFlag",c6,b9,ef,1b)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ExampleTest_obj,testExampleThatOnlyRunsWithDebugFlag,(void))


ExampleTest_obj::ExampleTest_obj()
{
}

void ExampleTest_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ExampleTest);
	HX_MARK_MEMBER_NAME(timer,"timer");
	HX_MARK_END_CLASS();
}

void ExampleTest_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(timer,"timer");
}

hx::Val ExampleTest_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { return hx::Val( timer); }
		if (HX_FIELD_EQ(inName,"setup") ) { return hx::Val( setup_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tearDown") ) { return hx::Val( tearDown_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"afterClass") ) { return hx::Val( afterClass_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"beforeClass") ) { return hx::Val( beforeClass_dyn()); }
		if (HX_FIELD_EQ(inName,"testExample") ) { return hx::Val( testExample_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"testAsyncExample") ) { return hx::Val( testAsyncExample_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"onTestAsyncExampleComplete") ) { return hx::Val( onTestAsyncExampleComplete_dyn()); }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"testExampleThatOnlyRunsWithDebugFlag") ) { return hx::Val( testExampleThatOnlyRunsWithDebugFlag_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ExampleTest_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { timer=inValue.Cast<  ::massive::munit::util::Timer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ExampleTest_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ExampleTest_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::massive::munit::util::Timer*/ ,(int)offsetof(ExampleTest_obj,timer),HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ExampleTest_obj_sStaticStorageInfo = 0;
#endif

static ::String ExampleTest_obj_sMemberFields[] = {
	HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"),
	HX_HCSTRING("beforeClass","\x39","\xe7","\xb5","\xcd"),
	HX_HCSTRING("afterClass","\x7c","\xdc","\x6f","\xab"),
	HX_HCSTRING("setup","\x7d","\xae","\x2f","\x7a"),
	HX_HCSTRING("tearDown","\x24","\xd6","\x66","\xec"),
	HX_HCSTRING("testExample","\xf8","\xf5","\xd3","\x41"),
	HX_HCSTRING("testAsyncExample","\xc0","\x17","\x7f","\xa5"),
	HX_HCSTRING("onTestAsyncExampleComplete","\xd8","\x16","\x16","\x49"),
	HX_HCSTRING("testExampleThatOnlyRunsWithDebugFlag","\xc6","\xb9","\xef","\x1b"),
	::String(null()) };

static void ExampleTest_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ExampleTest_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ExampleTest_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ExampleTest_obj::__mClass,"__mClass");
};

#endif

hx::Class ExampleTest_obj::__mClass;

void ExampleTest_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("ExampleTest","\x7c","\xf1","\x08","\xe6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ExampleTest_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ExampleTest_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ExampleTest_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ExampleTest_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ExampleTest_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ExampleTest_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ExampleTest_obj::__boot()
{
{
            	HX_STACK_FRAME("ExampleTest","boot",0x90b86064,"ExampleTest.boot","ExampleTest.hx",12,0x2d7d66c2)
HXLINE(  12)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(7)
            				->setFixed(0,HX_("testAsyncExample",c0,17,7f,a5), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("AsyncTest",8e,21,5a,1c),null())))
            				->setFixed(1,HX_("afterClass",7c,dc,6f,ab), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("AfterClass",9c,e0,20,a2),null())))
            				->setFixed(2,HX_("beforeClass",39,e7,b5,cd), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("BeforeClass",19,7f,e8,b1),null())))
            				->setFixed(3,HX_("tearDown",24,d6,66,ec), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("After",fc,d5,cf,b0),null())))
            				->setFixed(4,HX_("testExampleThatOnlyRunsWithDebugFlag",c6,b9,ef,1b), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("TestDebug",81,70,f4,41),null())))
            				->setFixed(5,HX_("testExample",f8,f5,d3,41), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("Test",72,f4,d2,37),null())))
            				->setFixed(6,HX_("setup",7d,ae,2f,7a), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("Before",9f,c8,c6,ce),null()))))));
            	}
}

