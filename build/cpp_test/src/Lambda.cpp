// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif


void Lambda_obj::__construct() { }

Dynamic Lambda_obj::__CreateEmpty() { return new Lambda_obj; }

hx::ObjectPtr< Lambda_obj > Lambda_obj::__new()
{
	hx::ObjectPtr< Lambda_obj > _hx_result = new Lambda_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Lambda_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Lambda_obj > _hx_result = new Lambda_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool Lambda_obj::exists( ::Dynamic it, ::Dynamic f){
            	HX_STACK_FRAME("Lambda","exists",0x65091043,"Lambda.exists","C:\\Dev\\HaxeToolkit\\haxe\\std/Lambda.hx",141,0x5be4cec5)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
HXLINE( 142)		{
HXLINE( 142)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN( 142)			while(true){
HXLINE( 142)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 142)				if (_hx_tmp) {
HXLINE( 142)					goto _hx_goto_0;
            				}
HXDLIN( 142)				HX_VARI(  ::Dynamic,x) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 143)				Bool _hx_tmp1 = ( (Bool)(f(x)) );
HXDLIN( 143)				if (_hx_tmp1) {
HXLINE( 144)					return true;
            				}
            			}
            			_hx_goto_0:;
            		}
HXLINE( 145)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,exists,return )

 ::List Lambda_obj::filter( ::Dynamic it, ::Dynamic f){
            	HX_STACK_FRAME("Lambda","filter",0x2a5e121f,"Lambda.filter","C:\\Dev\\HaxeToolkit\\haxe\\std/Lambda.hx",185,0x5be4cec5)
            	HX_STACK_ARG(it,"it")
            	HX_STACK_ARG(f,"f")
HXLINE( 186)		HX_VARI(  ::List,l) =  ::List_obj::__new();
HXLINE( 187)		{
HXLINE( 187)			HX_VARI(  ::Dynamic,tmp) =  ::Dynamic(it->__Field(HX_("iterator",ee,49,9a,93),hx::paccDynamic))();
HXDLIN( 187)			while(true){
HXLINE( 187)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 187)				if (_hx_tmp) {
HXLINE( 187)					goto _hx_goto_1;
            				}
HXDLIN( 187)				HX_VARI(  ::Dynamic,x) =  ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))();
HXLINE( 188)				Bool _hx_tmp1 = ( (Bool)(f(x)) );
HXDLIN( 188)				if (_hx_tmp1) {
HXLINE( 189)					l->add(x);
            				}
            			}
            			_hx_goto_1:;
            		}
HXLINE( 190)		return l;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Lambda_obj,filter,return )


Lambda_obj::Lambda_obj()
{
}

bool Lambda_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"filter") ) { outValue = filter_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Lambda_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Lambda_obj_sStaticStorageInfo = 0;
#endif

static void Lambda_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Lambda_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Lambda_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Lambda_obj::__mClass,"__mClass");
};

#endif

hx::Class Lambda_obj::__mClass;

static ::String Lambda_obj_sStaticFields[] = {
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85"),
	::String(null())
};

void Lambda_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Lambda","\x27","\xa7","\x54","\x85");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Lambda_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Lambda_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Lambda_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Lambda_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Lambda_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Lambda_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Lambda_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

