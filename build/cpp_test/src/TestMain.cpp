// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_TestMain
#include <TestMain.h>
#endif
#ifndef INCLUDED_TestSuite
#include <TestSuite.h>
#endif
#ifndef INCLUDED_massive_munit_IAdvancedTestResultClient
#include <massive/munit/IAdvancedTestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_ICoverageTestResultClient
#include <massive/munit/ICoverageTestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_ITestResultClient
#include <massive/munit/ITestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_TestRunner
#include <massive/munit/TestRunner.h>
#endif
#ifndef INCLUDED_massive_munit_TestSuite
#include <massive/munit/TestSuite.h>
#endif
#ifndef INCLUDED_massive_munit_async_IAsyncDelegateObserver
#include <massive/munit/async/IAsyncDelegateObserver.h>
#endif
#ifndef INCLUDED_massive_munit_client_AbstractTestResultClient
#include <massive/munit/client/AbstractTestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_client_HTTPClient
#include <massive/munit/client/HTTPClient.h>
#endif
#ifndef INCLUDED_massive_munit_client_PrintClientBase
#include <massive/munit/client/PrintClientBase.h>
#endif
#ifndef INCLUDED_massive_munit_client_RichPrintClient
#include <massive/munit/client/RichPrintClient.h>
#endif
#ifndef INCLUDED_massive_munit_client_SummaryReportClient
#include <massive/munit/client/SummaryReportClient.h>
#endif


void TestMain_obj::__construct(){
            	HX_STACK_FRAME("TestMain","new",0xc77e5c3d,"TestMain.new","TestMain.hx",21,0xdc28b9d3)
            	HX_STACK_THIS(this)
HXLINE(  22)		HX_VARI( ::Array< ::Dynamic>,suites) = ::Array_obj< ::Dynamic>::__new();
HXLINE(  23)		suites->push(hx::ClassOf< ::TestSuite >());
HXLINE(  29)		HX_VARI(  ::massive::munit::client::RichPrintClient,client) =  ::massive::munit::client::RichPrintClient_obj::__new();
HXLINE(  30)		HX_VARI(  ::massive::munit::client::HTTPClient,httpClient) =  ::massive::munit::client::HTTPClient_obj::__new( ::massive::munit::client::SummaryReportClient_obj::__new(),null(),null());
HXLINE(  33)		HX_VARI(  ::massive::munit::TestRunner,runner) =  ::massive::munit::TestRunner_obj::__new(client);
HXLINE(  34)		runner->addResultClient(httpClient);
HXLINE(  37)		runner->completionHandler = this->completionHandler_dyn();
HXLINE(  56)		runner->run(suites);
            	}

Dynamic TestMain_obj::__CreateEmpty() { return new TestMain_obj; }

hx::ObjectPtr< TestMain_obj > TestMain_obj::__new()
{
	hx::ObjectPtr< TestMain_obj > _hx_result = new TestMain_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TestMain_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestMain_obj > _hx_result = new TestMain_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TestMain_obj::completionHandler(Bool successful){
            	HX_STACK_FRAME("TestMain","completionHandler",0xd5539cab,"TestMain.completionHandler","TestMain.hx",66,0xdc28b9d3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(successful,"successful")
HXLINE(  66)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  73)			::Sys_obj::exit((int)0);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestMain_obj,completionHandler,(void))

void TestMain_obj::main(){
            	HX_STACK_FRAME("TestMain","main",0xc6660dbc,"TestMain.main","TestMain.hx",18,0xdc28b9d3)
HXLINE(  18)		 ::TestMain_obj::__new();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(TestMain_obj,main,(void))


TestMain_obj::TestMain_obj()
{
}

hx::Val TestMain_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"completionHandler") ) { return hx::Val( completionHandler_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool TestMain_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *TestMain_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *TestMain_obj_sStaticStorageInfo = 0;
#endif

static ::String TestMain_obj_sMemberFields[] = {
	HX_HCSTRING("completionHandler","\x0e","\xe8","\xb2","\x5b"),
	::String(null()) };

static void TestMain_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestMain_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestMain_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestMain_obj::__mClass,"__mClass");
};

#endif

hx::Class TestMain_obj::__mClass;

static ::String TestMain_obj_sStaticFields[] = {
	HX_HCSTRING("main","\x39","\x38","\x56","\x48"),
	::String(null())
};

void TestMain_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("TestMain","\xcb","\x79","\x3a","\x25");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TestMain_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestMain_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TestMain_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestMain_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestMain_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestMain_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestMain_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestMain_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

