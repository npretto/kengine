// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_massive_munit_TestResultType
#include <massive/munit/TestResultType.h>
#endif
namespace massive{
namespace munit{

::massive::munit::TestResultType TestResultType_obj::ERROR;

::massive::munit::TestResultType TestResultType_obj::FAIL;

::massive::munit::TestResultType TestResultType_obj::IGNORE;

::massive::munit::TestResultType TestResultType_obj::PASS;

::massive::munit::TestResultType TestResultType_obj::UNKNOWN;

bool TestResultType_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("ERROR",a8,03,18,f1)) { outValue = TestResultType_obj::ERROR; return true; }
	if (inName==HX_("FAIL",de,81,76,2e)) { outValue = TestResultType_obj::FAIL; return true; }
	if (inName==HX_("IGNORE",12,65,4b,45)) { outValue = TestResultType_obj::IGNORE; return true; }
	if (inName==HX_("PASS",d1,ac,12,35)) { outValue = TestResultType_obj::PASS; return true; }
	if (inName==HX_("UNKNOWN",6a,f7,4e,61)) { outValue = TestResultType_obj::UNKNOWN; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(TestResultType_obj)

int TestResultType_obj::__FindIndex(::String inName)
{
	if (inName==HX_("ERROR",a8,03,18,f1)) return 3;
	if (inName==HX_("FAIL",de,81,76,2e)) return 2;
	if (inName==HX_("IGNORE",12,65,4b,45)) return 4;
	if (inName==HX_("PASS",d1,ac,12,35)) return 1;
	if (inName==HX_("UNKNOWN",6a,f7,4e,61)) return 0;
	return super::__FindIndex(inName);
}

int TestResultType_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("ERROR",a8,03,18,f1)) return 0;
	if (inName==HX_("FAIL",de,81,76,2e)) return 0;
	if (inName==HX_("IGNORE",12,65,4b,45)) return 0;
	if (inName==HX_("PASS",d1,ac,12,35)) return 0;
	if (inName==HX_("UNKNOWN",6a,f7,4e,61)) return 0;
	return super::__FindArgCount(inName);
}

hx::Val TestResultType_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("ERROR",a8,03,18,f1)) return ERROR;
	if (inName==HX_("FAIL",de,81,76,2e)) return FAIL;
	if (inName==HX_("IGNORE",12,65,4b,45)) return IGNORE;
	if (inName==HX_("PASS",d1,ac,12,35)) return PASS;
	if (inName==HX_("UNKNOWN",6a,f7,4e,61)) return UNKNOWN;
	return super::__Field(inName,inCallProp);
}

static ::String TestResultType_obj_sStaticFields[] = {
	HX_("UNKNOWN",6a,f7,4e,61),
	HX_("PASS",d1,ac,12,35),
	HX_("FAIL",de,81,76,2e),
	HX_("ERROR",a8,03,18,f1),
	HX_("IGNORE",12,65,4b,45),
	::String(null())
};

static void TestResultType_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestResultType_obj::ERROR,"ERROR");
	HX_MARK_MEMBER_NAME(TestResultType_obj::FAIL,"FAIL");
	HX_MARK_MEMBER_NAME(TestResultType_obj::IGNORE,"IGNORE");
	HX_MARK_MEMBER_NAME(TestResultType_obj::PASS,"PASS");
	HX_MARK_MEMBER_NAME(TestResultType_obj::UNKNOWN,"UNKNOWN");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestResultType_obj_sVisitStatic(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestResultType_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TestResultType_obj::ERROR,"ERROR");
	HX_VISIT_MEMBER_NAME(TestResultType_obj::FAIL,"FAIL");
	HX_VISIT_MEMBER_NAME(TestResultType_obj::IGNORE,"IGNORE");
	HX_VISIT_MEMBER_NAME(TestResultType_obj::PASS,"PASS");
	HX_VISIT_MEMBER_NAME(TestResultType_obj::UNKNOWN,"UNKNOWN");
};
#endif

hx::Class TestResultType_obj::__mClass;

Dynamic __Create_TestResultType_obj() { return new TestResultType_obj; }

void TestResultType_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_HCSTRING("massive.munit.TestResultType","\xf0","\xa0","\x6b","\xb4"), hx::TCanCast< TestResultType_obj >,TestResultType_obj_sStaticFields,0,
	&__Create_TestResultType_obj, &__Create,
	&super::__SGetClass(), &CreateTestResultType_obj, TestResultType_obj_sMarkStatics
#ifdef HXCPP_VISIT_ALLOCS
    , TestResultType_obj_sVisitStatic
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &TestResultType_obj::__GetStatic;
}

void TestResultType_obj::__boot()
{
ERROR = hx::CreateEnum< TestResultType_obj >(HX_HCSTRING("ERROR","\xa8","\x03","\x18","\xf1"),3,0);
FAIL = hx::CreateEnum< TestResultType_obj >(HX_HCSTRING("FAIL","\xde","\x81","\x76","\x2e"),2,0);
IGNORE = hx::CreateEnum< TestResultType_obj >(HX_HCSTRING("IGNORE","\x12","\x65","\x4b","\x45"),4,0);
PASS = hx::CreateEnum< TestResultType_obj >(HX_HCSTRING("PASS","\xd1","\xac","\x12","\x35"),1,0);
UNKNOWN = hx::CreateEnum< TestResultType_obj >(HX_HCSTRING("UNKNOWN","\x6a","\xf7","\x4e","\x61"),0,0);
}


} // end namespace massive
} // end namespace munit
