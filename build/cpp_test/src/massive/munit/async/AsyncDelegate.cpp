// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_massive_munit_async_AsyncDelegate
#include <massive/munit/async/AsyncDelegate.h>
#endif
#ifndef INCLUDED_massive_munit_async_IAsyncDelegateObserver
#include <massive/munit/async/IAsyncDelegateObserver.h>
#endif
#ifndef INCLUDED_massive_munit_util_Timer
#include <massive/munit/util/Timer.h>
#endif

namespace massive{
namespace munit{
namespace async{

void AsyncDelegate_obj::__construct( ::Dynamic testCase, ::Dynamic handler, ::Dynamic timeout, ::Dynamic info){
            	HX_STACK_FRAME("massive.munit.async.AsyncDelegate","new",0xd27a25ba,"massive.munit.async.AsyncDelegate.new","massive/munit/async/AsyncDelegate.hx",92,0x9ad95939)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(testCase,"testCase")
            	HX_STACK_ARG(handler,"handler")
            	HX_STACK_ARG(timeout,"timeout")
            	HX_STACK_ARG(info,"info")
HXLINE(  94)		this->testCase = testCase;
HXLINE(  95)		this->handler = handler;
HXLINE(  96)		this->delegateHandler = ::Reflect_obj::makeVarArgs(this->responseHandler_dyn());
HXLINE(  97)		this->info = info;
HXLINE(  98)		this->params = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  99)		this->timedOut = false;
HXLINE( 100)		this->canceled = false;
HXLINE( 102)		Bool _hx_tmp;
HXDLIN( 102)		Bool _hx_tmp1 = hx::IsNotNull( timeout );
HXDLIN( 102)		if (_hx_tmp1) {
HXLINE( 102)			_hx_tmp = hx::IsLessEq( timeout,(int)0 );
            		}
            		else {
HXLINE( 102)			_hx_tmp = true;
            		}
HXDLIN( 102)		if (_hx_tmp) {
HXLINE( 102)			timeout = (int)400;
            		}
HXLINE( 103)		this->timeoutDelay = timeout;
HXLINE( 104)		this->timer = ::massive::munit::util::Timer_obj::delay(this->timeoutHandler_dyn(),this->timeoutDelay);
            	}

Dynamic AsyncDelegate_obj::__CreateEmpty() { return new AsyncDelegate_obj; }

hx::ObjectPtr< AsyncDelegate_obj > AsyncDelegate_obj::__new( ::Dynamic testCase, ::Dynamic handler, ::Dynamic timeout, ::Dynamic info)
{
	hx::ObjectPtr< AsyncDelegate_obj > _hx_result = new AsyncDelegate_obj();
	_hx_result->__construct(testCase,handler,timeout,info);
	return _hx_result;
}

Dynamic AsyncDelegate_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AsyncDelegate_obj > _hx_result = new AsyncDelegate_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

void AsyncDelegate_obj::runTest(){
            	HX_STACK_FRAME("massive.munit.async.AsyncDelegate","runTest",0x98bbe797,"massive.munit.async.AsyncDelegate.runTest","massive/munit/async/AsyncDelegate.hx",113,0x9ad95939)
            	HX_STACK_THIS(this)
HXLINE( 113)		::Reflect_obj::callMethod(this->testCase,this->handler,this->params);
            	}


HX_DEFINE_DYNAMIC_FUNC0(AsyncDelegate_obj,runTest,(void))

void AsyncDelegate_obj::cancelTest(){
            	HX_STACK_FRAME("massive.munit.async.AsyncDelegate","cancelTest",0xf61e90d2,"massive.munit.async.AsyncDelegate.cancelTest","massive/munit/async/AsyncDelegate.hx",120,0x9ad95939)
            	HX_STACK_THIS(this)
HXLINE( 121)		this->canceled = true;
HXLINE( 122)		this->timer->stop();
HXLINE( 123)		Bool _hx_tmp = hx::IsNotNull( this->deferredTimer );
HXDLIN( 123)		if (_hx_tmp) {
HXLINE( 123)			this->deferredTimer->stop();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(AsyncDelegate_obj,cancelTest,(void))

 ::Dynamic AsyncDelegate_obj::responseHandler(::cpp::VirtualArray params){
            	HX_STACK_FRAME("massive.munit.async.AsyncDelegate","responseHandler",0x09155fa3,"massive.munit.async.AsyncDelegate.responseHandler","massive/munit/async/AsyncDelegate.hx",127,0x9ad95939)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(params,"params")
HXLINE( 128)		Bool _hx_tmp;
HXDLIN( 128)		if (!(this->timedOut)) {
HXLINE( 128)			_hx_tmp = this->canceled;
            		}
            		else {
HXLINE( 128)			_hx_tmp = true;
            		}
HXDLIN( 128)		if (_hx_tmp) {
HXLINE( 128)			return null();
            		}
HXLINE( 130)		this->timer->stop();
HXLINE( 132)		Bool _hx_tmp1 = hx::IsNotNull( this->deferredTimer );
HXDLIN( 132)		if (_hx_tmp1) {
HXLINE( 132)			this->deferredTimer->stop();
            		}
HXLINE( 134)		Bool _hx_tmp2 = hx::IsNull( params );
HXDLIN( 134)		if (_hx_tmp2) {
HXLINE( 134)			params = ::cpp::VirtualArray_obj::__new(0);
            		}
HXLINE( 135)		this->params = params;
HXLINE( 138)		Bool _hx_tmp3 = hx::IsNotNull( this->observer );
HXDLIN( 138)		if (_hx_tmp3) {
HXLINE( 138)			::massive::munit::util::Timer_obj::delay(this->delayActualResponseHandler_dyn(),(int)1);
            		}
HXLINE( 140)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AsyncDelegate_obj,responseHandler,return )

void AsyncDelegate_obj::delayActualResponseHandler(){
            	HX_STACK_FRAME("massive.munit.async.AsyncDelegate","delayActualResponseHandler",0x12ec55be,"massive.munit.async.AsyncDelegate.delayActualResponseHandler","massive/munit/async/AsyncDelegate.hx",144,0x9ad95939)
            	HX_STACK_THIS(this)
HXLINE( 145)		::massive::munit::async::IAsyncDelegateObserver_obj::asyncResponseHandler(this->observer,hx::ObjectPtr<OBJ_>(this));
HXLINE( 146)		this->observer = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AsyncDelegate_obj,delayActualResponseHandler,(void))

void AsyncDelegate_obj::timeoutHandler(){
            	HX_STACK_FRAME("massive.munit.async.AsyncDelegate","timeoutHandler",0xcfad180f,"massive.munit.async.AsyncDelegate.timeoutHandler","massive/munit/async/AsyncDelegate.hx",155,0x9ad95939)
            	HX_STACK_THIS(this)
HXLINE( 155)		this->actualTimeoutHandler();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AsyncDelegate_obj,timeoutHandler,(void))

void AsyncDelegate_obj::actualTimeoutHandler(){
            	HX_STACK_FRAME("massive.munit.async.AsyncDelegate","actualTimeoutHandler",0x6491c3bd,"massive.munit.async.AsyncDelegate.actualTimeoutHandler","massive/munit/async/AsyncDelegate.hx",160,0x9ad95939)
            	HX_STACK_THIS(this)
HXLINE( 161)		this->deferredTimer = null();
HXLINE( 162)		this->handler = null();
HXLINE( 163)		this->delegateHandler = null();
HXLINE( 164)		this->timedOut = true;
HXLINE( 165)		Bool _hx_tmp = hx::IsNotNull( this->observer );
HXDLIN( 165)		if (_hx_tmp) {
HXLINE( 167)			::massive::munit::async::IAsyncDelegateObserver_obj::asyncTimeoutHandler(this->observer,hx::ObjectPtr<OBJ_>(this));
HXLINE( 168)			this->observer = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(AsyncDelegate_obj,actualTimeoutHandler,(void))

Int AsyncDelegate_obj::DEFAULT_TIMEOUT;


AsyncDelegate_obj::AsyncDelegate_obj()
{
}

void AsyncDelegate_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AsyncDelegate);
	HX_MARK_MEMBER_NAME(observer,"observer");
	HX_MARK_MEMBER_NAME(info,"info");
	HX_MARK_MEMBER_NAME(delegateHandler,"delegateHandler");
	HX_MARK_MEMBER_NAME(timeoutDelay,"timeoutDelay");
	HX_MARK_MEMBER_NAME(timedOut,"timedOut");
	HX_MARK_MEMBER_NAME(testCase,"testCase");
	HX_MARK_MEMBER_NAME(handler,"handler");
	HX_MARK_MEMBER_NAME(timer,"timer");
	HX_MARK_MEMBER_NAME(canceled,"canceled");
	HX_MARK_MEMBER_NAME(deferredTimer,"deferredTimer");
	HX_MARK_MEMBER_NAME(params,"params");
	HX_MARK_END_CLASS();
}

void AsyncDelegate_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(observer,"observer");
	HX_VISIT_MEMBER_NAME(info,"info");
	HX_VISIT_MEMBER_NAME(delegateHandler,"delegateHandler");
	HX_VISIT_MEMBER_NAME(timeoutDelay,"timeoutDelay");
	HX_VISIT_MEMBER_NAME(timedOut,"timedOut");
	HX_VISIT_MEMBER_NAME(testCase,"testCase");
	HX_VISIT_MEMBER_NAME(handler,"handler");
	HX_VISIT_MEMBER_NAME(timer,"timer");
	HX_VISIT_MEMBER_NAME(canceled,"canceled");
	HX_VISIT_MEMBER_NAME(deferredTimer,"deferredTimer");
	HX_VISIT_MEMBER_NAME(params,"params");
}

hx::Val AsyncDelegate_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"info") ) { return hx::Val( info); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { return hx::Val( timer); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { return hx::Val( params); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"handler") ) { return hx::Val( handler); }
		if (HX_FIELD_EQ(inName,"runTest") ) { return hx::Val( runTest_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"observer") ) { return hx::Val( observer); }
		if (HX_FIELD_EQ(inName,"timedOut") ) { return hx::Val( timedOut); }
		if (HX_FIELD_EQ(inName,"testCase") ) { return hx::Val( testCase); }
		if (HX_FIELD_EQ(inName,"canceled") ) { return hx::Val( canceled); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cancelTest") ) { return hx::Val( cancelTest_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"timeoutDelay") ) { return hx::Val( timeoutDelay); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"deferredTimer") ) { return hx::Val( deferredTimer); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"timeoutHandler") ) { return hx::Val( timeoutHandler_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"delegateHandler") ) { return hx::Val( delegateHandler); }
		if (HX_FIELD_EQ(inName,"responseHandler") ) { return hx::Val( responseHandler_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"actualTimeoutHandler") ) { return hx::Val( actualTimeoutHandler_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"delayActualResponseHandler") ) { return hx::Val( delayActualResponseHandler_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AsyncDelegate_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"info") ) { info=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { timer=inValue.Cast<  ::massive::munit::util::Timer >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { params=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"handler") ) { handler=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"observer") ) { observer=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timedOut") ) { timedOut=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"testCase") ) { testCase=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canceled") ) { canceled=inValue.Cast< Bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"timeoutDelay") ) { timeoutDelay=inValue.Cast< Int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"deferredTimer") ) { deferredTimer=inValue.Cast<  ::massive::munit::util::Timer >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"delegateHandler") ) { delegateHandler=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AsyncDelegate_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("observer","\x16","\x3c","\x4e","\x26"));
	outFields->push(HX_HCSTRING("info","\x6e","\x38","\xbb","\x45"));
	outFields->push(HX_HCSTRING("delegateHandler","\x05","\x83","\x8d","\x4d"));
	outFields->push(HX_HCSTRING("timeoutDelay","\x22","\x05","\xd4","\x58"));
	outFields->push(HX_HCSTRING("timedOut","\x17","\x05","\xde","\xf7"));
	outFields->push(HX_HCSTRING("testCase","\x22","\xa4","\xec","\x44"));
	outFields->push(HX_HCSTRING("handler","\xca","\xaf","\xd5","\x45"));
	outFields->push(HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"));
	outFields->push(HX_HCSTRING("canceled","\x59","\x18","\x26","\x1f"));
	outFields->push(HX_HCSTRING("deferredTimer","\x26","\x00","\xba","\xd4"));
	outFields->push(HX_HCSTRING("params","\x46","\xfb","\x7a","\xed"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AsyncDelegate_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::massive::munit::async::IAsyncDelegateObserver*/ ,(int)offsetof(AsyncDelegate_obj,observer),HX_HCSTRING("observer","\x16","\x3c","\x4e","\x26")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(AsyncDelegate_obj,info),HX_HCSTRING("info","\x6e","\x38","\xbb","\x45")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(AsyncDelegate_obj,delegateHandler),HX_HCSTRING("delegateHandler","\x05","\x83","\x8d","\x4d")},
	{hx::fsInt,(int)offsetof(AsyncDelegate_obj,timeoutDelay),HX_HCSTRING("timeoutDelay","\x22","\x05","\xd4","\x58")},
	{hx::fsBool,(int)offsetof(AsyncDelegate_obj,timedOut),HX_HCSTRING("timedOut","\x17","\x05","\xde","\xf7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(AsyncDelegate_obj,testCase),HX_HCSTRING("testCase","\x22","\xa4","\xec","\x44")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(AsyncDelegate_obj,handler),HX_HCSTRING("handler","\xca","\xaf","\xd5","\x45")},
	{hx::fsObject /*::massive::munit::util::Timer*/ ,(int)offsetof(AsyncDelegate_obj,timer),HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10")},
	{hx::fsBool,(int)offsetof(AsyncDelegate_obj,canceled),HX_HCSTRING("canceled","\x59","\x18","\x26","\x1f")},
	{hx::fsObject /*::massive::munit::util::Timer*/ ,(int)offsetof(AsyncDelegate_obj,deferredTimer),HX_HCSTRING("deferredTimer","\x26","\x00","\xba","\xd4")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(AsyncDelegate_obj,params),HX_HCSTRING("params","\x46","\xfb","\x7a","\xed")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo AsyncDelegate_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &AsyncDelegate_obj::DEFAULT_TIMEOUT,HX_HCSTRING("DEFAULT_TIMEOUT","\xa3","\xfd","\x79","\x79")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String AsyncDelegate_obj_sMemberFields[] = {
	HX_HCSTRING("observer","\x16","\x3c","\x4e","\x26"),
	HX_HCSTRING("info","\x6e","\x38","\xbb","\x45"),
	HX_HCSTRING("delegateHandler","\x05","\x83","\x8d","\x4d"),
	HX_HCSTRING("timeoutDelay","\x22","\x05","\xd4","\x58"),
	HX_HCSTRING("timedOut","\x17","\x05","\xde","\xf7"),
	HX_HCSTRING("testCase","\x22","\xa4","\xec","\x44"),
	HX_HCSTRING("handler","\xca","\xaf","\xd5","\x45"),
	HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"),
	HX_HCSTRING("canceled","\x59","\x18","\x26","\x1f"),
	HX_HCSTRING("deferredTimer","\x26","\x00","\xba","\xd4"),
	HX_HCSTRING("params","\x46","\xfb","\x7a","\xed"),
	HX_HCSTRING("runTest","\x3d","\xdd","\x36","\xda"),
	HX_HCSTRING("cancelTest","\xec","\x26","\xe4","\xbb"),
	HX_HCSTRING("responseHandler","\x49","\x6b","\x97","\x26"),
	HX_HCSTRING("delayActualResponseHandler","\xd8","\x3f","\x81","\x9c"),
	HX_HCSTRING("timeoutHandler","\x29","\xc3","\x60","\x6f"),
	HX_HCSTRING("actualTimeoutHandler","\x57","\xbe","\x05","\x5c"),
	::String(null()) };

static void AsyncDelegate_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AsyncDelegate_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(AsyncDelegate_obj::DEFAULT_TIMEOUT,"DEFAULT_TIMEOUT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AsyncDelegate_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AsyncDelegate_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(AsyncDelegate_obj::DEFAULT_TIMEOUT,"DEFAULT_TIMEOUT");
};

#endif

hx::Class AsyncDelegate_obj::__mClass;

static ::String AsyncDelegate_obj_sStaticFields[] = {
	HX_HCSTRING("DEFAULT_TIMEOUT","\xa3","\xfd","\x79","\x79"),
	::String(null())
};

void AsyncDelegate_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("massive.munit.async.AsyncDelegate","\xc8","\x80","\x5a","\x0c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AsyncDelegate_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AsyncDelegate_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AsyncDelegate_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AsyncDelegate_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AsyncDelegate_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AsyncDelegate_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AsyncDelegate_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void AsyncDelegate_obj::__boot()
{
{
            	HX_STACK_FRAME("massive.munit.async.AsyncDelegate","boot",0x507fdd98,"massive.munit.async.AsyncDelegate.boot","massive/munit/async/AsyncDelegate.hx",46,0x9ad95939)
HXLINE(  46)		DEFAULT_TIMEOUT = (int)400;
            	}
}

} // end namespace massive
} // end namespace munit
} // end namespace async
