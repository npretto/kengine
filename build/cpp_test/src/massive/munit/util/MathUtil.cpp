// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_massive_munit_util_MathUtil
#include <massive/munit/util/MathUtil.h>
#endif

namespace massive{
namespace munit{
namespace util{

void MathUtil_obj::__construct(){
            	HX_STACK_FRAME("massive.munit.util.MathUtil","new",0x00c1a6a1,"massive.munit.util.MathUtil.new","massive/munit/util/MathUtil.hx",39,0x3bb7d050)
            	HX_STACK_THIS(this)
            	}

Dynamic MathUtil_obj::__CreateEmpty() { return new MathUtil_obj; }

hx::ObjectPtr< MathUtil_obj > MathUtil_obj::__new()
{
	hx::ObjectPtr< MathUtil_obj > _hx_result = new MathUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic MathUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MathUtil_obj > _hx_result = new MathUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

Float MathUtil_obj::round(Float value,Int precision){
            	HX_STACK_FRAME("massive.munit.util.MathUtil","round",0x45a6a0cf,"massive.munit.util.MathUtil.round","massive/munit/util/MathUtil.hx",49,0x3bb7d050)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(precision,"precision")
HXLINE(  50)		Float _hx_tmp = ::Math_obj::pow((int)10,precision);
HXDLIN(  50)		hx::MultEq(value,_hx_tmp);
HXLINE(  51)		Int _hx_tmp1 = ::Math_obj::round(value);
HXDLIN(  51)		Float _hx_tmp2 = ::Math_obj::pow((int)10,precision);
HXDLIN(  51)		return ((Float)_hx_tmp1 / (Float)_hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(MathUtil_obj,round,return )


MathUtil_obj::MathUtil_obj()
{
}

bool MathUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"round") ) { outValue = round_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *MathUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *MathUtil_obj_sStaticStorageInfo = 0;
#endif

static void MathUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MathUtil_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MathUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MathUtil_obj::__mClass,"__mClass");
};

#endif

hx::Class MathUtil_obj::__mClass;

static ::String MathUtil_obj_sStaticFields[] = {
	HX_HCSTRING("round","\x4e","\xf8","\x65","\xed"),
	::String(null())
};

void MathUtil_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("massive.munit.util.MathUtil","\x2f","\xc2","\x27","\x76");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MathUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MathUtil_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MathUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< MathUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MathUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MathUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MathUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace massive
} // end namespace munit
} // end namespace util
