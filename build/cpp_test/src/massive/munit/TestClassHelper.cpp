// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_rtti_Meta
#include <haxe/rtti/Meta.h>
#endif
#ifndef INCLUDED_massive_munit_TestClassHelper
#include <massive/munit/TestClassHelper.h>
#endif
#ifndef INCLUDED_massive_munit_TestResult
#include <massive/munit/TestResult.h>
#endif

static const ::String _hx_array_data_8[] = {
	HX_("BeforeClass",19,7f,e8,b1),HX_("AfterClass",9c,e0,20,a2),HX_("Before",9f,c8,c6,ce),HX_("After",fc,d5,cf,b0),HX_("Test",72,f4,d2,37),HX_("AsyncTest",8e,21,5a,1c),HX_("TestDebug",81,70,f4,41),
};
namespace massive{
namespace munit{

void TestClassHelper_obj::__construct(hx::Class type, ::Dynamic __o_isDebug){
 ::Dynamic isDebug = __o_isDebug.Default(false);
            	HX_STACK_FRAME("massive.munit.TestClassHelper","new",0xfa387a5f,"massive.munit.TestClassHelper.new","massive/munit/TestClassHelper.hx",147,0xfbaf8533)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(isDebug,"isDebug")
HXLINE( 148)		this->type = type;
HXLINE( 149)		this->isDebug = isDebug;
HXLINE( 150)		this->tests = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 151)		this->index = (int)0;
HXLINE( 152)		this->className = ::Type_obj::getClassName(type);
HXLINE( 154)		this->beforeClass = this->nullFunc_dyn();
HXLINE( 155)		this->afterClass = this->nullFunc_dyn();
HXLINE( 156)		this->before = this->nullFunc_dyn();
HXLINE( 157)		this->after = this->nullFunc_dyn();
HXLINE( 159)		this->parse(type);
            	}

Dynamic TestClassHelper_obj::__CreateEmpty() { return new TestClassHelper_obj; }

hx::ObjectPtr< TestClassHelper_obj > TestClassHelper_obj::__new(hx::Class type, ::Dynamic __o_isDebug)
{
	hx::ObjectPtr< TestClassHelper_obj > _hx_result = new TestClassHelper_obj();
	_hx_result->__construct(type,__o_isDebug);
	return _hx_result;
}

Dynamic TestClassHelper_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestClassHelper_obj > _hx_result = new TestClassHelper_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

Bool TestClassHelper_obj::hasNext(){
            	HX_STACK_FRAME("massive.munit.TestClassHelper","hasNext",0x5f61baec,"massive.munit.TestClassHelper.hasNext","massive/munit/TestClassHelper.hx",169,0xfbaf8533)
            	HX_STACK_THIS(this)
HXLINE( 169)		return (this->index < this->tests->length);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestClassHelper_obj,hasNext,return )

 ::Dynamic TestClassHelper_obj::next(){
            	HX_STACK_FRAME("massive.munit.TestClassHelper","next",0xf7329a14,"massive.munit.TestClassHelper.next","massive/munit/TestClassHelper.hx",179,0xfbaf8533)
            	HX_STACK_THIS(this)
HXLINE( 179)		Bool _hx_tmp = this->hasNext();
HXDLIN( 179)		if (_hx_tmp) {
HXLINE( 179)			return this->tests->__get(this->index++);
            		}
            		else {
HXLINE( 179)			return null();
            		}
HXDLIN( 179)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestClassHelper_obj,next,return )

 ::Dynamic TestClassHelper_obj::current(){
            	HX_STACK_FRAME("massive.munit.TestClassHelper","current",0x12feb1b8,"massive.munit.TestClassHelper.current","massive/munit/TestClassHelper.hx",189,0xfbaf8533)
            	HX_STACK_THIS(this)
HXLINE( 189)		if ((this->index <= (int)0)) {
HXLINE( 189)			return this->tests->__get((int)0);
            		}
            		else {
HXLINE( 189)			return this->tests->__get((this->index - (int)1));
            		}
HXDLIN( 189)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestClassHelper_obj,current,return )

void TestClassHelper_obj::parse(hx::Class type){
            	HX_STACK_FRAME("massive.munit.TestClassHelper","parse",0x7937f7f2,"massive.munit.TestClassHelper.parse","massive/munit/TestClassHelper.hx",193,0xfbaf8533)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
HXLINE( 194)		this->test = ::Type_obj::createEmptyInstance(type);
HXLINE( 196)		HX_VARI( ::Array< ::Dynamic>,inherintanceChain) = this->getInheritanceChain(type);
HXLINE( 197)		HX_VARI(  ::Dynamic,fieldMeta) = this->collateFieldMeta(inherintanceChain);
HXLINE( 198)		this->scanForTests(fieldMeta);
HXLINE( 199)		this->tests->sort(this->sortTestsByName_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestClassHelper_obj,parse,(void))

::Array< ::Dynamic> TestClassHelper_obj::getInheritanceChain(hx::Class clazz){
            	HX_STACK_FRAME("massive.munit.TestClassHelper","getInheritanceChain",0x89dc7b0c,"massive.munit.TestClassHelper.getInheritanceChain","massive/munit/TestClassHelper.hx",203,0xfbaf8533)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(clazz,"clazz")
HXLINE( 204)		HX_VARI( ::Array< ::Dynamic>,inherintanceChain) = ::Array_obj< ::Dynamic>::__new(1)->init(0,clazz);
HXLINE( 205)		while(true){
HXLINE( 205)			clazz = ::Type_obj::getSuperClass(clazz);
HXDLIN( 205)			Bool _hx_tmp = !(hx::IsNotNull( clazz ));
HXDLIN( 205)			if (_hx_tmp) {
HXLINE( 205)				goto _hx_goto_0;
            			}
HXLINE( 206)			inherintanceChain->push(clazz);
            		}
            		_hx_goto_0:;
HXLINE( 207)		return inherintanceChain;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestClassHelper_obj,getInheritanceChain,return )

 ::Dynamic TestClassHelper_obj::collateFieldMeta(::Array< ::Dynamic> inherintanceChain){
            	HX_STACK_FRAME("massive.munit.TestClassHelper","collateFieldMeta",0xda874afa,"massive.munit.TestClassHelper.collateFieldMeta","massive/munit/TestClassHelper.hx",211,0xfbaf8533)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(inherintanceChain,"inherintanceChain")
HXLINE( 212)		HX_VARI(  ::Dynamic,meta) =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE( 213)		while((inherintanceChain->length > (int)0)){
HXLINE( 215)			HX_VARI( hx::Class,clazz) = inherintanceChain->pop().StaticCast< hx::Class >();
HXLINE( 216)			HX_VARI(  ::Dynamic,newMeta) = ::haxe::rtti::Meta_obj::getFields(clazz);
HXLINE( 217)			HX_VARI( ::Array< ::String >,markedFieldNames) = ::Reflect_obj::fields(newMeta);
HXLINE( 219)			{
HXLINE( 219)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 219)				while((_g < markedFieldNames->length)){
HXLINE( 219)					HX_VARI( ::String,fieldName) = markedFieldNames->__get(_g);
HXDLIN( 219)					++_g;
HXLINE( 221)					HX_VARI(  ::Dynamic,recordedFieldTags) = ::Reflect_obj::field(meta,fieldName);
HXLINE( 222)					HX_VARI(  ::Dynamic,newFieldTags) = ::Reflect_obj::field(newMeta,fieldName);
HXLINE( 224)					HX_VARI( ::Array< ::String >,newTagNames) = ::Reflect_obj::fields(newFieldTags);
HXLINE( 225)					Bool _hx_tmp = hx::IsNull( recordedFieldTags );
HXDLIN( 225)					if (_hx_tmp) {
HXLINE( 230)						HX_VARI(  ::Dynamic,tagsCopy) =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE( 231)						{
HXLINE( 231)							HX_VARI( Int,_g1) = (int)0;
HXDLIN( 231)							while((_g1 < newTagNames->length)){
HXLINE( 231)								HX_VARI( ::String,tagName) = newTagNames->__get(_g1);
HXDLIN( 231)								++_g1;
HXLINE( 232)								 ::Dynamic _hx_tmp1 = ::Reflect_obj::field(newFieldTags,tagName);
HXDLIN( 232)								::Reflect_obj::setField(tagsCopy,tagName,_hx_tmp1);
            							}
            						}
HXLINE( 234)						::Reflect_obj::setField(meta,fieldName,tagsCopy);
            					}
            					else {
HXLINE( 238)						HX_VARI( Bool,ignored) = false;
HXLINE( 239)						{
HXLINE( 239)							HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 239)							while((_g11 < newTagNames->length)){
HXLINE( 239)								HX_VARI_NAME( ::String,tagName1,"tagName") = newTagNames->__get(_g11);
HXDLIN( 239)								++_g11;
HXLINE( 241)								if ((tagName1 == HX_("Ignore",32,2d,5d,c7))) {
HXLINE( 242)									ignored = true;
            								}
HXLINE( 247)								Bool _hx_tmp2;
HXDLIN( 247)								Bool _hx_tmp3;
HXDLIN( 247)								if (!(ignored)) {
HXLINE( 247)									if ((tagName1 != HX_("Test",72,f4,d2,37))) {
HXLINE( 247)										_hx_tmp3 = (tagName1 == HX_("AsyncTest",8e,21,5a,1c));
            									}
            									else {
HXLINE( 247)										_hx_tmp3 = true;
            									}
            								}
            								else {
HXLINE( 247)									_hx_tmp3 = false;
            								}
HXDLIN( 247)								if (_hx_tmp3) {
HXLINE( 247)									_hx_tmp2 = ::Reflect_obj::hasField(recordedFieldTags,HX_("Ignore",32,2d,5d,c7));
            								}
            								else {
HXLINE( 247)									_hx_tmp2 = false;
            								}
HXDLIN( 247)								if (_hx_tmp2) {
HXLINE( 250)									::Reflect_obj::deleteField(recordedFieldTags,HX_("Ignore",32,2d,5d,c7));
            								}
HXLINE( 252)								HX_VARI(  ::Dynamic,tagValue) = ::Reflect_obj::field(newFieldTags,tagName1);
HXLINE( 253)								::Reflect_obj::setField(recordedFieldTags,tagName1,tagValue);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 258)		return meta;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestClassHelper_obj,collateFieldMeta,return )

void TestClassHelper_obj::scanForTests( ::Dynamic fieldMeta){
            	HX_STACK_FRAME("massive.munit.TestClassHelper","scanForTests",0x1ceba4d6,"massive.munit.TestClassHelper.scanForTests","massive/munit/TestClassHelper.hx",262,0xfbaf8533)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fieldMeta,"fieldMeta")
HXLINE( 263)		HX_VARI( ::Array< ::String >,fieldNames) = ::Reflect_obj::fields(fieldMeta);
HXLINE( 264)		{
HXLINE( 264)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 264)			while((_g < fieldNames->length)){
HXLINE( 264)				HX_VARI( ::String,fieldName) = fieldNames->__get(_g);
HXDLIN( 264)				++_g;
HXLINE( 266)				HX_VARI(  ::Dynamic,f) = ::Reflect_obj::field(this->test,fieldName);
HXLINE( 267)				Bool _hx_tmp = ::Reflect_obj::isFunction(f);
HXDLIN( 267)				if (_hx_tmp) {
HXLINE( 269)					HX_VARI(  ::Dynamic,funcMeta) = ::Reflect_obj::field(fieldMeta,fieldName);
HXLINE( 270)					this->searchForMatchingTags(fieldName,f,funcMeta);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestClassHelper_obj,scanForTests,(void))

void TestClassHelper_obj::searchForMatchingTags(::String fieldName, ::Dynamic func, ::Dynamic funcMeta){
            	HX_STACK_FRAME("massive.munit.TestClassHelper","searchForMatchingTags",0x9f12b016,"massive.munit.TestClassHelper.searchForMatchingTags","massive/munit/TestClassHelper.hx",277,0xfbaf8533)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fieldName,"fieldName")
            	HX_STACK_ARG(func,"func")
            	HX_STACK_ARG(funcMeta,"funcMeta")
HXLINE( 277)		HX_VARI( Int,_g) = (int)0;
HXDLIN( 277)		HX_VARI( ::Array< ::String >,_g1) = ::massive::munit::TestClassHelper_obj::META_TAGS;
HXDLIN( 277)		while((_g < _g1->length)){
HXLINE( 277)			HX_VARI( ::String,tag) = _g1->__get(_g);
HXDLIN( 277)			++_g;
HXLINE( 279)			Bool _hx_tmp = ::Reflect_obj::hasField(funcMeta,tag);
HXDLIN( 279)			if (_hx_tmp) {
HXLINE( 281)				HX_VARI( ::Array< ::String >,args) = ( (::Array< ::String >)(::Reflect_obj::field(funcMeta,tag)) );
HXLINE( 282)				HX_VAR( ::String,description);
HXDLIN( 282)				Bool _hx_tmp1 = hx::IsNotNull( args );
HXDLIN( 282)				if (_hx_tmp1) {
HXLINE( 282)					description = args->__get((int)0);
            				}
            				else {
HXLINE( 282)					description = HX_("",00,00,00,00);
            				}
HXLINE( 283)				HX_VAR( Bool,isAsync);
HXDLIN( 283)				Bool _hx_tmp2 = hx::IsNotNull( args );
HXDLIN( 283)				if (_hx_tmp2) {
HXLINE( 283)					isAsync = (description == HX_("Async",1c,6f,6b,b9));
            				}
            				else {
HXLINE( 283)					isAsync = false;
            				}
HXLINE( 284)				HX_VARI( Bool,isIgnored) = ::Reflect_obj::hasField(funcMeta,HX_("Ignore",32,2d,5d,c7));
HXLINE( 286)				if (isAsync) {
HXLINE( 288)					description = HX_("",00,00,00,00);
            				}
            				else {
HXLINE( 290)					if (isIgnored) {
HXLINE( 292)						args = ::Reflect_obj::field(funcMeta,HX_("Ignore",32,2d,5d,c7));
HXLINE( 293)						Bool _hx_tmp3 = hx::IsNotNull( args );
HXDLIN( 293)						if (_hx_tmp3) {
HXLINE( 293)							description = args->__get((int)0);
            						}
            						else {
HXLINE( 293)							description = HX_("",00,00,00,00);
            						}
            					}
            				}
HXLINE( 296)				::String _hx_switch_0 = tag;
            				if (  (_hx_switch_0==HX_("After",fc,d5,cf,b0)) ){
HXLINE( 305)					this->after = func;
HXDLIN( 305)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_0==HX_("AfterClass",9c,e0,20,a2)) ){
HXLINE( 301)					this->afterClass = func;
HXDLIN( 301)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_0==HX_("AsyncTest",8e,21,5a,1c)) ){
HXLINE( 307)					Bool _hx_tmp4 = !(this->isDebug);
HXDLIN( 307)					if (_hx_tmp4) {
HXLINE( 308)						this->addTest(fieldName,func,this->test,true,isIgnored,description);
            					}
HXLINE( 307)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_0==HX_("Before",9f,c8,c6,ce)) ){
HXLINE( 303)					this->before = func;
HXDLIN( 303)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_0==HX_("BeforeClass",19,7f,e8,b1)) ){
HXLINE( 299)					this->beforeClass = func;
HXDLIN( 299)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_0==HX_("Test",72,f4,d2,37)) ){
HXLINE( 310)					Bool _hx_tmp5 = !(this->isDebug);
HXDLIN( 310)					if (_hx_tmp5) {
HXLINE( 311)						this->addTest(fieldName,func,this->test,isAsync,isIgnored,description);
            					}
HXLINE( 310)					goto _hx_goto_7;
            				}
            				if (  (_hx_switch_0==HX_("TestDebug",81,70,f4,41)) ){
HXLINE( 313)					Bool _hx_tmp6 = this->isDebug;
HXDLIN( 313)					if (_hx_tmp6) {
HXLINE( 314)						this->addTest(fieldName,func,this->test,isAsync,isIgnored,description);
            					}
HXLINE( 313)					goto _hx_goto_7;
            				}
            				_hx_goto_7:;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(TestClassHelper_obj,searchForMatchingTags,(void))

void TestClassHelper_obj::addTest(::String field, ::Dynamic testFunction, ::Dynamic testInstance,Bool isAsync,Bool isIgnored,::String description){
            	HX_STACK_FRAME("massive.munit.TestClassHelper","addTest",0xd0522092,"massive.munit.TestClassHelper.addTest","massive/munit/TestClassHelper.hx",326,0xfbaf8533)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(field,"field")
            	HX_STACK_ARG(testFunction,"testFunction")
            	HX_STACK_ARG(testInstance,"testInstance")
            	HX_STACK_ARG(isAsync,"isAsync")
            	HX_STACK_ARG(isIgnored,"isIgnored")
            	HX_STACK_ARG(description,"description")
HXLINE( 327)		HX_VARI(  ::massive::munit::TestResult,result) =  ::massive::munit::TestResult_obj::__new();
HXLINE( 328)		result->async = isAsync;
HXLINE( 329)		result->ignore = isIgnored;
HXLINE( 330)		result->className = this->className;
HXLINE( 331)		result->description = description;
HXLINE( 332)		result->name = field;
HXLINE( 334)		this->tests->push( ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("result",dd,68,84,08),result)
            			->setFixed(1,HX_("test",52,c8,f9,4c),testFunction)
            			->setFixed(2,HX_("scope",94,71,d9,78),testInstance)));
            	}


HX_DEFINE_DYNAMIC_FUNC6(TestClassHelper_obj,addTest,(void))

Int TestClassHelper_obj::sortTestsByName( ::Dynamic x, ::Dynamic y){
            	HX_STACK_FRAME("massive.munit.TestClassHelper","sortTestsByName",0xc2d1fc44,"massive.munit.TestClassHelper.sortTestsByName","massive/munit/TestClassHelper.hx",338,0xfbaf8533)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 339)		if ((( ( ::massive::munit::TestResult)(x->__Field(HX_("result",dd,68,84,08),hx::paccDynamic)) )->name == ( ( ::massive::munit::TestResult)(y->__Field(HX_("result",dd,68,84,08),hx::paccDynamic)) )->name)) {
HXLINE( 339)			return (int)0;
            		}
HXLINE( 340)		if ((( ( ::massive::munit::TestResult)(x->__Field(HX_("result",dd,68,84,08),hx::paccDynamic)) )->name > ( ( ::massive::munit::TestResult)(y->__Field(HX_("result",dd,68,84,08),hx::paccDynamic)) )->name)) {
HXLINE( 340)			return (int)1;
            		}
            		else {
HXLINE( 341)			return (int)-1;
            		}
HXLINE( 340)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TestClassHelper_obj,sortTestsByName,return )

void TestClassHelper_obj::nullFunc(){
            	HX_STACK_FRAME("massive.munit.TestClassHelper","nullFunc",0x1203bf0c,"massive.munit.TestClassHelper.nullFunc","massive/munit/TestClassHelper.hx",345,0xfbaf8533)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestClassHelper_obj,nullFunc,(void))

::String TestClassHelper_obj::META_TAG_BEFORE_CLASS;

::String TestClassHelper_obj::META_TAG_AFTER_CLASS;

::String TestClassHelper_obj::META_TAG_BEFORE;

::String TestClassHelper_obj::META_TAG_AFTER;

::String TestClassHelper_obj::META_TAG_TEST;

::String TestClassHelper_obj::META_TAG_ASYNC_TEST;

::String TestClassHelper_obj::META_TAG_IGNORE;

::String TestClassHelper_obj::META_PARAM_ASYNC_TEST;

::String TestClassHelper_obj::META_TAG_TEST_DEBUG;

::Array< ::String > TestClassHelper_obj::META_TAGS;


TestClassHelper_obj::TestClassHelper_obj()
{
}

void TestClassHelper_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TestClassHelper);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(test,"test");
	HX_MARK_MEMBER_NAME(beforeClass,"beforeClass");
	HX_MARK_MEMBER_NAME(afterClass,"afterClass");
	HX_MARK_MEMBER_NAME(before,"before");
	HX_MARK_MEMBER_NAME(after,"after");
	HX_MARK_MEMBER_NAME(tests,"tests");
	HX_MARK_MEMBER_NAME(index,"index");
	HX_MARK_MEMBER_NAME(className,"className");
	HX_MARK_MEMBER_NAME(isDebug,"isDebug");
	HX_MARK_END_CLASS();
}

void TestClassHelper_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(test,"test");
	HX_VISIT_MEMBER_NAME(beforeClass,"beforeClass");
	HX_VISIT_MEMBER_NAME(afterClass,"afterClass");
	HX_VISIT_MEMBER_NAME(before,"before");
	HX_VISIT_MEMBER_NAME(after,"after");
	HX_VISIT_MEMBER_NAME(tests,"tests");
	HX_VISIT_MEMBER_NAME(index,"index");
	HX_VISIT_MEMBER_NAME(className,"className");
	HX_VISIT_MEMBER_NAME(isDebug,"isDebug");
}

hx::Val TestClassHelper_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		if (HX_FIELD_EQ(inName,"test") ) { return hx::Val( test); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"after") ) { return hx::Val( after); }
		if (HX_FIELD_EQ(inName,"tests") ) { return hx::Val( tests); }
		if (HX_FIELD_EQ(inName,"index") ) { return hx::Val( index); }
		if (HX_FIELD_EQ(inName,"parse") ) { return hx::Val( parse_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"before") ) { return hx::Val( before); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isDebug") ) { return hx::Val( isDebug); }
		if (HX_FIELD_EQ(inName,"hasNext") ) { return hx::Val( hasNext_dyn()); }
		if (HX_FIELD_EQ(inName,"current") ) { return hx::Val( current_dyn()); }
		if (HX_FIELD_EQ(inName,"addTest") ) { return hx::Val( addTest_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"nullFunc") ) { return hx::Val( nullFunc_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"className") ) { return hx::Val( className); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"afterClass") ) { return hx::Val( afterClass); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"beforeClass") ) { return hx::Val( beforeClass); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"scanForTests") ) { return hx::Val( scanForTests_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sortTestsByName") ) { return hx::Val( sortTestsByName_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"collateFieldMeta") ) { return hx::Val( collateFieldMeta_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getInheritanceChain") ) { return hx::Val( getInheritanceChain_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"searchForMatchingTags") ) { return hx::Val( searchForMatchingTags_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool TestClassHelper_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"META_TAGS") ) { outValue = META_TAGS; return true; }
	}
	return false;
}

hx::Val TestClassHelper_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< hx::Class >(); return inValue; }
		if (HX_FIELD_EQ(inName,"test") ) { test=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"after") ) { after=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tests") ) { tests=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"before") ) { before=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isDebug") ) { isDebug=inValue.Cast< Bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"className") ) { className=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"afterClass") ) { afterClass=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"beforeClass") ) { beforeClass=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TestClassHelper_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"META_TAGS") ) { META_TAGS=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

void TestClassHelper_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("test","\x52","\xc8","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("beforeClass","\x39","\xe7","\xb5","\xcd"));
	outFields->push(HX_HCSTRING("afterClass","\x7c","\xdc","\x6f","\xab"));
	outFields->push(HX_HCSTRING("before","\x7f","\x54","\x32","\x9a"));
	outFields->push(HX_HCSTRING("after","\x1c","\x66","\xa2","\x1d"));
	outFields->push(HX_HCSTRING("tests","\xe1","\x7f","\x95","\x0d"));
	outFields->push(HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"));
	outFields->push(HX_HCSTRING("className","\xa3","\x92","\x3d","\xdc"));
	outFields->push(HX_HCSTRING("isDebug","\x09","\xf6","\xa4","\x73"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestClassHelper_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::hx::Class*/ ,(int)offsetof(TestClassHelper_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TestClassHelper_obj,test),HX_HCSTRING("test","\x52","\xc8","\xf9","\x4c")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TestClassHelper_obj,beforeClass),HX_HCSTRING("beforeClass","\x39","\xe7","\xb5","\xcd")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TestClassHelper_obj,afterClass),HX_HCSTRING("afterClass","\x7c","\xdc","\x6f","\xab")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TestClassHelper_obj,before),HX_HCSTRING("before","\x7f","\x54","\x32","\x9a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TestClassHelper_obj,after),HX_HCSTRING("after","\x1c","\x66","\xa2","\x1d")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(TestClassHelper_obj,tests),HX_HCSTRING("tests","\xe1","\x7f","\x95","\x0d")},
	{hx::fsInt,(int)offsetof(TestClassHelper_obj,index),HX_HCSTRING("index","\x12","\x9b","\x14","\xbe")},
	{hx::fsString,(int)offsetof(TestClassHelper_obj,className),HX_HCSTRING("className","\xa3","\x92","\x3d","\xdc")},
	{hx::fsBool,(int)offsetof(TestClassHelper_obj,isDebug),HX_HCSTRING("isDebug","\x09","\xf6","\xa4","\x73")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TestClassHelper_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &TestClassHelper_obj::META_TAG_BEFORE_CLASS,HX_HCSTRING("META_TAG_BEFORE_CLASS","\x77","\x0f","\xce","\x2b")},
	{hx::fsString,(void *) &TestClassHelper_obj::META_TAG_AFTER_CLASS,HX_HCSTRING("META_TAG_AFTER_CLASS","\xd6","\x3c","\x10","\x6e")},
	{hx::fsString,(void *) &TestClassHelper_obj::META_TAG_BEFORE,HX_HCSTRING("META_TAG_BEFORE","\x9e","\x0d","\x99","\xef")},
	{hx::fsString,(void *) &TestClassHelper_obj::META_TAG_AFTER,HX_HCSTRING("META_TAG_AFTER","\xbd","\xd9","\xe0","\xde")},
	{hx::fsString,(void *) &TestClassHelper_obj::META_TAG_TEST,HX_HCSTRING("META_TAG_TEST","\xb1","\xc7","\x9a","\xb8")},
	{hx::fsString,(void *) &TestClassHelper_obj::META_TAG_ASYNC_TEST,HX_HCSTRING("META_TAG_ASYNC_TEST","\x34","\xb8","\xd0","\x6d")},
	{hx::fsString,(void *) &TestClassHelper_obj::META_TAG_IGNORE,HX_HCSTRING("META_TAG_IGNORE","\x31","\x72","\x2f","\xe8")},
	{hx::fsString,(void *) &TestClassHelper_obj::META_PARAM_ASYNC_TEST,HX_HCSTRING("META_PARAM_ASYNC_TEST","\x61","\x5f","\x3c","\xad")},
	{hx::fsString,(void *) &TestClassHelper_obj::META_TAG_TEST_DEBUG,HX_HCSTRING("META_TAG_TEST_DEBUG","\xe5","\xf3","\xb5","\x68")},
	{hx::fsObject /*Array< ::String >*/ ,(void *) &TestClassHelper_obj::META_TAGS,HX_HCSTRING("META_TAGS","\xd3","\x5b","\x3b","\x6a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TestClassHelper_obj_sMemberFields[] = {
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("test","\x52","\xc8","\xf9","\x4c"),
	HX_HCSTRING("beforeClass","\x39","\xe7","\xb5","\xcd"),
	HX_HCSTRING("afterClass","\x7c","\xdc","\x6f","\xab"),
	HX_HCSTRING("before","\x7f","\x54","\x32","\x9a"),
	HX_HCSTRING("after","\x1c","\x66","\xa2","\x1d"),
	HX_HCSTRING("tests","\xe1","\x7f","\x95","\x0d"),
	HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"),
	HX_HCSTRING("className","\xa3","\x92","\x3d","\xdc"),
	HX_HCSTRING("isDebug","\x09","\xf6","\xa4","\x73"),
	HX_HCSTRING("hasNext","\x6d","\xa5","\x46","\x18"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("current","\x39","\x9c","\xe3","\xcb"),
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	HX_HCSTRING("getInheritanceChain","\x0d","\xa3","\x77","\x21"),
	HX_HCSTRING("collateFieldMeta","\x59","\x88","\x3b","\xdc"),
	HX_HCSTRING("scanForTests","\xb5","\x06","\x00","\xc0"),
	HX_HCSTRING("searchForMatchingTags","\x57","\x9a","\xc8","\xb1"),
	HX_HCSTRING("addTest","\x13","\x0b","\x37","\x89"),
	HX_HCSTRING("sortTestsByName","\xc5","\xcf","\x56","\xf5"),
	HX_HCSTRING("nullFunc","\x6b","\x05","\x6c","\x21"),
	::String(null()) };

static void TestClassHelper_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestClassHelper_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TestClassHelper_obj::META_TAG_BEFORE_CLASS,"META_TAG_BEFORE_CLASS");
	HX_MARK_MEMBER_NAME(TestClassHelper_obj::META_TAG_AFTER_CLASS,"META_TAG_AFTER_CLASS");
	HX_MARK_MEMBER_NAME(TestClassHelper_obj::META_TAG_BEFORE,"META_TAG_BEFORE");
	HX_MARK_MEMBER_NAME(TestClassHelper_obj::META_TAG_AFTER,"META_TAG_AFTER");
	HX_MARK_MEMBER_NAME(TestClassHelper_obj::META_TAG_TEST,"META_TAG_TEST");
	HX_MARK_MEMBER_NAME(TestClassHelper_obj::META_TAG_ASYNC_TEST,"META_TAG_ASYNC_TEST");
	HX_MARK_MEMBER_NAME(TestClassHelper_obj::META_TAG_IGNORE,"META_TAG_IGNORE");
	HX_MARK_MEMBER_NAME(TestClassHelper_obj::META_PARAM_ASYNC_TEST,"META_PARAM_ASYNC_TEST");
	HX_MARK_MEMBER_NAME(TestClassHelper_obj::META_TAG_TEST_DEBUG,"META_TAG_TEST_DEBUG");
	HX_MARK_MEMBER_NAME(TestClassHelper_obj::META_TAGS,"META_TAGS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestClassHelper_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestClassHelper_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TestClassHelper_obj::META_TAG_BEFORE_CLASS,"META_TAG_BEFORE_CLASS");
	HX_VISIT_MEMBER_NAME(TestClassHelper_obj::META_TAG_AFTER_CLASS,"META_TAG_AFTER_CLASS");
	HX_VISIT_MEMBER_NAME(TestClassHelper_obj::META_TAG_BEFORE,"META_TAG_BEFORE");
	HX_VISIT_MEMBER_NAME(TestClassHelper_obj::META_TAG_AFTER,"META_TAG_AFTER");
	HX_VISIT_MEMBER_NAME(TestClassHelper_obj::META_TAG_TEST,"META_TAG_TEST");
	HX_VISIT_MEMBER_NAME(TestClassHelper_obj::META_TAG_ASYNC_TEST,"META_TAG_ASYNC_TEST");
	HX_VISIT_MEMBER_NAME(TestClassHelper_obj::META_TAG_IGNORE,"META_TAG_IGNORE");
	HX_VISIT_MEMBER_NAME(TestClassHelper_obj::META_PARAM_ASYNC_TEST,"META_PARAM_ASYNC_TEST");
	HX_VISIT_MEMBER_NAME(TestClassHelper_obj::META_TAG_TEST_DEBUG,"META_TAG_TEST_DEBUG");
	HX_VISIT_MEMBER_NAME(TestClassHelper_obj::META_TAGS,"META_TAGS");
};

#endif

hx::Class TestClassHelper_obj::__mClass;

static ::String TestClassHelper_obj_sStaticFields[] = {
	HX_HCSTRING("META_TAG_BEFORE_CLASS","\x77","\x0f","\xce","\x2b"),
	HX_HCSTRING("META_TAG_AFTER_CLASS","\xd6","\x3c","\x10","\x6e"),
	HX_HCSTRING("META_TAG_BEFORE","\x9e","\x0d","\x99","\xef"),
	HX_HCSTRING("META_TAG_AFTER","\xbd","\xd9","\xe0","\xde"),
	HX_HCSTRING("META_TAG_TEST","\xb1","\xc7","\x9a","\xb8"),
	HX_HCSTRING("META_TAG_ASYNC_TEST","\x34","\xb8","\xd0","\x6d"),
	HX_HCSTRING("META_TAG_IGNORE","\x31","\x72","\x2f","\xe8"),
	HX_HCSTRING("META_PARAM_ASYNC_TEST","\x61","\x5f","\x3c","\xad"),
	HX_HCSTRING("META_TAG_TEST_DEBUG","\xe5","\xf3","\xb5","\x68"),
	HX_HCSTRING("META_TAGS","\xd3","\x5b","\x3b","\x6a"),
	::String(null())
};

void TestClassHelper_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("massive.munit.TestClassHelper","\xed","\x5e","\xfe","\xe3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TestClassHelper_obj::__GetStatic;
	__mClass->mSetStaticField = &TestClassHelper_obj::__SetStatic;
	__mClass->mMarkFunc = TestClassHelper_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TestClassHelper_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestClassHelper_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestClassHelper_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestClassHelper_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestClassHelper_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestClassHelper_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TestClassHelper_obj::__boot()
{
{
            	HX_STACK_FRAME("massive.munit.TestClassHelper","boot",0xef4b9953,"massive.munit.TestClassHelper.boot","massive/munit/TestClassHelper.hx",51,0xfbaf8533)
HXLINE(  51)		META_TAG_BEFORE_CLASS = HX_("BeforeClass",19,7f,e8,b1);
            	}
{
            	HX_STACK_FRAME("massive.munit.TestClassHelper","boot",0xef4b9953,"massive.munit.TestClassHelper.boot","massive/munit/TestClassHelper.hx",56,0xfbaf8533)
HXLINE(  56)		META_TAG_AFTER_CLASS = HX_("AfterClass",9c,e0,20,a2);
            	}
{
            	HX_STACK_FRAME("massive.munit.TestClassHelper","boot",0xef4b9953,"massive.munit.TestClassHelper.boot","massive/munit/TestClassHelper.hx",61,0xfbaf8533)
HXLINE(  61)		META_TAG_BEFORE = HX_("Before",9f,c8,c6,ce);
            	}
{
            	HX_STACK_FRAME("massive.munit.TestClassHelper","boot",0xef4b9953,"massive.munit.TestClassHelper.boot","massive/munit/TestClassHelper.hx",66,0xfbaf8533)
HXLINE(  66)		META_TAG_AFTER = HX_("After",fc,d5,cf,b0);
            	}
{
            	HX_STACK_FRAME("massive.munit.TestClassHelper","boot",0xef4b9953,"massive.munit.TestClassHelper.boot","massive/munit/TestClassHelper.hx",71,0xfbaf8533)
HXLINE(  71)		META_TAG_TEST = HX_("Test",72,f4,d2,37);
            	}
{
            	HX_STACK_FRAME("massive.munit.TestClassHelper","boot",0xef4b9953,"massive.munit.TestClassHelper.boot","massive/munit/TestClassHelper.hx",76,0xfbaf8533)
HXLINE(  76)		META_TAG_ASYNC_TEST = HX_("AsyncTest",8e,21,5a,1c);
            	}
{
            	HX_STACK_FRAME("massive.munit.TestClassHelper","boot",0xef4b9953,"massive.munit.TestClassHelper.boot","massive/munit/TestClassHelper.hx",81,0xfbaf8533)
HXLINE(  81)		META_TAG_IGNORE = HX_("Ignore",32,2d,5d,c7);
            	}
{
            	HX_STACK_FRAME("massive.munit.TestClassHelper","boot",0xef4b9953,"massive.munit.TestClassHelper.boot","massive/munit/TestClassHelper.hx",88,0xfbaf8533)
HXLINE(  88)		META_PARAM_ASYNC_TEST = HX_("Async",1c,6f,6b,b9);
            	}
{
            	HX_STACK_FRAME("massive.munit.TestClassHelper","boot",0xef4b9953,"massive.munit.TestClassHelper.boot","massive/munit/TestClassHelper.hx",93,0xfbaf8533)
HXLINE(  93)		META_TAG_TEST_DEBUG = HX_("TestDebug",81,70,f4,41);
            	}
{
            	HX_STACK_FRAME("massive.munit.TestClassHelper","boot",0xef4b9953,"massive.munit.TestClassHelper.boot","massive/munit/TestClassHelper.hx",98,0xfbaf8533)
HXLINE(  98)		META_TAGS = ::Array_obj< ::String >::fromData( _hx_array_data_8,7);
            	}
}

} // end namespace massive
} // end namespace munit
