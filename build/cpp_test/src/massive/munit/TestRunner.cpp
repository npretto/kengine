// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_cpp_vm_Thread
#include <cpp/vm/Thread.h>
#endif
#ifndef INCLUDED_massive_haxe_Exception
#include <massive/haxe/Exception.h>
#endif
#ifndef INCLUDED_massive_munit_Assert
#include <massive/munit/Assert.h>
#endif
#ifndef INCLUDED_massive_munit_AssertionException
#include <massive/munit/AssertionException.h>
#endif
#ifndef INCLUDED_massive_munit_IAdvancedTestResultClient
#include <massive/munit/IAdvancedTestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_ITestResultClient
#include <massive/munit/ITestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_MUnitException
#include <massive/munit/MUnitException.h>
#endif
#ifndef INCLUDED_massive_munit_TestClassHelper
#include <massive/munit/TestClassHelper.h>
#endif
#ifndef INCLUDED_massive_munit_TestResult
#include <massive/munit/TestResult.h>
#endif
#ifndef INCLUDED_massive_munit_TestRunner
#include <massive/munit/TestRunner.h>
#endif
#ifndef INCLUDED_massive_munit_TestSuite
#include <massive/munit/TestSuite.h>
#endif
#ifndef INCLUDED_massive_munit_UnhandledException
#include <massive/munit/UnhandledException.h>
#endif
#ifndef INCLUDED_massive_munit_async_AsyncDelegate
#include <massive/munit/async/AsyncDelegate.h>
#endif
#ifndef INCLUDED_massive_munit_async_AsyncFactory
#include <massive/munit/async/AsyncFactory.h>
#endif
#ifndef INCLUDED_massive_munit_async_AsyncTimeoutException
#include <massive/munit/async/AsyncTimeoutException.h>
#endif
#ifndef INCLUDED_massive_munit_async_IAsyncDelegateObserver
#include <massive/munit/async/IAsyncDelegateObserver.h>
#endif
#ifndef INCLUDED_massive_munit_async_MissingAsyncDelegateException
#include <massive/munit/async/MissingAsyncDelegateException.h>
#endif
#ifndef INCLUDED_massive_munit_util_Timer
#include <massive/munit/util/Timer.h>
#endif
#ifndef INCLUDED_org_hamcrest_AssertionException
#include <org/hamcrest/AssertionException.h>
#endif
#ifndef INCLUDED_org_hamcrest_Exception
#include <org/hamcrest/Exception.h>
#endif

namespace massive{
namespace munit{

void TestRunner_obj::__construct(::Dynamic resultClient){
            	HX_STACK_FRAME("massive.munit.TestRunner","new",0x95fc899b,"massive.munit.TestRunner.new","massive/munit/TestRunner.hx",146,0x7b3fda33)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(resultClient,"resultClient")
HXLINE( 147)		this->clients = ::Array_obj< ::Dynamic>::__new();
HXLINE( 148)		this->addResultClient(resultClient);
HXLINE( 149)		 ::massive::munit::async::AsyncFactory _hx_tmp = this->createAsyncFactory();
HXDLIN( 149)		this->set_asyncFactory(_hx_tmp);
HXLINE( 150)		this->running = false;
HXLINE( 155)		this->isDebug = false;
            	}

Dynamic TestRunner_obj::__CreateEmpty() { return new TestRunner_obj; }

hx::ObjectPtr< TestRunner_obj > TestRunner_obj::__new(::Dynamic resultClient)
{
	hx::ObjectPtr< TestRunner_obj > _hx_result = new TestRunner_obj();
	_hx_result->__construct(resultClient);
	return _hx_result;
}

Dynamic TestRunner_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TestRunner_obj > _hx_result = new TestRunner_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

static ::massive::munit::async::IAsyncDelegateObserver_obj _hx_massive_munit_TestRunner__hx_massive_munit_async_IAsyncDelegateObserver= {
	( void (hx::Object::*)( ::massive::munit::async::AsyncDelegate))&::massive::munit::TestRunner_obj::asyncResponseHandler,
	( void (hx::Object::*)( ::massive::munit::async::AsyncDelegate))&::massive::munit::TestRunner_obj::asyncTimeoutHandler,
	( void (hx::Object::*)( ::massive::munit::async::AsyncDelegate))&::massive::munit::TestRunner_obj::asyncDelegateCreatedHandler,
};

void *TestRunner_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x411fd8dd: return &_hx_massive_munit_TestRunner__hx_massive_munit_async_IAsyncDelegateObserver;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

Int TestRunner_obj::get_clientCount(){
            	HX_STACK_FRAME("massive.munit.TestRunner","get_clientCount",0x892197d6,"massive.munit.TestRunner.get_clientCount","massive/munit/TestRunner.hx",103,0x7b3fda33)
            	HX_STACK_THIS(this)
HXLINE( 103)		return this->clients->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestRunner_obj,get_clientCount,return )

 ::massive::munit::async::AsyncFactory TestRunner_obj::set_asyncFactory( ::massive::munit::async::AsyncFactory value){
            	HX_STACK_FRAME("massive.munit.TestRunner","set_asyncFactory",0x63769cd0,"massive.munit.TestRunner.set_asyncFactory","massive/munit/TestRunner.hx",125,0x7b3fda33)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 126)		if (hx::IsEq( value,this->asyncFactory )) {
HXLINE( 126)			return value;
            		}
HXLINE( 127)		Bool _hx_tmp = this->running;
HXDLIN( 127)		if (_hx_tmp) {
HXLINE( 127)			HX_STACK_DO_THROW( ::massive::munit::MUnitException_obj::__new(HX_("Can't change AsyncFactory while tests are running",a0,86,8b,78),hx::SourceInfo(HX_("TestRunner.hx",fc,9b,2a,db),127,HX_("massive.munit.TestRunner",29,20,c3,6b),HX_("set_asyncFactory",eb,be,ec,42))));
            		}
HXLINE( 128)		value->observer = hx::ObjectPtr<OBJ_>(this);
HXLINE( 129)		return (this->asyncFactory = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestRunner_obj,set_asyncFactory,return )

void TestRunner_obj::addResultClient(::Dynamic resultClient){
            	HX_STACK_FRAME("massive.munit.TestRunner","addResultClient",0x46b4bc84,"massive.munit.TestRunner.addResultClient","massive/munit/TestRunner.hx",165,0x7b3fda33)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(resultClient,"resultClient")
HXLINE( 166)		{
HXLINE( 166)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 166)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->clients;
HXDLIN( 166)			while((_g < _g1->length)){
HXLINE( 166)				HX_VARI( ::Dynamic,client) = _g1->__get(_g);
HXDLIN( 166)				++_g;
HXDLIN( 166)				if (hx::IsEq( client,resultClient )) {
HXLINE( 166)					return;
            				}
            			}
            		}
HXLINE( 168)		::massive::munit::ITestResultClient_obj::set_completionHandler(resultClient,this->clientCompletionHandler_dyn());
HXLINE( 169)		this->clients->push(resultClient);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestRunner_obj,addResultClient,(void))

void TestRunner_obj::debug(::Array< ::Dynamic> testSuiteClasses){
            	HX_STACK_FRAME("massive.munit.TestRunner","debug",0xb355104e,"massive.munit.TestRunner.debug","massive/munit/TestRunner.hx",179,0x7b3fda33)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(testSuiteClasses,"testSuiteClasses")
HXLINE( 180)		this->isDebug = true;
HXLINE( 181)		this->run(testSuiteClasses);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestRunner_obj,debug,(void))

void TestRunner_obj::run(::Array< ::Dynamic> testSuiteClasses){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::massive::munit::TestRunner,self) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("massive.munit.TestRunner","run",0x95ffa086,"massive.munit.TestRunner.run","massive/munit/TestRunner.hx",216,0x7b3fda33)
HXLINE( 217)			self->execute();
HXLINE( 218)			while(self->running){
HXLINE( 220)				::Sys_obj::sleep(((Float).2));
            			}
HXLINE( 222)			HX_VARI(  ::cpp::vm::Thread,mainThead) = ( ( ::cpp::vm::Thread)(::cpp::vm::Thread_obj::readMessage(true)) );
HXLINE( 223)			mainThead->sendMessage(HX_("done",82,f0,6d,42));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("massive.munit.TestRunner","run",0x95ffa086,"massive.munit.TestRunner.run","massive/munit/TestRunner.hx",190,0x7b3fda33)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(testSuiteClasses,"testSuiteClasses")
HXLINE( 191)		if (this->running) {
HXLINE( 191)			return;
            		}
HXLINE( 193)		this->running = true;
HXLINE( 194)		this->asyncPending = false;
HXLINE( 195)		this->asyncDelegate = null();
HXLINE( 196)		this->testCount = (int)0;
HXLINE( 197)		this->failCount = (int)0;
HXLINE( 198)		this->errorCount = (int)0;
HXLINE( 199)		this->passCount = (int)0;
HXLINE( 200)		this->ignoreCount = (int)0;
HXLINE( 201)		this->suiteIndex = (int)0;
HXLINE( 202)		this->clientCompleteCount = (int)0;
HXLINE( 203)		::massive::munit::Assert_obj::assertionCount = (int)0;
HXLINE( 204)		this->emptyParams = ::cpp::VirtualArray_obj::__new();
HXLINE( 205)		this->testSuites = ::Array_obj< ::Dynamic>::__new();
HXLINE( 206)		this->startTime = ::massive::munit::util::Timer_obj::stamp();
HXLINE( 208)		{
HXLINE( 208)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 208)			while((_g < testSuiteClasses->length)){
HXLINE( 208)				HX_VARI( hx::Class,suiteType) = testSuiteClasses->__get(_g).StaticCast< hx::Class >();
HXDLIN( 208)				++_g;
HXLINE( 210)				 ::massive::munit::TestSuite _hx_tmp = ( ( ::massive::munit::TestSuite)(::Type_obj::createInstance(suiteType,::cpp::VirtualArray_obj::__new())) );
HXDLIN( 210)				this->testSuites->push(_hx_tmp);
            			}
            		}
HXLINE( 214)		HX_VARI(  ::massive::munit::TestRunner,self) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 215)		HX_VARI(  ::cpp::vm::Thread,runThread) = ::cpp::vm::Thread_obj::create( ::Dynamic(new _hx_Closure_0(self)));
HXLINE( 226)		 ::cpp::vm::Thread _hx_tmp1 = ::cpp::vm::Thread_obj::current();
HXDLIN( 226)		runThread->sendMessage(_hx_tmp1);
HXLINE( 227)		::cpp::vm::Thread_obj::readMessage(true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestRunner_obj,run,(void))

void TestRunner_obj::execute(){
            	HX_STACK_FRAME("massive.munit.TestRunner","execute",0x6faa7cf0,"massive.munit.TestRunner.execute","massive/munit/TestRunner.hx",234,0x7b3fda33)
            	HX_STACK_THIS(this)
HXLINE( 235)		{
HXLINE( 235)			HX_VARI( Int,_g1) = this->suiteIndex;
HXDLIN( 235)			HX_VARI( Int,_g) = this->testSuites->length;
HXDLIN( 235)			while((_g1 < _g)){
HXLINE( 235)				HX_VARI( Int,i) = _g1++;
HXLINE( 237)				HX_VARI(  ::massive::munit::TestSuite,suite) = this->testSuites->__get(i).StaticCast<  ::massive::munit::TestSuite >();
HXLINE( 238)				while(true){
HXLINE( 238)					Bool _hx_tmp = !(suite->hasNext());
HXDLIN( 238)					if (_hx_tmp) {
HXLINE( 238)						goto _hx_goto_4;
            					}
HXDLIN( 238)					HX_VARI( hx::Class,testClass) = suite->next();
HXLINE( 240)					Bool _hx_tmp1;
HXDLIN( 240)					Bool _hx_tmp2 = hx::IsNotNull( this->activeHelper );
HXDLIN( 240)					if (_hx_tmp2) {
HXLINE( 240)						_hx_tmp1 = hx::IsNotEq( this->activeHelper->type,testClass );
            					}
            					else {
HXLINE( 240)						_hx_tmp1 = true;
            					}
HXDLIN( 240)					if (_hx_tmp1) {
HXLINE( 242)						this->activeHelper =  ::massive::munit::TestClassHelper_obj::__new(testClass,this->isDebug);
HXLINE( 243)						::Reflect_obj::callMethod(this->activeHelper->test,this->activeHelper->beforeClass,this->emptyParams);
            					}
HXLINE( 245)					this->executeTestCases();
HXLINE( 246)					Bool _hx_tmp3 = !(this->asyncPending);
HXDLIN( 246)					if (_hx_tmp3) {
HXLINE( 248)						::Reflect_obj::callMethod(this->activeHelper->test,this->activeHelper->afterClass,this->emptyParams);
            					}
            					else {
HXLINE( 252)						suite->repeat();
HXLINE( 253)						this->suiteIndex = i;
HXLINE( 254)						return;
            					}
            				}
            				_hx_goto_4:;
HXLINE( 257)				this->testSuites[i] = null();
            			}
            		}
HXLINE( 260)		Bool _hx_tmp4 = !(this->asyncPending);
HXDLIN( 260)		if (_hx_tmp4) {
HXLINE( 262)			Float _hx_tmp5 = ::massive::munit::util::Timer_obj::stamp();
HXDLIN( 262)			HX_VARI( Float,time) = (_hx_tmp5 - this->startTime);
HXLINE( 263)			{
HXLINE( 263)				HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 263)				HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->clients;
HXDLIN( 263)				while((_g2 < _g11->length)){
HXLINE( 263)					HX_VARI( ::Dynamic,client) = _g11->__get(_g2);
HXDLIN( 263)					++_g2;
HXLINE( 265)					Bool _hx_tmp6 = ::Std_obj::is(client,hx::ClassOf< ::massive::munit::IAdvancedTestResultClient >());
HXDLIN( 265)					if (_hx_tmp6) {
HXLINE( 268)						::massive::munit::IAdvancedTestResultClient_obj::setCurrentTestClass(client,null());
            					}
HXLINE( 270)					::massive::munit::ITestResultClient_obj::reportFinalStatistics(client,this->testCount,this->passCount,this->failCount,this->errorCount,this->ignoreCount,time);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestRunner_obj,execute,(void))

void TestRunner_obj::executeTestCases(){
            	HX_STACK_FRAME("massive.munit.TestRunner","executeTestCases",0x4eec3f01,"massive.munit.TestRunner.executeTestCases","massive/munit/TestRunner.hx",276,0x7b3fda33)
            	HX_STACK_THIS(this)
HXLINE( 277)		{
HXLINE( 277)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 277)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->clients;
HXDLIN( 277)			while((_g < _g1->length)){
HXLINE( 277)				HX_VARI( ::Dynamic,c) = _g1->__get(_g);
HXDLIN( 277)				++_g;
HXLINE( 279)				Bool _hx_tmp = ::Std_obj::is(c,hx::ClassOf< ::massive::munit::IAdvancedTestResultClient >());
HXDLIN( 279)				if (_hx_tmp) {
HXLINE( 281)					Bool _hx_tmp1 = this->activeHelper->hasNext();
HXDLIN( 281)					if (_hx_tmp1) {
HXLINE( 284)						::massive::munit::IAdvancedTestResultClient_obj::setCurrentTestClass(c,this->activeHelper->className);
            					}
            				}
            			}
            		}
HXLINE( 288)		{
HXLINE( 288)			HX_VARI(  ::massive::munit::TestClassHelper,tmp) = this->activeHelper;
HXDLIN( 288)			while(true){
HXLINE( 288)				Bool _hx_tmp2 = !(tmp->hasNext());
HXDLIN( 288)				if (_hx_tmp2) {
HXLINE( 288)					goto _hx_goto_7;
            				}
HXDLIN( 288)				HX_VARI(  ::Dynamic,testCaseData) = tmp->next();
HXLINE( 290)				Bool _hx_tmp3 = ( (Bool)( ::Dynamic(testCaseData->__Field(HX_("result",dd,68,84,08),hx::paccDynamic))->__Field(HX_("ignore",12,b9,c8,92),hx::paccDynamic)) );
HXDLIN( 290)				if (_hx_tmp3) {
HXLINE( 292)					this->ignoreCount++;
HXLINE( 293)					{
HXLINE( 293)						HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 293)						HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->clients;
HXDLIN( 293)						while((_g2 < _g11->length)){
HXLINE( 293)							HX_VARI_NAME( ::Dynamic,c1,"c") = _g11->__get(_g2);
HXDLIN( 293)							++_g2;
HXLINE( 294)							::massive::munit::ITestResultClient_obj::addIgnore(c1,( ( ::massive::munit::TestResult)(testCaseData->__Field(HX_("result",dd,68,84,08),hx::paccDynamic)) ));
            						}
            					}
            				}
            				else {
HXLINE( 298)					this->testCount++;
HXLINE( 299)					::Reflect_obj::callMethod(this->activeHelper->test,this->activeHelper->before,this->emptyParams);
HXLINE( 300)					this->testStartTime = ::massive::munit::util::Timer_obj::stamp();
HXLINE( 301)					this->executeTestCase(testCaseData, ::Dynamic( ::Dynamic(testCaseData->__Field(HX_("result",dd,68,84,08),hx::paccDynamic))->__Field(HX_("async",3c,ff,3d,26),hx::paccDynamic)));
HXLINE( 303)					Bool _hx_tmp4 = !(this->asyncPending);
HXDLIN( 303)					if (_hx_tmp4) {
HXLINE( 304)						::Reflect_obj::callMethod(this->activeHelper->test,this->activeHelper->after,this->emptyParams);
            					}
            					else {
HXLINE( 306)						goto _hx_goto_7;
            					}
            				}
            			}
            			_hx_goto_7:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestRunner_obj,executeTestCases,(void))

void TestRunner_obj::executeTestCase( ::Dynamic testCaseData,Bool async){
            	HX_STACK_FRAME("massive.munit.TestRunner","executeTestCase",0xf9774d32,"massive.munit.TestRunner.executeTestCase","massive/munit/TestRunner.hx",312,0x7b3fda33)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(testCaseData,"testCaseData")
            	HX_STACK_ARG(async,"async")
HXLINE( 313)		HX_VARI(  ::massive::munit::TestResult,result) = ( ( ::massive::munit::TestResult)(testCaseData->__Field(HX_("result",dd,68,84,08),hx::paccDynamic)) );
HXLINE( 314)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 317)			if (async) {
HXLINE( 319)				::Reflect_obj::callMethod( ::Dynamic(testCaseData->__Field(HX_("scope",94,71,d9,78),hx::paccDynamic)), ::Dynamic(testCaseData->__Field(HX_("test",52,c8,f9,4c),hx::paccDynamic)),::cpp::VirtualArray_obj::__new(1)->init(0,this->asyncFactory));
HXLINE( 321)				Bool _hx_tmp = hx::IsNull( this->asyncDelegate );
HXDLIN( 321)				if (_hx_tmp) {
HXLINE( 323)					::String _hx_tmp1 = result->get_location();
HXDLIN( 323)					HX_STACK_DO_THROW( ::massive::munit::async::MissingAsyncDelegateException_obj::__new((HX_("No AsyncDelegate was created in async test at ",31,aa,40,73) + _hx_tmp1),null()));
            				}
HXLINE( 326)				this->asyncPending = true;
            			}
            			else {
HXLINE( 330)				::Reflect_obj::callMethod( ::Dynamic(testCaseData->__Field(HX_("scope",94,71,d9,78),hx::paccDynamic)), ::Dynamic(testCaseData->__Field(HX_("test",52,c8,f9,4c),hx::paccDynamic)),this->emptyParams);
HXLINE( 332)				result->passed = true;
HXLINE( 333)				Float _hx_tmp2 = ::massive::munit::util::Timer_obj::stamp();
HXDLIN( 333)				result->executionTime = (_hx_tmp2 - this->testStartTime);
HXLINE( 334)				this->passCount++;
HXLINE( 335)				{
HXLINE( 335)					HX_VARI( Int,_g) = (int)0;
HXDLIN( 335)					HX_VARI( ::Array< ::Dynamic>,_g1) = this->clients;
HXDLIN( 335)					while((_g < _g1->length)){
HXLINE( 335)						HX_VARI( ::Dynamic,c) = _g1->__get(_g);
HXDLIN( 335)						++_g;
HXLINE( 336)						::massive::munit::ITestResultClient_obj::addPass(c,result);
            					}
            				}
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 341)				Bool _hx_tmp3;
HXDLIN( 341)				if (async) {
HXLINE( 341)					_hx_tmp3 = hx::IsNotNull( this->asyncDelegate );
            				}
            				else {
HXLINE( 341)					_hx_tmp3 = false;
            				}
HXDLIN( 341)				if (_hx_tmp3) {
HXLINE( 343)					this->asyncDelegate->cancelTest();
HXLINE( 344)					this->asyncDelegate = null();
            				}
HXLINE( 348)				Bool _hx_tmp4 = ::Std_obj::is(e,hx::ClassOf< ::org::hamcrest::AssertionException >());
HXDLIN( 348)				if (_hx_tmp4) {
HXLINE( 349)					e =  ::massive::munit::AssertionException_obj::__new( ::Dynamic(e->__Field(HX_("message",c7,35,11,9a),hx::paccDynamic)), ::Dynamic(e->__Field(HX_("info",6e,38,bb,45),hx::paccDynamic)));
            				}
HXLINE( 352)				Bool _hx_tmp5 = ::Std_obj::is(e,hx::ClassOf< ::massive::munit::AssertionException >());
HXDLIN( 352)				if (_hx_tmp5) {
HXLINE( 354)					Float _hx_tmp6 = ::massive::munit::util::Timer_obj::stamp();
HXDLIN( 354)					result->executionTime = (_hx_tmp6 - this->testStartTime);
HXLINE( 355)					result->failure = e;
HXLINE( 356)					this->failCount++;
HXLINE( 357)					{
HXLINE( 357)						HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 357)						HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->clients;
HXDLIN( 357)						while((_g2 < _g11->length)){
HXLINE( 357)							HX_VARI_NAME( ::Dynamic,c1,"c") = _g11->__get(_g2);
HXDLIN( 357)							++_g2;
HXLINE( 358)							::massive::munit::ITestResultClient_obj::addFail(c1,result);
            						}
            					}
            				}
            				else {
HXLINE( 362)					Float _hx_tmp7 = ::massive::munit::util::Timer_obj::stamp();
HXDLIN( 362)					result->executionTime = (_hx_tmp7 - this->testStartTime);
HXLINE( 363)					Bool _hx_tmp8 = !(::Std_obj::is(e,hx::ClassOf< ::massive::munit::MUnitException >()));
HXDLIN( 363)					if (_hx_tmp8) {
HXLINE( 364)						::String _hx_tmp9 = result->get_location();
HXDLIN( 364)						e =  ::massive::munit::UnhandledException_obj::__new(e,_hx_tmp9);
            					}
HXLINE( 366)					result->error = e;
HXLINE( 367)					this->errorCount++;
HXLINE( 368)					{
HXLINE( 368)						HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN( 368)						HX_VARI_NAME( ::Array< ::Dynamic>,_g12,"_g1") = this->clients;
HXDLIN( 368)						while((_g3 < _g12->length)){
HXLINE( 368)							HX_VARI_NAME( ::Dynamic,c2,"c") = _g12->__get(_g3);
HXDLIN( 368)							++_g3;
HXLINE( 369)							::massive::munit::ITestResultClient_obj::addError(c2,result);
            						}
            					}
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TestRunner_obj,executeTestCase,(void))

void TestRunner_obj::clientCompletionHandler(::Dynamic resultClient){
            	HX_STACK_FRAME("massive.munit.TestRunner","clientCompletionHandler",0x510871fe,"massive.munit.TestRunner.clientCompletionHandler","massive/munit/TestRunner.hx",377,0x7b3fda33)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(resultClient,"resultClient")
HXLINE( 377)		Bool _hx_tmp = (++this->clientCompleteCount == this->clients->length);
HXDLIN( 377)		if (_hx_tmp) {
HXLINE( 379)			Bool _hx_tmp1 = hx::IsNotNull( this->completionHandler );
HXDLIN( 379)			if (_hx_tmp1) {
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,Bool,successful, ::Dynamic,handler) HXARGC(0)
            				void _hx_run(){
            					HX_STACK_FRAME("massive.munit.TestRunner","clientCompletionHandler",0x510871fe,"massive.munit.TestRunner.clientCompletionHandler","massive/munit/TestRunner.hx",384,0x7b3fda33)
HXLINE( 384)					handler(successful);
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 381)				HX_VARI( Bool,successful) = (this->passCount == this->testCount);
HXLINE( 382)				HX_VARI(  ::Dynamic,handler) = this->completionHandler;
HXLINE( 384)				::massive::munit::util::Timer_obj::delay( ::Dynamic(new _hx_Closure_0(successful,handler)),(int)10);
            			}
HXLINE( 386)			this->running = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestRunner_obj,clientCompletionHandler,(void))

void TestRunner_obj::asyncResponseHandler( ::massive::munit::async::AsyncDelegate delegate){
            	HX_STACK_FRAME("massive.munit.TestRunner","asyncResponseHandler",0x97c52bd2,"massive.munit.TestRunner.asyncResponseHandler","massive/munit/TestRunner.hx",396,0x7b3fda33)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(delegate,"delegate")
HXLINE( 397)		HX_VARI(  ::Dynamic,testCaseData) = this->activeHelper->current();
HXLINE( 398)		testCaseData->__SetField(HX_("test",52,c8,f9,4c),delegate->runTest_dyn(),hx::paccDynamic);
HXLINE( 399)		testCaseData->__SetField(HX_("scope",94,71,d9,78),delegate,hx::paccDynamic);
HXLINE( 401)		this->asyncPending = false;
HXLINE( 402)		this->asyncDelegate = null();
HXLINE( 403)		this->executeTestCase(testCaseData,false);
HXLINE( 404)		::Reflect_obj::callMethod(this->activeHelper->test,this->activeHelper->after,this->emptyParams);
HXLINE( 405)		this->execute();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestRunner_obj,asyncResponseHandler,(void))

void TestRunner_obj::asyncTimeoutHandler( ::massive::munit::async::AsyncDelegate delegate){
            	HX_STACK_FRAME("massive.munit.TestRunner","asyncTimeoutHandler",0x266a26c0,"massive.munit.TestRunner.asyncTimeoutHandler","massive/munit/TestRunner.hx",415,0x7b3fda33)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(delegate,"delegate")
HXLINE( 416)		HX_VARI(  ::Dynamic,testCaseData) = this->activeHelper->current();
HXLINE( 417)		HX_VARI(  ::massive::munit::TestResult,result) = ( ( ::massive::munit::TestResult)(testCaseData->__Field(HX_("result",dd,68,84,08),hx::paccDynamic)) );
HXLINE( 418)		Float _hx_tmp = ::massive::munit::util::Timer_obj::stamp();
HXDLIN( 418)		result->executionTime = (_hx_tmp - this->testStartTime);
HXLINE( 419)		result->error =  ::massive::munit::async::AsyncTimeoutException_obj::__new(HX_("",00,00,00,00),delegate->info);
HXLINE( 421)		this->asyncPending = false;
HXLINE( 422)		this->asyncDelegate = null();
HXLINE( 423)		this->errorCount++;
HXLINE( 424)		{
HXLINE( 424)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 424)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->clients;
HXDLIN( 424)			while((_g < _g1->length)){
HXLINE( 424)				HX_VARI( ::Dynamic,c) = _g1->__get(_g);
HXDLIN( 424)				++_g;
HXDLIN( 424)				::massive::munit::ITestResultClient_obj::addError(c,result);
            			}
            		}
HXLINE( 425)		::Reflect_obj::callMethod(this->activeHelper->test,this->activeHelper->after,this->emptyParams);
HXLINE( 426)		this->execute();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestRunner_obj,asyncTimeoutHandler,(void))

void TestRunner_obj::asyncDelegateCreatedHandler( ::massive::munit::async::AsyncDelegate delegate){
            	HX_STACK_FRAME("massive.munit.TestRunner","asyncDelegateCreatedHandler",0x43465b7e,"massive.munit.TestRunner.asyncDelegateCreatedHandler","massive/munit/TestRunner.hx",431,0x7b3fda33)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(delegate,"delegate")
HXLINE( 431)		this->asyncDelegate = delegate;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TestRunner_obj,asyncDelegateCreatedHandler,(void))

 ::massive::munit::async::AsyncFactory TestRunner_obj::createAsyncFactory(){
            	HX_STACK_FRAME("massive.munit.TestRunner","createAsyncFactory",0x9f53032f,"massive.munit.TestRunner.createAsyncFactory","massive/munit/TestRunner.hx",436,0x7b3fda33)
            	HX_STACK_THIS(this)
HXLINE( 436)		return  ::massive::munit::async::AsyncFactory_obj::__new(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TestRunner_obj,createAsyncFactory,return )


TestRunner_obj::TestRunner_obj()
{
}

void TestRunner_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TestRunner);
	HX_MARK_MEMBER_NAME(completionHandler,"completionHandler");
	HX_MARK_MEMBER_NAME(clientCount,"clientCount");
	HX_MARK_MEMBER_NAME(running,"running");
	HX_MARK_MEMBER_NAME(testCount,"testCount");
	HX_MARK_MEMBER_NAME(failCount,"failCount");
	HX_MARK_MEMBER_NAME(errorCount,"errorCount");
	HX_MARK_MEMBER_NAME(passCount,"passCount");
	HX_MARK_MEMBER_NAME(ignoreCount,"ignoreCount");
	HX_MARK_MEMBER_NAME(clientCompleteCount,"clientCompleteCount");
	HX_MARK_MEMBER_NAME(clients,"clients");
	HX_MARK_MEMBER_NAME(activeHelper,"activeHelper");
	HX_MARK_MEMBER_NAME(testSuites,"testSuites");
	HX_MARK_MEMBER_NAME(asyncPending,"asyncPending");
	HX_MARK_MEMBER_NAME(asyncDelegate,"asyncDelegate");
	HX_MARK_MEMBER_NAME(suiteIndex,"suiteIndex");
	HX_MARK_MEMBER_NAME(asyncFactory,"asyncFactory");
	HX_MARK_MEMBER_NAME(emptyParams,"emptyParams");
	HX_MARK_MEMBER_NAME(startTime,"startTime");
	HX_MARK_MEMBER_NAME(testStartTime,"testStartTime");
	HX_MARK_MEMBER_NAME(isDebug,"isDebug");
	HX_MARK_END_CLASS();
}

void TestRunner_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(completionHandler,"completionHandler");
	HX_VISIT_MEMBER_NAME(clientCount,"clientCount");
	HX_VISIT_MEMBER_NAME(running,"running");
	HX_VISIT_MEMBER_NAME(testCount,"testCount");
	HX_VISIT_MEMBER_NAME(failCount,"failCount");
	HX_VISIT_MEMBER_NAME(errorCount,"errorCount");
	HX_VISIT_MEMBER_NAME(passCount,"passCount");
	HX_VISIT_MEMBER_NAME(ignoreCount,"ignoreCount");
	HX_VISIT_MEMBER_NAME(clientCompleteCount,"clientCompleteCount");
	HX_VISIT_MEMBER_NAME(clients,"clients");
	HX_VISIT_MEMBER_NAME(activeHelper,"activeHelper");
	HX_VISIT_MEMBER_NAME(testSuites,"testSuites");
	HX_VISIT_MEMBER_NAME(asyncPending,"asyncPending");
	HX_VISIT_MEMBER_NAME(asyncDelegate,"asyncDelegate");
	HX_VISIT_MEMBER_NAME(suiteIndex,"suiteIndex");
	HX_VISIT_MEMBER_NAME(asyncFactory,"asyncFactory");
	HX_VISIT_MEMBER_NAME(emptyParams,"emptyParams");
	HX_VISIT_MEMBER_NAME(startTime,"startTime");
	HX_VISIT_MEMBER_NAME(testStartTime,"testStartTime");
	HX_VISIT_MEMBER_NAME(isDebug,"isDebug");
}

hx::Val TestRunner_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"debug") ) { return hx::Val( debug_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"running") ) { return hx::Val( running); }
		if (HX_FIELD_EQ(inName,"clients") ) { return hx::Val( clients); }
		if (HX_FIELD_EQ(inName,"isDebug") ) { return hx::Val( isDebug); }
		if (HX_FIELD_EQ(inName,"execute") ) { return hx::Val( execute_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testCount") ) { return hx::Val( testCount); }
		if (HX_FIELD_EQ(inName,"failCount") ) { return hx::Val( failCount); }
		if (HX_FIELD_EQ(inName,"passCount") ) { return hx::Val( passCount); }
		if (HX_FIELD_EQ(inName,"startTime") ) { return hx::Val( startTime); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"errorCount") ) { return hx::Val( errorCount); }
		if (HX_FIELD_EQ(inName,"testSuites") ) { return hx::Val( testSuites); }
		if (HX_FIELD_EQ(inName,"suiteIndex") ) { return hx::Val( suiteIndex); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"clientCount") ) { return hx::Val( inCallProp == hx::paccAlways ? get_clientCount() : clientCount); }
		if (HX_FIELD_EQ(inName,"ignoreCount") ) { return hx::Val( ignoreCount); }
		if (HX_FIELD_EQ(inName,"emptyParams") ) { return hx::Val( emptyParams); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"activeHelper") ) { return hx::Val( activeHelper); }
		if (HX_FIELD_EQ(inName,"asyncPending") ) { return hx::Val( asyncPending); }
		if (HX_FIELD_EQ(inName,"asyncFactory") ) { return hx::Val( asyncFactory); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"asyncDelegate") ) { return hx::Val( asyncDelegate); }
		if (HX_FIELD_EQ(inName,"testStartTime") ) { return hx::Val( testStartTime); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_clientCount") ) { return hx::Val( get_clientCount_dyn()); }
		if (HX_FIELD_EQ(inName,"addResultClient") ) { return hx::Val( addResultClient_dyn()); }
		if (HX_FIELD_EQ(inName,"executeTestCase") ) { return hx::Val( executeTestCase_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"set_asyncFactory") ) { return hx::Val( set_asyncFactory_dyn()); }
		if (HX_FIELD_EQ(inName,"executeTestCases") ) { return hx::Val( executeTestCases_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"completionHandler") ) { return hx::Val( completionHandler); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"createAsyncFactory") ) { return hx::Val( createAsyncFactory_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"clientCompleteCount") ) { return hx::Val( clientCompleteCount); }
		if (HX_FIELD_EQ(inName,"asyncTimeoutHandler") ) { return hx::Val( asyncTimeoutHandler_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"asyncResponseHandler") ) { return hx::Val( asyncResponseHandler_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"clientCompletionHandler") ) { return hx::Val( clientCompletionHandler_dyn()); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"asyncDelegateCreatedHandler") ) { return hx::Val( asyncDelegateCreatedHandler_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TestRunner_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"running") ) { running=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"clients") ) { clients=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isDebug") ) { isDebug=inValue.Cast< Bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"testCount") ) { testCount=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"failCount") ) { failCount=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"passCount") ) { passCount=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startTime") ) { startTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"errorCount") ) { errorCount=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"testSuites") ) { testSuites=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"suiteIndex") ) { suiteIndex=inValue.Cast< Int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"clientCount") ) { clientCount=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ignoreCount") ) { ignoreCount=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"emptyParams") ) { emptyParams=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"activeHelper") ) { activeHelper=inValue.Cast<  ::massive::munit::TestClassHelper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"asyncPending") ) { asyncPending=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"asyncFactory") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_asyncFactory(inValue) );asyncFactory=inValue.Cast<  ::massive::munit::async::AsyncFactory >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"asyncDelegate") ) { asyncDelegate=inValue.Cast<  ::massive::munit::async::AsyncDelegate >(); return inValue; }
		if (HX_FIELD_EQ(inName,"testStartTime") ) { testStartTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"completionHandler") ) { completionHandler=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"clientCompleteCount") ) { clientCompleteCount=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TestRunner_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("clientCount","\x84","\xba","\x88","\x28"));
	outFields->push(HX_HCSTRING("running","\xff","\x6d","\x69","\xeb"));
	outFields->push(HX_HCSTRING("testCount","\x1d","\x83","\x65","\x13"));
	outFields->push(HX_HCSTRING("failCount","\x11","\x76","\xb6","\xd2"));
	outFields->push(HX_HCSTRING("errorCount","\xe7","\x33","\x67","\xbf"));
	outFields->push(HX_HCSTRING("passCount","\x3e","\xba","\x7a","\x7c"));
	outFields->push(HX_HCSTRING("ignoreCount","\x5d","\xda","\xf5","\x6d"));
	outFields->push(HX_HCSTRING("clientCompleteCount","\x0b","\x28","\xa0","\xa5"));
	outFields->push(HX_HCSTRING("clients","\xc8","\x37","\x81","\xfb"));
	outFields->push(HX_HCSTRING("activeHelper","\xd4","\xcb","\x69","\x64"));
	outFields->push(HX_HCSTRING("testSuites","\xad","\x68","\xa0","\xb7"));
	outFields->push(HX_HCSTRING("asyncPending","\x7b","\x60","\x20","\x6c"));
	outFields->push(HX_HCSTRING("asyncDelegate","\xa1","\x4e","\x2a","\x47"));
	outFields->push(HX_HCSTRING("suiteIndex","\x3a","\xf1","\x80","\xca"));
	outFields->push(HX_HCSTRING("asyncFactory","\xee","\xe4","\x0b","\xe8"));
	outFields->push(HX_HCSTRING("emptyParams","\xb3","\x91","\xa3","\xb5"));
	outFields->push(HX_HCSTRING("startTime","\x8f","\x45","\xf0","\x05"));
	outFields->push(HX_HCSTRING("testStartTime","\xdd","\xc2","\x2a","\x39"));
	outFields->push(HX_HCSTRING("isDebug","\x09","\xf6","\xa4","\x73"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TestRunner_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TestRunner_obj,completionHandler),HX_HCSTRING("completionHandler","\x0e","\xe8","\xb2","\x5b")},
	{hx::fsInt,(int)offsetof(TestRunner_obj,clientCount),HX_HCSTRING("clientCount","\x84","\xba","\x88","\x28")},
	{hx::fsBool,(int)offsetof(TestRunner_obj,running),HX_HCSTRING("running","\xff","\x6d","\x69","\xeb")},
	{hx::fsInt,(int)offsetof(TestRunner_obj,testCount),HX_HCSTRING("testCount","\x1d","\x83","\x65","\x13")},
	{hx::fsInt,(int)offsetof(TestRunner_obj,failCount),HX_HCSTRING("failCount","\x11","\x76","\xb6","\xd2")},
	{hx::fsInt,(int)offsetof(TestRunner_obj,errorCount),HX_HCSTRING("errorCount","\xe7","\x33","\x67","\xbf")},
	{hx::fsInt,(int)offsetof(TestRunner_obj,passCount),HX_HCSTRING("passCount","\x3e","\xba","\x7a","\x7c")},
	{hx::fsInt,(int)offsetof(TestRunner_obj,ignoreCount),HX_HCSTRING("ignoreCount","\x5d","\xda","\xf5","\x6d")},
	{hx::fsInt,(int)offsetof(TestRunner_obj,clientCompleteCount),HX_HCSTRING("clientCompleteCount","\x0b","\x28","\xa0","\xa5")},
	{hx::fsObject /*Array< ::massive::munit::ITestResultClient >*/ ,(int)offsetof(TestRunner_obj,clients),HX_HCSTRING("clients","\xc8","\x37","\x81","\xfb")},
	{hx::fsObject /*::massive::munit::TestClassHelper*/ ,(int)offsetof(TestRunner_obj,activeHelper),HX_HCSTRING("activeHelper","\xd4","\xcb","\x69","\x64")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TestRunner_obj,testSuites),HX_HCSTRING("testSuites","\xad","\x68","\xa0","\xb7")},
	{hx::fsBool,(int)offsetof(TestRunner_obj,asyncPending),HX_HCSTRING("asyncPending","\x7b","\x60","\x20","\x6c")},
	{hx::fsObject /*::massive::munit::async::AsyncDelegate*/ ,(int)offsetof(TestRunner_obj,asyncDelegate),HX_HCSTRING("asyncDelegate","\xa1","\x4e","\x2a","\x47")},
	{hx::fsInt,(int)offsetof(TestRunner_obj,suiteIndex),HX_HCSTRING("suiteIndex","\x3a","\xf1","\x80","\xca")},
	{hx::fsObject /*::massive::munit::async::AsyncFactory*/ ,(int)offsetof(TestRunner_obj,asyncFactory),HX_HCSTRING("asyncFactory","\xee","\xe4","\x0b","\xe8")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(TestRunner_obj,emptyParams),HX_HCSTRING("emptyParams","\xb3","\x91","\xa3","\xb5")},
	{hx::fsFloat,(int)offsetof(TestRunner_obj,startTime),HX_HCSTRING("startTime","\x8f","\x45","\xf0","\x05")},
	{hx::fsFloat,(int)offsetof(TestRunner_obj,testStartTime),HX_HCSTRING("testStartTime","\xdd","\xc2","\x2a","\x39")},
	{hx::fsBool,(int)offsetof(TestRunner_obj,isDebug),HX_HCSTRING("isDebug","\x09","\xf6","\xa4","\x73")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TestRunner_obj_sStaticStorageInfo = 0;
#endif

static ::String TestRunner_obj_sMemberFields[] = {
	HX_HCSTRING("completionHandler","\x0e","\xe8","\xb2","\x5b"),
	HX_HCSTRING("clientCount","\x84","\xba","\x88","\x28"),
	HX_HCSTRING("get_clientCount","\x1b","\x72","\x6a","\xe9"),
	HX_HCSTRING("running","\xff","\x6d","\x69","\xeb"),
	HX_HCSTRING("testCount","\x1d","\x83","\x65","\x13"),
	HX_HCSTRING("failCount","\x11","\x76","\xb6","\xd2"),
	HX_HCSTRING("errorCount","\xe7","\x33","\x67","\xbf"),
	HX_HCSTRING("passCount","\x3e","\xba","\x7a","\x7c"),
	HX_HCSTRING("ignoreCount","\x5d","\xda","\xf5","\x6d"),
	HX_HCSTRING("clientCompleteCount","\x0b","\x28","\xa0","\xa5"),
	HX_HCSTRING("clients","\xc8","\x37","\x81","\xfb"),
	HX_HCSTRING("activeHelper","\xd4","\xcb","\x69","\x64"),
	HX_HCSTRING("testSuites","\xad","\x68","\xa0","\xb7"),
	HX_HCSTRING("asyncPending","\x7b","\x60","\x20","\x6c"),
	HX_HCSTRING("asyncDelegate","\xa1","\x4e","\x2a","\x47"),
	HX_HCSTRING("suiteIndex","\x3a","\xf1","\x80","\xca"),
	HX_HCSTRING("asyncFactory","\xee","\xe4","\x0b","\xe8"),
	HX_HCSTRING("set_asyncFactory","\xeb","\xbe","\xec","\x42"),
	HX_HCSTRING("emptyParams","\xb3","\x91","\xa3","\xb5"),
	HX_HCSTRING("startTime","\x8f","\x45","\xf0","\x05"),
	HX_HCSTRING("testStartTime","\xdd","\xc2","\x2a","\x39"),
	HX_HCSTRING("isDebug","\x09","\xf6","\xa4","\x73"),
	HX_HCSTRING("addResultClient","\xc9","\x96","\xfd","\xa6"),
	HX_HCSTRING("debug","\x53","\x52","\x1f","\xd7"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("execute","\x35","\x0a","\x0d","\xcc"),
	HX_HCSTRING("executeTestCases","\x1c","\x61","\x62","\x2e"),
	HX_HCSTRING("executeTestCase","\x77","\x27","\xc0","\x59"),
	HX_HCSTRING("clientCompletionHandler","\x43","\x99","\xcc","\xa7"),
	HX_HCSTRING("asyncResponseHandler","\x6d","\xf7","\xc5","\x95"),
	HX_HCSTRING("asyncTimeoutHandler","\x85","\x07","\xce","\x5f"),
	HX_HCSTRING("asyncDelegateCreatedHandler","\x43","\x09","\x50","\xa7"),
	HX_HCSTRING("createAsyncFactory","\x0a","\x22","\x2a","\xe2"),
	::String(null()) };

static void TestRunner_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TestRunner_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TestRunner_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TestRunner_obj::__mClass,"__mClass");
};

#endif

hx::Class TestRunner_obj::__mClass;

void TestRunner_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("massive.munit.TestRunner","\x29","\x20","\xc3","\x6b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TestRunner_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TestRunner_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TestRunner_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TestRunner_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TestRunner_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TestRunner_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace massive
} // end namespace munit
