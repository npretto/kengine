// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_massive_haxe_Exception
#include <massive/haxe/Exception.h>
#endif
#ifndef INCLUDED_massive_munit_AssertionException
#include <massive/munit/AssertionException.h>
#endif
#ifndef INCLUDED_massive_munit_IAdvancedTestResultClient
#include <massive/munit/IAdvancedTestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_ITestResultClient
#include <massive/munit/ITestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_MUnitException
#include <massive/munit/MUnitException.h>
#endif
#ifndef INCLUDED_massive_munit_TestResult
#include <massive/munit/TestResult.h>
#endif
#ifndef INCLUDED_massive_munit_client_JUnitReportClient
#include <massive/munit/client/JUnitReportClient.h>
#endif
#ifndef INCLUDED_massive_munit_util_MathUtil
#include <massive/munit/util/MathUtil.h>
#endif
#ifndef INCLUDED_massive_munit_util_Timer
#include <massive/munit/util/Timer.h>
#endif

namespace massive{
namespace munit{
namespace client{

void JUnitReportClient_obj::__construct(){
            	HX_STACK_FRAME("massive.munit.client.JUnitReportClient","new",0xf4c7ac23,"massive.munit.client.JUnitReportClient.new","massive/munit/client/JUnitReportClient.hx",93,0xdfe087ac)
            	HX_STACK_THIS(this)
HXLINE(  94)		this->id = HX_("junit",ee,47,23,56);
HXLINE(  95)		this->xml =  ::StringBuf_obj::__new();
HXLINE(  96)		this->currentTestClass = HX_("",00,00,00,00);
HXLINE(  97)		this->newline = HX_("\n",0a,00,00,00);
HXLINE(  98)		this->testSuiteXML = null();
HXLINE(  99)		{
HXLINE(  99)			HX_VARI(  ::StringBuf,_this) = this->xml;
HXDLIN(  99)			Bool _hx_tmp = hx::IsNotNull( _this->charBuf );
HXDLIN(  99)			if (_hx_tmp) {
HXLINE(  99)				_this->flush();
            			}
HXDLIN(  99)			::String _hx_tmp1 = ::Std_obj::string((HX_("<testsuites>",55,b8,47,90) + this->newline));
HXDLIN(  99)			_this->b->push(_hx_tmp1);
            		}
            	}

Dynamic JUnitReportClient_obj::__CreateEmpty() { return new JUnitReportClient_obj; }

hx::ObjectPtr< JUnitReportClient_obj > JUnitReportClient_obj::__new()
{
	hx::ObjectPtr< JUnitReportClient_obj > _hx_result = new JUnitReportClient_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic JUnitReportClient_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< JUnitReportClient_obj > _hx_result = new JUnitReportClient_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::massive::munit::IAdvancedTestResultClient_obj _hx_massive_munit_client_JUnitReportClient__hx_massive_munit_IAdvancedTestResultClient= {
	( void (hx::Object::*)(::String))&::massive::munit::client::JUnitReportClient_obj::setCurrentTestClass,
	(  ::Dynamic (hx::Object::*)())&::massive::munit::client::JUnitReportClient_obj::get_completionHandler,
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::massive::munit::client::JUnitReportClient_obj::set_completionHandler,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::JUnitReportClient_obj::addPass,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::JUnitReportClient_obj::addFail,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::JUnitReportClient_obj::addError,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::JUnitReportClient_obj::addIgnore,
	(  ::Dynamic (hx::Object::*)(Int,Int,Int,Int,Int,Float))&::massive::munit::client::JUnitReportClient_obj::reportFinalStatistics,
};

static ::massive::munit::ITestResultClient_obj _hx_massive_munit_client_JUnitReportClient__hx_massive_munit_ITestResultClient= {
	(  ::Dynamic (hx::Object::*)())&::massive::munit::client::JUnitReportClient_obj::get_completionHandler,
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::massive::munit::client::JUnitReportClient_obj::set_completionHandler,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::JUnitReportClient_obj::addPass,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::JUnitReportClient_obj::addFail,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::JUnitReportClient_obj::addError,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::JUnitReportClient_obj::addIgnore,
	(  ::Dynamic (hx::Object::*)(Int,Int,Int,Int,Int,Float))&::massive::munit::client::JUnitReportClient_obj::reportFinalStatistics,
};

void *JUnitReportClient_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xce173438: return &_hx_massive_munit_client_JUnitReportClient__hx_massive_munit_IAdvancedTestResultClient;
		case (int)0xe35dae76: return &_hx_massive_munit_client_JUnitReportClient__hx_massive_munit_ITestResultClient;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::Dynamic JUnitReportClient_obj::get_completionHandler(){
            	HX_STACK_FRAME("massive.munit.client.JUnitReportClient","get_completionHandler",0xf0ddf368,"massive.munit.client.JUnitReportClient.get_completionHandler","massive/munit/client/JUnitReportClient.hx",65,0xdfe087ac)
            	HX_STACK_THIS(this)
HXLINE(  65)		return this->completionHandler;
            	}


HX_DEFINE_DYNAMIC_FUNC0(JUnitReportClient_obj,get_completionHandler,return )

 ::Dynamic JUnitReportClient_obj::set_completionHandler( ::Dynamic value){
            	HX_STACK_FRAME("massive.munit.client.JUnitReportClient","set_completionHandler",0x44e6c174,"massive.munit.client.JUnitReportClient.set_completionHandler","massive/munit/client/JUnitReportClient.hx",69,0xdfe087ac)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(  69)		return (this->completionHandler = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(JUnitReportClient_obj,set_completionHandler,return )

void JUnitReportClient_obj::setCurrentTestClass(::String className){
            	HX_STACK_FRAME("massive.munit.client.JUnitReportClient","setCurrentTestClass",0x9a215892,"massive.munit.client.JUnitReportClient.setCurrentTestClass","massive/munit/client/JUnitReportClient.hx",109,0xdfe087ac)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(className,"className")
HXLINE( 110)		if ((this->currentTestClass == className)) {
HXLINE( 110)			return;
            		}
HXLINE( 111)		Bool _hx_tmp = hx::IsNotNull( this->currentTestClass );
HXDLIN( 111)		if (_hx_tmp) {
HXLINE( 111)			this->endTestSuite();
            		}
HXLINE( 113)		this->currentTestClass = className;
HXLINE( 115)		Bool _hx_tmp1 = hx::IsNotNull( this->currentTestClass );
HXDLIN( 115)		if (_hx_tmp1) {
HXLINE( 115)			this->startTestSuite();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(JUnitReportClient_obj,setCurrentTestClass,(void))

void JUnitReportClient_obj::addPass( ::massive::munit::TestResult result){
            	HX_STACK_FRAME("massive.munit.client.JUnitReportClient","addPass",0x38afa0d5,"massive.munit.client.JUnitReportClient.addPass","massive/munit/client/JUnitReportClient.hx",125,0xdfe087ac)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
HXLINE( 126)		this->suitePassCount++;
HXLINE( 128)		{
HXLINE( 128)			HX_VARI(  ::StringBuf,_this) = this->testSuiteXML;
HXDLIN( 128)			::String _hx_tmp = ((((HX_("<testcase classname=\"",a6,af,2f,ad) + result->className) + HX_("\" name=\"",8e,10,db,e8)) + result->name) + HX_("\" time=\"",d0,de,33,ea));
HXDLIN( 128)			Float _hx_tmp1 = ::massive::munit::util::MathUtil_obj::round(result->executionTime,(int)5);
HXDLIN( 128)			::String x = (((_hx_tmp + _hx_tmp1) + HX_("\" />",6d,b2,91,16)) + this->newline);
HXDLIN( 128)			Bool _hx_tmp2 = hx::IsNotNull( _this->charBuf );
HXDLIN( 128)			if (_hx_tmp2) {
HXLINE( 128)				_this->flush();
            			}
HXDLIN( 128)			::String _hx_tmp3 = ::Std_obj::string(x);
HXDLIN( 128)			_this->b->push(_hx_tmp3);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(JUnitReportClient_obj,addPass,(void))

void JUnitReportClient_obj::addFail( ::massive::munit::TestResult result){
            	HX_STACK_FRAME("massive.munit.client.JUnitReportClient","addFail",0x321375e2,"massive.munit.client.JUnitReportClient.addFail","massive/munit/client/JUnitReportClient.hx",137,0xdfe087ac)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
HXLINE( 138)		this->suiteFailCount++;
HXLINE( 140)		{
HXLINE( 140)			HX_VARI(  ::StringBuf,_this) = this->testSuiteXML;
HXDLIN( 140)			::String _hx_tmp = ((((HX_("<testcase classname=\"",a6,af,2f,ad) + result->className) + HX_("\" name=\"",8e,10,db,e8)) + result->name) + HX_("\" time=\"",d0,de,33,ea));
HXDLIN( 140)			Float _hx_tmp1 = ::massive::munit::util::MathUtil_obj::round(result->executionTime,(int)5);
HXDLIN( 140)			::String x = (((_hx_tmp + _hx_tmp1) + HX_("\" >",c0,e8,19,00)) + this->newline);
HXDLIN( 140)			Bool _hx_tmp2 = hx::IsNotNull( _this->charBuf );
HXDLIN( 140)			if (_hx_tmp2) {
HXLINE( 140)				_this->flush();
            			}
HXDLIN( 140)			::String _hx_tmp3 = ::Std_obj::string(x);
HXDLIN( 140)			_this->b->push(_hx_tmp3);
            		}
HXLINE( 141)		{
HXLINE( 141)			HX_VARI_NAME(  ::StringBuf,_this1,"_this") = this->testSuiteXML;
HXDLIN( 141)			Bool _hx_tmp4 = hx::IsNotNull( _this1->charBuf );
HXDLIN( 141)			if (_hx_tmp4) {
HXLINE( 141)				_this1->flush();
            			}
HXDLIN( 141)			::String _hx_tmp5 = ::Std_obj::string(((((HX_("<failure message=\"",ba,13,8c,64) + result->failure->message) + HX_("\" type=\"",bd,ca,98,22)) + result->failure->type) + HX_("\">",dc,1d,00,00)));
HXDLIN( 141)			_this1->b->push(_hx_tmp5);
            		}
HXLINE( 142)		{
HXLINE( 142)			HX_VARI_NAME(  ::StringBuf,_this2,"_this") = this->testSuiteXML;
HXDLIN( 142)			Bool _hx_tmp6 = hx::IsNotNull( _this2->charBuf );
HXDLIN( 142)			if (_hx_tmp6) {
HXLINE( 142)				_this2->flush();
            			}
HXDLIN( 142)			::String _hx_tmp7 = ::Std_obj::string(result->failure);
HXDLIN( 142)			_this2->b->push(_hx_tmp7);
            		}
HXLINE( 143)		{
HXLINE( 143)			HX_VARI_NAME(  ::StringBuf,_this3,"_this") = this->testSuiteXML;
HXDLIN( 143)			Bool _hx_tmp8 = hx::IsNotNull( _this3->charBuf );
HXDLIN( 143)			if (_hx_tmp8) {
HXLINE( 143)				_this3->flush();
            			}
HXDLIN( 143)			::String _hx_tmp9 = ::Std_obj::string((HX_("</failure>",27,30,ee,cf) + this->newline));
HXDLIN( 143)			_this3->b->push(_hx_tmp9);
            		}
HXLINE( 144)		{
HXLINE( 144)			HX_VARI_NAME(  ::StringBuf,_this4,"_this") = this->testSuiteXML;
HXDLIN( 144)			Bool _hx_tmp10 = hx::IsNotNull( _this4->charBuf );
HXDLIN( 144)			if (_hx_tmp10) {
HXLINE( 144)				_this4->flush();
            			}
HXDLIN( 144)			::String _hx_tmp11 = ::Std_obj::string((HX_("</testcase>",29,af,c2,f8) + this->newline));
HXDLIN( 144)			_this4->b->push(_hx_tmp11);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(JUnitReportClient_obj,addFail,(void))

void JUnitReportClient_obj::addError( ::massive::munit::TestResult result){
            	HX_STACK_FRAME("massive.munit.client.JUnitReportClient","addError",0x16d09344,"massive.munit.client.JUnitReportClient.addError","massive/munit/client/JUnitReportClient.hx",153,0xdfe087ac)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
HXLINE( 154)		this->suiteErrorCount++;
HXLINE( 156)		{
HXLINE( 156)			HX_VARI(  ::StringBuf,_this) = this->testSuiteXML;
HXDLIN( 156)			::String _hx_tmp = ((((HX_("<testcase classname=\"",a6,af,2f,ad) + result->className) + HX_("\" name=\"",8e,10,db,e8)) + result->name) + HX_("\" time=\"",d0,de,33,ea));
HXDLIN( 156)			Float _hx_tmp1 = ::massive::munit::util::MathUtil_obj::round(result->executionTime,(int)5);
HXDLIN( 156)			::String x = (((_hx_tmp + _hx_tmp1) + HX_("\" >",c0,e8,19,00)) + this->newline);
HXDLIN( 156)			Bool _hx_tmp2 = hx::IsNotNull( _this->charBuf );
HXDLIN( 156)			if (_hx_tmp2) {
HXLINE( 156)				_this->flush();
            			}
HXDLIN( 156)			::String _hx_tmp3 = ::Std_obj::string(x);
HXDLIN( 156)			_this->b->push(_hx_tmp3);
            		}
HXLINE( 157)		{
HXLINE( 157)			HX_VARI_NAME(  ::StringBuf,_this1,"_this") = this->testSuiteXML;
HXDLIN( 157)			::String _hx_tmp4 = ::Std_obj::string( ::Dynamic(result->error->__Field(HX_("message",c7,35,11,9a),hx::paccDynamic)));
HXDLIN( 157)			::String _hx_tmp5 = ((HX_("<error message=\"",b8,9f,f1,4e) + _hx_tmp4) + HX_("\" type=\"",bd,ca,98,22));
HXDLIN( 157)			::String _hx_tmp6 = ::Std_obj::string( ::Dynamic(result->error->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)));
HXDLIN( 157)			::String x1 = ((_hx_tmp5 + _hx_tmp6) + HX_("\">",dc,1d,00,00));
HXDLIN( 157)			Bool _hx_tmp7 = hx::IsNotNull( _this1->charBuf );
HXDLIN( 157)			if (_hx_tmp7) {
HXLINE( 157)				_this1->flush();
            			}
HXDLIN( 157)			::String _hx_tmp8 = ::Std_obj::string(x1);
HXDLIN( 157)			_this1->b->push(_hx_tmp8);
            		}
HXLINE( 158)		{
HXLINE( 158)			HX_VARI_NAME(  ::StringBuf,_this2,"_this") = this->testSuiteXML;
HXDLIN( 158)			 ::Dynamic x2 = result->error;
HXDLIN( 158)			Bool _hx_tmp9 = hx::IsNotNull( _this2->charBuf );
HXDLIN( 158)			if (_hx_tmp9) {
HXLINE( 158)				_this2->flush();
            			}
HXDLIN( 158)			::String _hx_tmp10 = ::Std_obj::string(x2);
HXDLIN( 158)			_this2->b->push(_hx_tmp10);
            		}
HXLINE( 159)		{
HXLINE( 159)			HX_VARI_NAME(  ::StringBuf,_this3,"_this") = this->testSuiteXML;
HXDLIN( 159)			Bool _hx_tmp11 = hx::IsNotNull( _this3->charBuf );
HXDLIN( 159)			if (_hx_tmp11) {
HXLINE( 159)				_this3->flush();
            			}
HXDLIN( 159)			::String _hx_tmp12 = ::Std_obj::string((HX_("</error>",29,10,ac,5b) + this->newline));
HXDLIN( 159)			_this3->b->push(_hx_tmp12);
            		}
HXLINE( 160)		{
HXLINE( 160)			HX_VARI_NAME(  ::StringBuf,_this4,"_this") = this->testSuiteXML;
HXDLIN( 160)			Bool _hx_tmp13 = hx::IsNotNull( _this4->charBuf );
HXDLIN( 160)			if (_hx_tmp13) {
HXLINE( 160)				_this4->flush();
            			}
HXDLIN( 160)			::String _hx_tmp14 = ::Std_obj::string((HX_("</testcase>",29,af,c2,f8) + this->newline));
HXDLIN( 160)			_this4->b->push(_hx_tmp14);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(JUnitReportClient_obj,addError,(void))

void JUnitReportClient_obj::addIgnore( ::massive::munit::TestResult result){
            	HX_STACK_FRAME("massive.munit.client.JUnitReportClient","addIgnore",0x21107e16,"massive.munit.client.JUnitReportClient.addIgnore","massive/munit/client/JUnitReportClient.hx",169,0xdfe087ac)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
            	}


HX_DEFINE_DYNAMIC_FUNC1(JUnitReportClient_obj,addIgnore,(void))

 ::Dynamic JUnitReportClient_obj::reportFinalStatistics(Int testCount,Int passCount,Int failCount,Int errorCount,Int ignoreCount,Float time){
            	HX_STACK_FRAME("massive.munit.client.JUnitReportClient","reportFinalStatistics",0x22dba868,"massive.munit.client.JUnitReportClient.reportFinalStatistics","massive/munit/client/JUnitReportClient.hx",189,0xdfe087ac)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(testCount,"testCount")
            	HX_STACK_ARG(passCount,"passCount")
            	HX_STACK_ARG(failCount,"failCount")
            	HX_STACK_ARG(errorCount,"errorCount")
            	HX_STACK_ARG(ignoreCount,"ignoreCount")
            	HX_STACK_ARG(time,"time")
HXLINE( 191)		{
HXLINE( 191)			HX_VARI(  ::StringBuf,_this) = this->xml;
HXDLIN( 191)			Bool _hx_tmp = hx::IsNotNull( _this->charBuf );
HXDLIN( 191)			if (_hx_tmp) {
HXLINE( 191)				_this->flush();
            			}
HXDLIN( 191)			_this->b->push(HX_("</testsuites>",7e,91,ac,92));
            		}
HXLINE( 192)		 ::Dynamic _hx_tmp1 = this->get_completionHandler();
HXDLIN( 192)		Bool _hx_tmp2 = hx::IsNotNull( _hx_tmp1 );
HXDLIN( 192)		if (_hx_tmp2) {
HXLINE( 192)			 ::Dynamic _hx_tmp3 = this->get_completionHandler();
HXDLIN( 192)			_hx_tmp3(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 193)		HX_VARI_NAME(  ::StringBuf,_this1,"_this") = this->xml;
HXDLIN( 193)		Bool _hx_tmp4 = hx::IsNotNull( _this1->charBuf );
HXDLIN( 193)		if (_hx_tmp4) {
HXLINE( 193)			_this1->flush();
            		}
HXDLIN( 193)		return _this1->b->join(HX_("",00,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC6(JUnitReportClient_obj,reportFinalStatistics,return )

void JUnitReportClient_obj::endTestSuite(){
            	HX_STACK_FRAME("massive.munit.client.JUnitReportClient","endTestSuite",0xef311988,"massive.munit.client.JUnitReportClient.endTestSuite","massive/munit/client/JUnitReportClient.hx",197,0xdfe087ac)
            	HX_STACK_THIS(this)
HXLINE( 198)		Bool _hx_tmp = hx::IsNull( this->testSuiteXML );
HXDLIN( 198)		if (_hx_tmp) {
HXLINE( 198)			return;
            		}
HXLINE( 200)		HX_VARI( Int,suiteTestCount) = ((this->suitePassCount + this->suiteFailCount) + this->suiteErrorCount);
HXLINE( 201)		Float _hx_tmp1 = ::massive::munit::util::Timer_obj::stamp();
HXDLIN( 201)		this->suiteExecutionTime = (_hx_tmp1 - this->suiteExecutionTime);
HXLINE( 203)		::String _hx_tmp2 = ((((((((HX_("<testsuite errors=\"",26,b7,33,f7) + this->suiteErrorCount) + HX_("\" failures=\"",ac,c9,a6,11)) + this->suiteFailCount) + HX_("\" hostname=\"\" name=\"",84,4b,4d,21)) + this->currentTestClass) + HX_("\" tests=\"",68,65,3c,e8)) + suiteTestCount) + HX_("\" time=\"",d0,de,33,ea));
HXDLIN( 203)		Float _hx_tmp3 = ::massive::munit::util::MathUtil_obj::round(this->suiteExecutionTime,(int)5);
HXDLIN( 203)		::String _hx_tmp4 = ((_hx_tmp2 + _hx_tmp3) + HX_("\" timestamp=\"",9d,ca,4c,52));
HXDLIN( 203)		 ::Date _hx_tmp5 = ::Date_obj::now();
HXDLIN( 203)		::String _hx_tmp6 = ::Std_obj::string(_hx_tmp5);
HXDLIN( 203)		HX_VARI( ::String,header) = (((_hx_tmp4 + _hx_tmp6) + HX_("\">",dc,1d,00,00)) + this->newline);
HXLINE( 204)		HX_VARI( ::String,footer) = (HX_("</testsuite>",8b,56,bf,94) + this->newline);
HXLINE( 206)		{
HXLINE( 206)			HX_VARI(  ::StringBuf,_this) = this->testSuiteXML;
HXDLIN( 206)			Bool _hx_tmp7 = hx::IsNotNull( _this->charBuf );
HXDLIN( 206)			if (_hx_tmp7) {
HXLINE( 206)				_this->flush();
            			}
HXDLIN( 206)			::String _hx_tmp8 = ::Std_obj::string((HX_("<system-out></system-out>",e9,a5,bd,95) + this->newline));
HXDLIN( 206)			_this->b->push(_hx_tmp8);
            		}
HXLINE( 207)		{
HXLINE( 207)			HX_VARI_NAME(  ::StringBuf,_this1,"_this") = this->testSuiteXML;
HXDLIN( 207)			Bool _hx_tmp9 = hx::IsNotNull( _this1->charBuf );
HXDLIN( 207)			if (_hx_tmp9) {
HXLINE( 207)				_this1->flush();
            			}
HXDLIN( 207)			::String _hx_tmp10 = ::Std_obj::string((HX_("<system-err></system-err>",49,4c,11,f2) + this->newline));
HXDLIN( 207)			_this1->b->push(_hx_tmp10);
            		}
HXLINE( 209)		{
HXLINE( 209)			HX_VARI_NAME(  ::StringBuf,_this2,"_this") = this->xml;
HXDLIN( 209)			Bool _hx_tmp11 = hx::IsNotNull( _this2->charBuf );
HXDLIN( 209)			if (_hx_tmp11) {
HXLINE( 209)				_this2->flush();
            			}
HXDLIN( 209)			::String _hx_tmp12 = ::Std_obj::string(header);
HXDLIN( 209)			_this2->b->push(_hx_tmp12);
            		}
HXLINE( 210)		{
HXLINE( 210)			HX_VARI_NAME(  ::StringBuf,_this3,"_this") = this->xml;
HXDLIN( 210)			HX_VARI_NAME(  ::StringBuf,_this4,"_this") = this->testSuiteXML;
HXDLIN( 210)			Bool _hx_tmp13 = hx::IsNotNull( _this4->charBuf );
HXDLIN( 210)			if (_hx_tmp13) {
HXLINE( 210)				_this4->flush();
            			}
HXDLIN( 210)			::String x = _this4->b->join(HX_("",00,00,00,00));
HXDLIN( 210)			Bool _hx_tmp14 = hx::IsNotNull( _this3->charBuf );
HXDLIN( 210)			if (_hx_tmp14) {
HXLINE( 210)				_this3->flush();
            			}
HXDLIN( 210)			::String _hx_tmp15 = ::Std_obj::string(x);
HXDLIN( 210)			_this3->b->push(_hx_tmp15);
            		}
HXLINE( 211)		{
HXLINE( 211)			HX_VARI_NAME(  ::StringBuf,_this5,"_this") = this->xml;
HXDLIN( 211)			Bool _hx_tmp16 = hx::IsNotNull( _this5->charBuf );
HXDLIN( 211)			if (_hx_tmp16) {
HXLINE( 211)				_this5->flush();
            			}
HXDLIN( 211)			::String _hx_tmp17 = ::Std_obj::string(footer);
HXDLIN( 211)			_this5->b->push(_hx_tmp17);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(JUnitReportClient_obj,endTestSuite,(void))

void JUnitReportClient_obj::startTestSuite(){
            	HX_STACK_FRAME("massive.munit.client.JUnitReportClient","startTestSuite",0x0efc5161,"massive.munit.client.JUnitReportClient.startTestSuite","massive/munit/client/JUnitReportClient.hx",215,0xdfe087ac)
            	HX_STACK_THIS(this)
HXLINE( 216)		this->suitePassCount = (int)0;
HXLINE( 217)		this->suiteFailCount = (int)0;
HXLINE( 218)		this->suiteErrorCount = (int)0;
HXLINE( 219)		this->suiteExecutionTime = ::massive::munit::util::Timer_obj::stamp();
HXLINE( 220)		this->testSuiteXML =  ::StringBuf_obj::__new();
            	}


HX_DEFINE_DYNAMIC_FUNC0(JUnitReportClient_obj,startTestSuite,(void))

::String JUnitReportClient_obj::DEFAULT_ID;


JUnitReportClient_obj::JUnitReportClient_obj()
{
}

void JUnitReportClient_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(JUnitReportClient);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(completionHandler,"completionHandler");
	HX_MARK_MEMBER_NAME(newline,"newline");
	HX_MARK_MEMBER_NAME(xml,"xml");
	HX_MARK_MEMBER_NAME(testSuiteXML,"testSuiteXML");
	HX_MARK_MEMBER_NAME(currentTestClass,"currentTestClass");
	HX_MARK_MEMBER_NAME(suitePassCount,"suitePassCount");
	HX_MARK_MEMBER_NAME(suiteFailCount,"suiteFailCount");
	HX_MARK_MEMBER_NAME(suiteErrorCount,"suiteErrorCount");
	HX_MARK_MEMBER_NAME(suiteExecutionTime,"suiteExecutionTime");
	HX_MARK_END_CLASS();
}

void JUnitReportClient_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(completionHandler,"completionHandler");
	HX_VISIT_MEMBER_NAME(newline,"newline");
	HX_VISIT_MEMBER_NAME(xml,"xml");
	HX_VISIT_MEMBER_NAME(testSuiteXML,"testSuiteXML");
	HX_VISIT_MEMBER_NAME(currentTestClass,"currentTestClass");
	HX_VISIT_MEMBER_NAME(suitePassCount,"suitePassCount");
	HX_VISIT_MEMBER_NAME(suiteFailCount,"suiteFailCount");
	HX_VISIT_MEMBER_NAME(suiteErrorCount,"suiteErrorCount");
	HX_VISIT_MEMBER_NAME(suiteExecutionTime,"suiteExecutionTime");
}

hx::Val JUnitReportClient_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"xml") ) { return hx::Val( xml); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"newline") ) { return hx::Val( newline); }
		if (HX_FIELD_EQ(inName,"addPass") ) { return hx::Val( addPass_dyn()); }
		if (HX_FIELD_EQ(inName,"addFail") ) { return hx::Val( addFail_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addError") ) { return hx::Val( addError_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addIgnore") ) { return hx::Val( addIgnore_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testSuiteXML") ) { return hx::Val( testSuiteXML); }
		if (HX_FIELD_EQ(inName,"endTestSuite") ) { return hx::Val( endTestSuite_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"suitePassCount") ) { return hx::Val( suitePassCount); }
		if (HX_FIELD_EQ(inName,"suiteFailCount") ) { return hx::Val( suiteFailCount); }
		if (HX_FIELD_EQ(inName,"startTestSuite") ) { return hx::Val( startTestSuite_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"suiteErrorCount") ) { return hx::Val( suiteErrorCount); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentTestClass") ) { return hx::Val( currentTestClass); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"completionHandler") ) { return hx::Val( inCallProp == hx::paccAlways ? get_completionHandler() : completionHandler); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"suiteExecutionTime") ) { return hx::Val( suiteExecutionTime); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"setCurrentTestClass") ) { return hx::Val( setCurrentTestClass_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_completionHandler") ) { return hx::Val( get_completionHandler_dyn()); }
		if (HX_FIELD_EQ(inName,"set_completionHandler") ) { return hx::Val( set_completionHandler_dyn()); }
		if (HX_FIELD_EQ(inName,"reportFinalStatistics") ) { return hx::Val( reportFinalStatistics_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val JUnitReportClient_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"xml") ) { xml=inValue.Cast<  ::StringBuf >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"newline") ) { newline=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"testSuiteXML") ) { testSuiteXML=inValue.Cast<  ::StringBuf >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"suitePassCount") ) { suitePassCount=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"suiteFailCount") ) { suiteFailCount=inValue.Cast< Int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"suiteErrorCount") ) { suiteErrorCount=inValue.Cast< Int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentTestClass") ) { currentTestClass=inValue.Cast< ::String >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"completionHandler") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_completionHandler(inValue) );completionHandler=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"suiteExecutionTime") ) { suiteExecutionTime=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void JUnitReportClient_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("newline","\x54","\x98","\xa6","\x0c"));
	outFields->push(HX_HCSTRING("xml","\xd7","\x6d","\x5b","\x00"));
	outFields->push(HX_HCSTRING("testSuiteXML","\x71","\x74","\xf9","\x2e"));
	outFields->push(HX_HCSTRING("currentTestClass","\x0d","\x2b","\x8b","\x04"));
	outFields->push(HX_HCSTRING("suitePassCount","\x66","\x44","\xd1","\xac"));
	outFields->push(HX_HCSTRING("suiteFailCount","\x39","\x00","\x0d","\x03"));
	outFields->push(HX_HCSTRING("suiteErrorCount","\xbf","\x8c","\xc9","\xda"));
	outFields->push(HX_HCSTRING("suiteExecutionTime","\xed","\x8d","\xa9","\x43"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo JUnitReportClient_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(JUnitReportClient_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(JUnitReportClient_obj,completionHandler),HX_HCSTRING("completionHandler","\x0e","\xe8","\xb2","\x5b")},
	{hx::fsString,(int)offsetof(JUnitReportClient_obj,newline),HX_HCSTRING("newline","\x54","\x98","\xa6","\x0c")},
	{hx::fsObject /*::StringBuf*/ ,(int)offsetof(JUnitReportClient_obj,xml),HX_HCSTRING("xml","\xd7","\x6d","\x5b","\x00")},
	{hx::fsObject /*::StringBuf*/ ,(int)offsetof(JUnitReportClient_obj,testSuiteXML),HX_HCSTRING("testSuiteXML","\x71","\x74","\xf9","\x2e")},
	{hx::fsString,(int)offsetof(JUnitReportClient_obj,currentTestClass),HX_HCSTRING("currentTestClass","\x0d","\x2b","\x8b","\x04")},
	{hx::fsInt,(int)offsetof(JUnitReportClient_obj,suitePassCount),HX_HCSTRING("suitePassCount","\x66","\x44","\xd1","\xac")},
	{hx::fsInt,(int)offsetof(JUnitReportClient_obj,suiteFailCount),HX_HCSTRING("suiteFailCount","\x39","\x00","\x0d","\x03")},
	{hx::fsInt,(int)offsetof(JUnitReportClient_obj,suiteErrorCount),HX_HCSTRING("suiteErrorCount","\xbf","\x8c","\xc9","\xda")},
	{hx::fsFloat,(int)offsetof(JUnitReportClient_obj,suiteExecutionTime),HX_HCSTRING("suiteExecutionTime","\xed","\x8d","\xa9","\x43")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo JUnitReportClient_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &JUnitReportClient_obj::DEFAULT_ID,HX_HCSTRING("DEFAULT_ID","\xf9","\x83","\x2f","\x18")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String JUnitReportClient_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("completionHandler","\x0e","\xe8","\xb2","\x5b"),
	HX_HCSTRING("get_completionHandler","\xe5","\xea","\x60","\xda"),
	HX_HCSTRING("set_completionHandler","\xf1","\xb8","\x69","\x2e"),
	HX_HCSTRING("newline","\x54","\x98","\xa6","\x0c"),
	HX_HCSTRING("xml","\xd7","\x6d","\x5b","\x00"),
	HX_HCSTRING("testSuiteXML","\x71","\x74","\xf9","\x2e"),
	HX_HCSTRING("currentTestClass","\x0d","\x2b","\x8b","\x04"),
	HX_HCSTRING("suitePassCount","\x66","\x44","\xd1","\xac"),
	HX_HCSTRING("suiteFailCount","\x39","\x00","\x0d","\x03"),
	HX_HCSTRING("suiteErrorCount","\xbf","\x8c","\xc9","\xda"),
	HX_HCSTRING("suiteExecutionTime","\xed","\x8d","\xa9","\x43"),
	HX_HCSTRING("setCurrentTestClass","\xcf","\x86","\x4e","\xfb"),
	HX_HCSTRING("addPass","\x92","\x27","\x8f","\x86"),
	HX_HCSTRING("addFail","\x9f","\xfc","\xf2","\x7f"),
	HX_HCSTRING("addError","\xe7","\xf1","\x86","\xec"),
	HX_HCSTRING("addIgnore","\x13","\xee","\xec","\x4a"),
	HX_HCSTRING("reportFinalStatistics","\xe5","\x9f","\x5e","\x0c"),
	HX_HCSTRING("endTestSuite","\xab","\x05","\xbf","\x5c"),
	HX_HCSTRING("startTestSuite","\x44","\xcc","\xf7","\x6c"),
	::String(null()) };

static void JUnitReportClient_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(JUnitReportClient_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(JUnitReportClient_obj::DEFAULT_ID,"DEFAULT_ID");
};

#ifdef HXCPP_VISIT_ALLOCS
static void JUnitReportClient_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(JUnitReportClient_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(JUnitReportClient_obj::DEFAULT_ID,"DEFAULT_ID");
};

#endif

hx::Class JUnitReportClient_obj::__mClass;

static ::String JUnitReportClient_obj_sStaticFields[] = {
	HX_HCSTRING("DEFAULT_ID","\xf9","\x83","\x2f","\x18"),
	::String(null())
};

void JUnitReportClient_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("massive.munit.client.JUnitReportClient","\xb1","\x5e","\x98","\x95");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = JUnitReportClient_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(JUnitReportClient_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(JUnitReportClient_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< JUnitReportClient_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = JUnitReportClient_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = JUnitReportClient_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = JUnitReportClient_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void JUnitReportClient_obj::__boot()
{
{
            	HX_STACK_FRAME("massive.munit.client.JUnitReportClient","boot",0x3207f30f,"massive.munit.client.JUnitReportClient.boot","massive/munit/client/JUnitReportClient.hx",46,0xdfe087ac)
HXLINE(  46)		DEFAULT_ID = HX_("junit",ee,47,23,56);
            	}
}

} // end namespace massive
} // end namespace munit
} // end namespace client
