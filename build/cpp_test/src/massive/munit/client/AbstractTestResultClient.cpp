// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_massive_munit_IAdvancedTestResultClient
#include <massive/munit/IAdvancedTestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_ICoverageTestResultClient
#include <massive/munit/ICoverageTestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_ITestResultClient
#include <massive/munit/ITestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_TestResult
#include <massive/munit/TestResult.h>
#endif
#ifndef INCLUDED_massive_munit_TestResultType
#include <massive/munit/TestResultType.h>
#endif
#ifndef INCLUDED_massive_munit_client_AbstractTestResultClient
#include <massive/munit/client/AbstractTestResultClient.h>
#endif

namespace massive{
namespace munit{
namespace client{

void AbstractTestResultClient_obj::__construct(){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","new",0x1e56ed8a,"massive.munit.client.AbstractTestResultClient.new","massive/munit/client/AbstractTestResultClient.hx",108,0x0503e007)
            	HX_STACK_THIS(this)
HXLINE( 108)		this->init();
            	}

Dynamic AbstractTestResultClient_obj::__CreateEmpty() { return new AbstractTestResultClient_obj; }

hx::ObjectPtr< AbstractTestResultClient_obj > AbstractTestResultClient_obj::__new()
{
	hx::ObjectPtr< AbstractTestResultClient_obj > _hx_result = new AbstractTestResultClient_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic AbstractTestResultClient_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AbstractTestResultClient_obj > _hx_result = new AbstractTestResultClient_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::massive::munit::ICoverageTestResultClient_obj _hx_massive_munit_client_AbstractTestResultClient__hx_massive_munit_ICoverageTestResultClient= {
	( void (hx::Object::*)( ::Dynamic))&::massive::munit::client::AbstractTestResultClient_obj::setCurrentTestClassCoverage,
	( void (hx::Object::*)( ::Dynamic,::Array< ::Dynamic>,::String,::String,::String,::String))&::massive::munit::client::AbstractTestResultClient_obj::reportFinalCoverage,
	( void (hx::Object::*)(::String))&::massive::munit::client::AbstractTestResultClient_obj::setCurrentTestClass,
	(  ::Dynamic (hx::Object::*)())&::massive::munit::client::AbstractTestResultClient_obj::get_completionHandler,
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::massive::munit::client::AbstractTestResultClient_obj::set_completionHandler,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::AbstractTestResultClient_obj::addPass,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::AbstractTestResultClient_obj::addFail,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::AbstractTestResultClient_obj::addError,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::AbstractTestResultClient_obj::addIgnore,
	(  ::Dynamic (hx::Object::*)(Int,Int,Int,Int,Int,Float))&::massive::munit::client::AbstractTestResultClient_obj::reportFinalStatistics,
};

static ::massive::munit::IAdvancedTestResultClient_obj _hx_massive_munit_client_AbstractTestResultClient__hx_massive_munit_IAdvancedTestResultClient= {
	( void (hx::Object::*)(::String))&::massive::munit::client::AbstractTestResultClient_obj::setCurrentTestClass,
	(  ::Dynamic (hx::Object::*)())&::massive::munit::client::AbstractTestResultClient_obj::get_completionHandler,
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::massive::munit::client::AbstractTestResultClient_obj::set_completionHandler,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::AbstractTestResultClient_obj::addPass,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::AbstractTestResultClient_obj::addFail,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::AbstractTestResultClient_obj::addError,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::AbstractTestResultClient_obj::addIgnore,
	(  ::Dynamic (hx::Object::*)(Int,Int,Int,Int,Int,Float))&::massive::munit::client::AbstractTestResultClient_obj::reportFinalStatistics,
};

static ::massive::munit::ITestResultClient_obj _hx_massive_munit_client_AbstractTestResultClient__hx_massive_munit_ITestResultClient= {
	(  ::Dynamic (hx::Object::*)())&::massive::munit::client::AbstractTestResultClient_obj::get_completionHandler,
	(  ::Dynamic (hx::Object::*)( ::Dynamic))&::massive::munit::client::AbstractTestResultClient_obj::set_completionHandler,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::AbstractTestResultClient_obj::addPass,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::AbstractTestResultClient_obj::addFail,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::AbstractTestResultClient_obj::addError,
	( void (hx::Object::*)( ::massive::munit::TestResult))&::massive::munit::client::AbstractTestResultClient_obj::addIgnore,
	(  ::Dynamic (hx::Object::*)(Int,Int,Int,Int,Int,Float))&::massive::munit::client::AbstractTestResultClient_obj::reportFinalStatistics,
};

void *AbstractTestResultClient_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xa6a1487e: return &_hx_massive_munit_client_AbstractTestResultClient__hx_massive_munit_ICoverageTestResultClient;
		case (int)0xce173438: return &_hx_massive_munit_client_AbstractTestResultClient__hx_massive_munit_IAdvancedTestResultClient;
		case (int)0xe35dae76: return &_hx_massive_munit_client_AbstractTestResultClient__hx_massive_munit_ITestResultClient;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

 ::Dynamic AbstractTestResultClient_obj::get_completionHandler(){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","get_completionHandler",0x04949a8f,"massive.munit.client.AbstractTestResultClient.get_completionHandler","massive/munit/client/AbstractTestResultClient.hx",61,0x0503e007)
            	HX_STACK_THIS(this)
HXLINE(  61)		return this->completionHandler;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AbstractTestResultClient_obj,get_completionHandler,return )

 ::Dynamic AbstractTestResultClient_obj::set_completionHandler( ::Dynamic value){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","set_completionHandler",0x589d689b,"massive.munit.client.AbstractTestResultClient.set_completionHandler","massive/munit/client/AbstractTestResultClient.hx",65,0x0503e007)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(  65)		return (this->completionHandler = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbstractTestResultClient_obj,set_completionHandler,return )

::String AbstractTestResultClient_obj::get_output(){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","get_output",0x0e99bae0,"massive.munit.client.AbstractTestResultClient.get_output","massive/munit/client/AbstractTestResultClient.hx",80,0x0503e007)
            	HX_STACK_THIS(this)
HXLINE(  80)		return this->output;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AbstractTestResultClient_obj,get_output,return )

void AbstractTestResultClient_obj::init(){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","init",0x6a71a2a6,"massive.munit.client.AbstractTestResultClient.init","massive/munit/client/AbstractTestResultClient.hx",112,0x0503e007)
            	HX_STACK_THIS(this)
HXLINE( 113)		this->currentTestClass = null();
HXLINE( 115)		this->currentClassResults = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 116)		::massive::munit::client::AbstractTestResultClient_obj::traces = ::Array_obj< ::String >::__new(0);
HXLINE( 118)		this->passCount = (int)0;
HXLINE( 119)		this->failCount = (int)0;
HXLINE( 120)		this->errorCount = (int)0;
HXLINE( 121)		this->ignoreCount = (int)0;
HXLINE( 123)		this->currentCoverageResult = null();
HXLINE( 126)		this->totalResults = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 127)		this->totalCoveragePercent = (int)0;
HXLINE( 128)		this->totalCoverageReport = null();
HXLINE( 129)		this->totalCoverageResults = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AbstractTestResultClient_obj,init,(void))

void AbstractTestResultClient_obj::setCurrentTestClass(::String className){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","setCurrentTestClass",0xaa1c17f9,"massive.munit.client.AbstractTestResultClient.setCurrentTestClass","massive/munit/client/AbstractTestResultClient.hx",138,0x0503e007)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(className,"className")
HXLINE( 139)		if ((this->currentTestClass == className)) {
HXLINE( 139)			return;
            		}
HXLINE( 141)		Bool _hx_tmp = hx::IsNotNull( this->currentTestClass );
HXDLIN( 141)		if (_hx_tmp) {
HXLINE( 143)			this->finalizeTestClass();
            		}
HXLINE( 146)		this->currentTestClass = className;
HXLINE( 147)		Bool _hx_tmp1 = hx::IsNotNull( this->currentTestClass );
HXDLIN( 147)		if (_hx_tmp1) {
HXLINE( 147)			this->initializeTestClass();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbstractTestResultClient_obj,setCurrentTestClass,(void))

void AbstractTestResultClient_obj::addPass( ::massive::munit::TestResult result){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","addPass",0x2fb921bc,"massive.munit.client.AbstractTestResultClient.addPass","massive/munit/client/AbstractTestResultClient.hx",156,0x0503e007)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
HXLINE( 157)		this->passCount++;
HXLINE( 158)		this->updateTestClass(result);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbstractTestResultClient_obj,addPass,(void))

void AbstractTestResultClient_obj::addFail( ::massive::munit::TestResult result){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","addFail",0x291cf6c9,"massive.munit.client.AbstractTestResultClient.addFail","massive/munit/client/AbstractTestResultClient.hx",167,0x0503e007)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
HXLINE( 168)		this->failCount++;
HXLINE( 169)		this->updateTestClass(result);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbstractTestResultClient_obj,addFail,(void))

void AbstractTestResultClient_obj::addError( ::massive::munit::TestResult result){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","addError",0x4817dc7d,"massive.munit.client.AbstractTestResultClient.addError","massive/munit/client/AbstractTestResultClient.hx",178,0x0503e007)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
HXLINE( 179)		this->errorCount++;
HXLINE( 180)		this->updateTestClass(result);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbstractTestResultClient_obj,addError,(void))

void AbstractTestResultClient_obj::addIgnore( ::massive::munit::TestResult result){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","addIgnore",0x0e2946bd,"massive.munit.client.AbstractTestResultClient.addIgnore","massive/munit/client/AbstractTestResultClient.hx",189,0x0503e007)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
HXLINE( 190)		this->ignoreCount++;
HXLINE( 191)		this->updateTestClass(result);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbstractTestResultClient_obj,addIgnore,(void))

void AbstractTestResultClient_obj::setCurrentTestClassCoverage( ::Dynamic result){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","setCurrentTestClassCoverage",0xa4960701,"massive.munit.client.AbstractTestResultClient.setCurrentTestClassCoverage","massive/munit/client/AbstractTestResultClient.hx",196,0x0503e007)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
HXLINE( 196)		this->currentCoverageResult = result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbstractTestResultClient_obj,setCurrentTestClassCoverage,(void))

void AbstractTestResultClient_obj::reportFinalCoverage( ::Dynamic __o_percent,::Array< ::Dynamic> missingCoverageResults,::String summary,::String classBreakdown,::String packageBreakdown,::String executionFrequency){
 ::Dynamic percent = __o_percent.Default(0);
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","reportFinalCoverage",0x4c365754,"massive.munit.client.AbstractTestResultClient.reportFinalCoverage","massive/munit/client/AbstractTestResultClient.hx",206,0x0503e007)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(percent,"percent")
            	HX_STACK_ARG(missingCoverageResults,"missingCoverageResults")
            	HX_STACK_ARG(summary,"summary")
            	HX_STACK_ARG(classBreakdown,"classBreakdown")
            	HX_STACK_ARG(packageBreakdown,"packageBreakdown")
            	HX_STACK_ARG(executionFrequency,"executionFrequency")
HXLINE( 207)		this->totalCoveragePercent = percent;
HXLINE( 208)		this->totalCoverageResults = missingCoverageResults;
HXLINE( 209)		this->totalCoverageReport = summary;
            	}


HX_DEFINE_DYNAMIC_FUNC6(AbstractTestResultClient_obj,reportFinalCoverage,(void))

 ::Dynamic AbstractTestResultClient_obj::reportFinalStatistics(Int testCount,Int passCount,Int failCount,Int errorCount,Int ignoreCount,Float time){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","reportFinalStatistics",0x36924f8f,"massive.munit.client.AbstractTestResultClient.reportFinalStatistics","massive/munit/client/AbstractTestResultClient.hx",223,0x0503e007)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(testCount,"testCount")
            	HX_STACK_ARG(passCount,"passCount")
            	HX_STACK_ARG(failCount,"failCount")
            	HX_STACK_ARG(errorCount,"errorCount")
            	HX_STACK_ARG(ignoreCount,"ignoreCount")
            	HX_STACK_ARG(time,"time")
HXLINE( 224)		this->finalResult = (passCount == testCount);
HXLINE( 226)		this->printReports();
HXLINE( 228)		this->printFinalStatistics(this->finalResult,testCount,passCount,failCount,errorCount,ignoreCount,time);
HXLINE( 230)		this->printOverallResult(this->finalResult);
HXLINE( 232)		::haxe::Log_obj::trace = this->originalTrace;
HXLINE( 233)		 ::Dynamic _hx_tmp = this->get_completionHandler();
HXDLIN( 233)		Bool _hx_tmp1 = hx::IsNotNull( _hx_tmp );
HXDLIN( 233)		if (_hx_tmp1) {
HXLINE( 233)			 ::Dynamic _hx_tmp2 = this->get_completionHandler();
HXDLIN( 233)			_hx_tmp2(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 234)		return this->get_output();
            	}


HX_DEFINE_DYNAMIC_FUNC6(AbstractTestResultClient_obj,reportFinalStatistics,return )

void AbstractTestResultClient_obj::initializeTestClass(){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","initializeTestClass",0xde174c40,"massive.munit.client.AbstractTestResultClient.initializeTestClass","massive/munit/client/AbstractTestResultClient.hx",244,0x0503e007)
            	HX_STACK_THIS(this)
HXLINE( 245)		this->currentClassResults = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 246)		::massive::munit::client::AbstractTestResultClient_obj::traces = ::Array_obj< ::String >::__new(0);
HXLINE( 247)		this->passCount = (int)0;
HXLINE( 248)		this->failCount = (int)0;
HXLINE( 249)		this->errorCount = (int)0;
HXLINE( 250)		this->ignoreCount = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AbstractTestResultClient_obj,initializeTestClass,(void))

void AbstractTestResultClient_obj::updateTestClass( ::massive::munit::TestResult result){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","updateTestClass",0x3734bb67,"massive.munit.client.AbstractTestResultClient.updateTestClass","massive/munit/client/AbstractTestResultClient.hx",257,0x0503e007)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
HXLINE( 258)		this->currentClassResults->push(result);
HXLINE( 259)		this->totalResults->push(result);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbstractTestResultClient_obj,updateTestClass,(void))

void AbstractTestResultClient_obj::finalizeTestClass(){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","finalizeTestClass",0x769cbfb2,"massive.munit.client.AbstractTestResultClient.finalizeTestClass","massive/munit/client/AbstractTestResultClient.hx",267,0x0503e007)
            	HX_STACK_THIS(this)
HXLINE( 267)		this->currentClassResults->sort(this->sortTestResults_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC0(AbstractTestResultClient_obj,finalizeTestClass,(void))

void AbstractTestResultClient_obj::printReports(){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","printReports",0x93d8ae28,"massive.munit.client.AbstractTestResultClient.printReports","massive/munit/client/AbstractTestResultClient.hx",277,0x0503e007)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(AbstractTestResultClient_obj,printReports,(void))

void AbstractTestResultClient_obj::printFinalStatistics(Bool result,Int testCount,Int passCount,Int failCount,Int errorCount,Int ignoreCount,Float time){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","printFinalStatistics",0x2962c822,"massive.munit.client.AbstractTestResultClient.printFinalStatistics","massive/munit/client/AbstractTestResultClient.hx",285,0x0503e007)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
            	HX_STACK_ARG(testCount,"testCount")
            	HX_STACK_ARG(passCount,"passCount")
            	HX_STACK_ARG(failCount,"failCount")
            	HX_STACK_ARG(errorCount,"errorCount")
            	HX_STACK_ARG(ignoreCount,"ignoreCount")
            	HX_STACK_ARG(time,"time")
            	}


HX_DEFINE_DYNAMIC_FUNC7(AbstractTestResultClient_obj,printFinalStatistics,(void))

void AbstractTestResultClient_obj::printOverallResult(Bool result){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","printOverallResult",0xae166ab3,"massive.munit.client.AbstractTestResultClient.printOverallResult","massive/munit/client/AbstractTestResultClient.hx",290,0x0503e007)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
            	}


HX_DEFINE_DYNAMIC_FUNC1(AbstractTestResultClient_obj,printOverallResult,(void))

void AbstractTestResultClient_obj::addTrace( ::Dynamic value, ::Dynamic info){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","addTrace",0xeb0d9f3a,"massive.munit.client.AbstractTestResultClient.addTrace","massive/munit/client/AbstractTestResultClient.hx",297,0x0503e007)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(info,"info")
HXLINE( 298)		::String _hx_tmp = (((( (::String)(info->__Field(HX_("fileName",e7,5a,43,62),hx::paccDynamic)) ) + HX_("|",7c,00,00,00)) + ( (Int)(info->__Field(HX_("lineNumber",dd,81,22,76),hx::paccDynamic)) )) + HX_("| ",24,6c,00,00));
HXDLIN( 298)		::String _hx_tmp1 = ::Std_obj::string(value);
HXLINE( 299)		::massive::munit::client::AbstractTestResultClient_obj::traces->push((_hx_tmp + _hx_tmp1));
            	}


HX_DEFINE_DYNAMIC_FUNC2(AbstractTestResultClient_obj,addTrace,(void))

::Array< ::String > AbstractTestResultClient_obj::getTraces(){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","getTraces",0x8510082e,"massive.munit.client.AbstractTestResultClient.getTraces","massive/munit/client/AbstractTestResultClient.hx",307,0x0503e007)
            	HX_STACK_THIS(this)
HXLINE( 307)		return ::massive::munit::client::AbstractTestResultClient_obj::traces->concat(::Array_obj< ::String >::__new(0));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AbstractTestResultClient_obj,getTraces,return )

Int AbstractTestResultClient_obj::sortTestResults( ::massive::munit::TestResult a, ::massive::munit::TestResult b){
            	HX_STACK_FRAME("massive.munit.client.AbstractTestResultClient","sortTestResults",0x13478c30,"massive.munit.client.AbstractTestResultClient.sortTestResults","massive/munit/client/AbstractTestResultClient.hx",311,0x0503e007)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 312)		HX_VAR( Int,aInt);
HXDLIN( 312)		HX_VARI( ::hx::EnumBase,_g) = a->get_type();
HXDLIN( 312)		Int _hx_tmp = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN( 312)		switch((int)(_hx_tmp)){
            			case (int)1: {
HXLINE( 312)				aInt = (int)-1;
            			}
            			break;
            			case (int)2: {
HXLINE( 312)				aInt = (int)1;
            			}
            			break;
            			case (int)3: {
HXLINE( 312)				aInt = (int)2;
            			}
            			break;
            			case (int)4: {
HXLINE( 312)				aInt = (int)0;
            			}
            			break;
            			default:{
HXLINE( 312)				aInt = (int)-2;
            			}
            		}
HXLINE( 321)		HX_VAR( Int,bInt);
HXDLIN( 321)		HX_VARI( ::hx::EnumBase,_g1) = b->get_type();
HXDLIN( 321)		Int _hx_tmp1 = ( ( ::hx::EnumBase)(_g1) )->_hx_getIndex();
HXDLIN( 321)		switch((int)(_hx_tmp1)){
            			case (int)1: {
HXLINE( 321)				bInt = (int)-1;
            			}
            			break;
            			case (int)2: {
HXLINE( 321)				bInt = (int)1;
            			}
            			break;
            			case (int)3: {
HXLINE( 321)				bInt = (int)2;
            			}
            			break;
            			case (int)4: {
HXLINE( 321)				bInt = (int)0;
            			}
            			break;
            			default:{
HXLINE( 321)				bInt = (int)-2;
            			}
            		}
HXLINE( 330)		return (aInt - bInt);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AbstractTestResultClient_obj,sortTestResults,return )

::Array< ::String > AbstractTestResultClient_obj::traces;


AbstractTestResultClient_obj::AbstractTestResultClient_obj()
{
}

void AbstractTestResultClient_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AbstractTestResultClient);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(completionHandler,"completionHandler");
	HX_MARK_MEMBER_NAME(output,"output");
	HX_MARK_MEMBER_NAME(passCount,"passCount");
	HX_MARK_MEMBER_NAME(failCount,"failCount");
	HX_MARK_MEMBER_NAME(errorCount,"errorCount");
	HX_MARK_MEMBER_NAME(ignoreCount,"ignoreCount");
	HX_MARK_MEMBER_NAME(currentTestClass,"currentTestClass");
	HX_MARK_MEMBER_NAME(currentClassResults,"currentClassResults");
	HX_MARK_MEMBER_NAME(currentCoverageResult,"currentCoverageResult");
	HX_MARK_MEMBER_NAME(totalResults,"totalResults");
	HX_MARK_MEMBER_NAME(totalCoveragePercent,"totalCoveragePercent");
	HX_MARK_MEMBER_NAME(totalCoverageReport,"totalCoverageReport");
	HX_MARK_MEMBER_NAME(totalCoverageResults,"totalCoverageResults");
	HX_MARK_MEMBER_NAME(originalTrace,"originalTrace");
	HX_MARK_MEMBER_NAME(finalResult,"finalResult");
	HX_MARK_END_CLASS();
}

void AbstractTestResultClient_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(completionHandler,"completionHandler");
	HX_VISIT_MEMBER_NAME(output,"output");
	HX_VISIT_MEMBER_NAME(passCount,"passCount");
	HX_VISIT_MEMBER_NAME(failCount,"failCount");
	HX_VISIT_MEMBER_NAME(errorCount,"errorCount");
	HX_VISIT_MEMBER_NAME(ignoreCount,"ignoreCount");
	HX_VISIT_MEMBER_NAME(currentTestClass,"currentTestClass");
	HX_VISIT_MEMBER_NAME(currentClassResults,"currentClassResults");
	HX_VISIT_MEMBER_NAME(currentCoverageResult,"currentCoverageResult");
	HX_VISIT_MEMBER_NAME(totalResults,"totalResults");
	HX_VISIT_MEMBER_NAME(totalCoveragePercent,"totalCoveragePercent");
	HX_VISIT_MEMBER_NAME(totalCoverageReport,"totalCoverageReport");
	HX_VISIT_MEMBER_NAME(totalCoverageResults,"totalCoverageResults");
	HX_VISIT_MEMBER_NAME(originalTrace,"originalTrace");
	HX_VISIT_MEMBER_NAME(finalResult,"finalResult");
}

hx::Val AbstractTestResultClient_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"output") ) { return hx::Val( inCallProp == hx::paccAlways ? get_output() : output); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addPass") ) { return hx::Val( addPass_dyn()); }
		if (HX_FIELD_EQ(inName,"addFail") ) { return hx::Val( addFail_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"addError") ) { return hx::Val( addError_dyn()); }
		if (HX_FIELD_EQ(inName,"addTrace") ) { return hx::Val( addTrace_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"passCount") ) { return hx::Val( passCount); }
		if (HX_FIELD_EQ(inName,"failCount") ) { return hx::Val( failCount); }
		if (HX_FIELD_EQ(inName,"addIgnore") ) { return hx::Val( addIgnore_dyn()); }
		if (HX_FIELD_EQ(inName,"getTraces") ) { return hx::Val( getTraces_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_output") ) { return hx::Val( get_output_dyn()); }
		if (HX_FIELD_EQ(inName,"errorCount") ) { return hx::Val( errorCount); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"ignoreCount") ) { return hx::Val( ignoreCount); }
		if (HX_FIELD_EQ(inName,"finalResult") ) { return hx::Val( finalResult); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"totalResults") ) { return hx::Val( totalResults); }
		if (HX_FIELD_EQ(inName,"printReports") ) { return hx::Val( printReports_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"originalTrace") ) { return hx::Val( originalTrace); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateTestClass") ) { return hx::Val( updateTestClass_dyn()); }
		if (HX_FIELD_EQ(inName,"sortTestResults") ) { return hx::Val( sortTestResults_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentTestClass") ) { return hx::Val( currentTestClass); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"completionHandler") ) { return hx::Val( inCallProp == hx::paccAlways ? get_completionHandler() : completionHandler); }
		if (HX_FIELD_EQ(inName,"finalizeTestClass") ) { return hx::Val( finalizeTestClass_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"printOverallResult") ) { return hx::Val( printOverallResult_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"currentClassResults") ) { return hx::Val( currentClassResults); }
		if (HX_FIELD_EQ(inName,"totalCoverageReport") ) { return hx::Val( totalCoverageReport); }
		if (HX_FIELD_EQ(inName,"setCurrentTestClass") ) { return hx::Val( setCurrentTestClass_dyn()); }
		if (HX_FIELD_EQ(inName,"reportFinalCoverage") ) { return hx::Val( reportFinalCoverage_dyn()); }
		if (HX_FIELD_EQ(inName,"initializeTestClass") ) { return hx::Val( initializeTestClass_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"totalCoveragePercent") ) { return hx::Val( totalCoveragePercent); }
		if (HX_FIELD_EQ(inName,"totalCoverageResults") ) { return hx::Val( totalCoverageResults); }
		if (HX_FIELD_EQ(inName,"printFinalStatistics") ) { return hx::Val( printFinalStatistics_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_completionHandler") ) { return hx::Val( get_completionHandler_dyn()); }
		if (HX_FIELD_EQ(inName,"set_completionHandler") ) { return hx::Val( set_completionHandler_dyn()); }
		if (HX_FIELD_EQ(inName,"currentCoverageResult") ) { return hx::Val( currentCoverageResult); }
		if (HX_FIELD_EQ(inName,"reportFinalStatistics") ) { return hx::Val( reportFinalStatistics_dyn()); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"setCurrentTestClassCoverage") ) { return hx::Val( setCurrentTestClassCoverage_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool AbstractTestResultClient_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"traces") ) { outValue = traces; return true; }
	}
	return false;
}

hx::Val AbstractTestResultClient_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"output") ) { output=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"passCount") ) { passCount=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"failCount") ) { failCount=inValue.Cast< Int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"errorCount") ) { errorCount=inValue.Cast< Int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"ignoreCount") ) { ignoreCount=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"finalResult") ) { finalResult=inValue.Cast< Bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"totalResults") ) { totalResults=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"originalTrace") ) { originalTrace=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentTestClass") ) { currentTestClass=inValue.Cast< ::String >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"completionHandler") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_completionHandler(inValue) );completionHandler=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"currentClassResults") ) { currentClassResults=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalCoverageReport") ) { totalCoverageReport=inValue.Cast< ::String >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"totalCoveragePercent") ) { totalCoveragePercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalCoverageResults") ) { totalCoverageResults=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"currentCoverageResult") ) { currentCoverageResult=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool AbstractTestResultClient_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"traces") ) { traces=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

void AbstractTestResultClient_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("output","\x01","\x0f","\x81","\x0c"));
	outFields->push(HX_HCSTRING("passCount","\x3e","\xba","\x7a","\x7c"));
	outFields->push(HX_HCSTRING("failCount","\x11","\x76","\xb6","\xd2"));
	outFields->push(HX_HCSTRING("errorCount","\xe7","\x33","\x67","\xbf"));
	outFields->push(HX_HCSTRING("ignoreCount","\x5d","\xda","\xf5","\x6d"));
	outFields->push(HX_HCSTRING("currentTestClass","\x0d","\x2b","\x8b","\x04"));
	outFields->push(HX_HCSTRING("currentClassResults","\x77","\xd9","\xa3","\x84"));
	outFields->push(HX_HCSTRING("currentCoverageResult","\xfe","\x0e","\x52","\xc3"));
	outFields->push(HX_HCSTRING("totalResults","\x92","\xed","\x55","\x14"));
	outFields->push(HX_HCSTRING("totalCoveragePercent","\x59","\xde","\xfb","\x05"));
	outFields->push(HX_HCSTRING("totalCoverageReport","\xa0","\x97","\xf2","\x79"));
	outFields->push(HX_HCSTRING("totalCoverageResults","\x8a","\x8c","\x78","\xf8"));
	outFields->push(HX_HCSTRING("originalTrace","\x74","\x84","\x10","\x71"));
	outFields->push(HX_HCSTRING("finalResult","\xf3","\x38","\x29","\x4f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AbstractTestResultClient_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(AbstractTestResultClient_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(AbstractTestResultClient_obj,completionHandler),HX_HCSTRING("completionHandler","\x0e","\xe8","\xb2","\x5b")},
	{hx::fsString,(int)offsetof(AbstractTestResultClient_obj,output),HX_HCSTRING("output","\x01","\x0f","\x81","\x0c")},
	{hx::fsInt,(int)offsetof(AbstractTestResultClient_obj,passCount),HX_HCSTRING("passCount","\x3e","\xba","\x7a","\x7c")},
	{hx::fsInt,(int)offsetof(AbstractTestResultClient_obj,failCount),HX_HCSTRING("failCount","\x11","\x76","\xb6","\xd2")},
	{hx::fsInt,(int)offsetof(AbstractTestResultClient_obj,errorCount),HX_HCSTRING("errorCount","\xe7","\x33","\x67","\xbf")},
	{hx::fsInt,(int)offsetof(AbstractTestResultClient_obj,ignoreCount),HX_HCSTRING("ignoreCount","\x5d","\xda","\xf5","\x6d")},
	{hx::fsString,(int)offsetof(AbstractTestResultClient_obj,currentTestClass),HX_HCSTRING("currentTestClass","\x0d","\x2b","\x8b","\x04")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(AbstractTestResultClient_obj,currentClassResults),HX_HCSTRING("currentClassResults","\x77","\xd9","\xa3","\x84")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(AbstractTestResultClient_obj,currentCoverageResult),HX_HCSTRING("currentCoverageResult","\xfe","\x0e","\x52","\xc3")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(AbstractTestResultClient_obj,totalResults),HX_HCSTRING("totalResults","\x92","\xed","\x55","\x14")},
	{hx::fsFloat,(int)offsetof(AbstractTestResultClient_obj,totalCoveragePercent),HX_HCSTRING("totalCoveragePercent","\x59","\xde","\xfb","\x05")},
	{hx::fsString,(int)offsetof(AbstractTestResultClient_obj,totalCoverageReport),HX_HCSTRING("totalCoverageReport","\xa0","\x97","\xf2","\x79")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(AbstractTestResultClient_obj,totalCoverageResults),HX_HCSTRING("totalCoverageResults","\x8a","\x8c","\x78","\xf8")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(AbstractTestResultClient_obj,originalTrace),HX_HCSTRING("originalTrace","\x74","\x84","\x10","\x71")},
	{hx::fsBool,(int)offsetof(AbstractTestResultClient_obj,finalResult),HX_HCSTRING("finalResult","\xf3","\x38","\x29","\x4f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo AbstractTestResultClient_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::String >*/ ,(void *) &AbstractTestResultClient_obj::traces,HX_HCSTRING("traces","\x4e","\x26","\x7d","\x45")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String AbstractTestResultClient_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("completionHandler","\x0e","\xe8","\xb2","\x5b"),
	HX_HCSTRING("get_completionHandler","\xe5","\xea","\x60","\xda"),
	HX_HCSTRING("set_completionHandler","\xf1","\xb8","\x69","\x2e"),
	HX_HCSTRING("output","\x01","\x0f","\x81","\x0c"),
	HX_HCSTRING("get_output","\xca","\x7e","\x08","\xfd"),
	HX_HCSTRING("passCount","\x3e","\xba","\x7a","\x7c"),
	HX_HCSTRING("failCount","\x11","\x76","\xb6","\xd2"),
	HX_HCSTRING("errorCount","\xe7","\x33","\x67","\xbf"),
	HX_HCSTRING("ignoreCount","\x5d","\xda","\xf5","\x6d"),
	HX_HCSTRING("currentTestClass","\x0d","\x2b","\x8b","\x04"),
	HX_HCSTRING("currentClassResults","\x77","\xd9","\xa3","\x84"),
	HX_HCSTRING("currentCoverageResult","\xfe","\x0e","\x52","\xc3"),
	HX_HCSTRING("totalResults","\x92","\xed","\x55","\x14"),
	HX_HCSTRING("totalCoveragePercent","\x59","\xde","\xfb","\x05"),
	HX_HCSTRING("totalCoverageReport","\xa0","\x97","\xf2","\x79"),
	HX_HCSTRING("totalCoverageResults","\x8a","\x8c","\x78","\xf8"),
	HX_HCSTRING("originalTrace","\x74","\x84","\x10","\x71"),
	HX_HCSTRING("finalResult","\xf3","\x38","\x29","\x4f"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("setCurrentTestClass","\xcf","\x86","\x4e","\xfb"),
	HX_HCSTRING("addPass","\x92","\x27","\x8f","\x86"),
	HX_HCSTRING("addFail","\x9f","\xfc","\xf2","\x7f"),
	HX_HCSTRING("addError","\xe7","\xf1","\x86","\xec"),
	HX_HCSTRING("addIgnore","\x13","\xee","\xec","\x4a"),
	HX_HCSTRING("setCurrentTestClassCoverage","\xd7","\x3b","\xb4","\x88"),
	HX_HCSTRING("reportFinalCoverage","\x2a","\xc6","\x68","\x9d"),
	HX_HCSTRING("reportFinalStatistics","\xe5","\x9f","\x5e","\x0c"),
	HX_HCSTRING("initializeTestClass","\x16","\xbb","\x49","\x2f"),
	HX_HCSTRING("updateTestClass","\x3d","\x87","\xe5","\x60"),
	HX_HCSTRING("finalizeTestClass","\x08","\xad","\xf8","\x06"),
	HX_HCSTRING("printReports","\x92","\xc0","\x6f","\x0e"),
	HX_HCSTRING("printFinalStatistics","\x8c","\x54","\x51","\xe4"),
	HX_HCSTRING("printOverallResult","\x9d","\x28","\x2a","\x6e"),
	HX_HCSTRING("addTrace","\xa4","\xb4","\x7c","\x8f"),
	HX_HCSTRING("getTraces","\x84","\xaf","\xd3","\xc1"),
	HX_HCSTRING("sortTestResults","\x06","\x58","\xf8","\x3c"),
	::String(null()) };

static void AbstractTestResultClient_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AbstractTestResultClient_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(AbstractTestResultClient_obj::traces,"traces");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AbstractTestResultClient_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AbstractTestResultClient_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(AbstractTestResultClient_obj::traces,"traces");
};

#endif

hx::Class AbstractTestResultClient_obj::__mClass;

static ::String AbstractTestResultClient_obj_sStaticFields[] = {
	HX_HCSTRING("traces","\x4e","\x26","\x7d","\x45"),
	::String(null())
};

void AbstractTestResultClient_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("massive.munit.client.AbstractTestResultClient","\x98","\x20","\xa3","\x1a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AbstractTestResultClient_obj::__GetStatic;
	__mClass->mSetStaticField = &AbstractTestResultClient_obj::__SetStatic;
	__mClass->mMarkFunc = AbstractTestResultClient_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AbstractTestResultClient_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AbstractTestResultClient_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AbstractTestResultClient_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AbstractTestResultClient_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AbstractTestResultClient_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AbstractTestResultClient_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace massive
} // end namespace munit
} // end namespace client
