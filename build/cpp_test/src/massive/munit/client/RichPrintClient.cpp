// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_massive_haxe_Exception
#include <massive/haxe/Exception.h>
#endif
#ifndef INCLUDED_massive_munit_AssertionException
#include <massive/munit/AssertionException.h>
#endif
#ifndef INCLUDED_massive_munit_IAdvancedTestResultClient
#include <massive/munit/IAdvancedTestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_ICoverageTestResultClient
#include <massive/munit/ICoverageTestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_ITestResultClient
#include <massive/munit/ITestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_MUnitException
#include <massive/munit/MUnitException.h>
#endif
#ifndef INCLUDED_massive_munit_TestResult
#include <massive/munit/TestResult.h>
#endif
#ifndef INCLUDED_massive_munit_TestResultType
#include <massive/munit/TestResultType.h>
#endif
#ifndef INCLUDED_massive_munit_client_AbstractTestResultClient
#include <massive/munit/client/AbstractTestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_client_ExternalPrintClient
#include <massive/munit/client/ExternalPrintClient.h>
#endif
#ifndef INCLUDED_massive_munit_client_ExternalPrintClientJS
#include <massive/munit/client/ExternalPrintClientJS.h>
#endif
#ifndef INCLUDED_massive_munit_client_PrintClientBase
#include <massive/munit/client/PrintClientBase.h>
#endif
#ifndef INCLUDED_massive_munit_client_RichPrintClient
#include <massive/munit/client/RichPrintClient.h>
#endif
#ifndef INCLUDED_massive_munit_util_MathUtil
#include <massive/munit/util/MathUtil.h>
#endif

namespace massive{
namespace munit{
namespace client{

void RichPrintClient_obj::__construct(){
            	HX_STACK_FRAME("massive.munit.client.RichPrintClient","new",0x0bcb7cf2,"massive.munit.client.RichPrintClient.new","massive/munit/client/RichPrintClient.hx",50,0xd074f7fd)
            	HX_STACK_THIS(this)
HXLINE(  51)		super::__construct(null());
HXLINE(  52)		this->id = HX_("RichPrintClient",7c,7d,df,56);
            	}

Dynamic RichPrintClient_obj::__CreateEmpty() { return new RichPrintClient_obj; }

hx::ObjectPtr< RichPrintClient_obj > RichPrintClient_obj::__new()
{
	hx::ObjectPtr< RichPrintClient_obj > _hx_result = new RichPrintClient_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic RichPrintClient_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RichPrintClient_obj > _hx_result = new RichPrintClient_obj();
	_hx_result->__construct();
	return _hx_result;
}

void RichPrintClient_obj::init(){
            	HX_STACK_FRAME("massive.munit.client.RichPrintClient","init",0x42fa8e3e,"massive.munit.client.RichPrintClient.init","massive/munit/client/RichPrintClient.hx",56,0xd074f7fd)
            	HX_STACK_THIS(this)
HXLINE(  57)		this->super::init();
HXLINE(  59)		this->originalTrace = ::haxe::Log_obj::trace;
HXLINE(  60)		::haxe::Log_obj::trace = this->customTrace_dyn();
HXLINE(  62)		this->external =  ::massive::munit::client::ExternalPrintClientJS_obj::__new();
            	}


void RichPrintClient_obj::initializeTestClass(){
            	HX_STACK_FRAME("massive.munit.client.RichPrintClient","initializeTestClass",0x58e72ba8,"massive.munit.client.RichPrintClient.initializeTestClass","massive/munit/client/RichPrintClient.hx",67,0xd074f7fd)
            	HX_STACK_THIS(this)
HXLINE(  68)		this->super::initializeTestClass();
HXLINE(  69)		::massive::munit::client::ExternalPrintClient_obj::createTestClass(this->external,this->currentTestClass);
HXLINE(  70)		::massive::munit::client::ExternalPrintClient_obj::printToTestClassSummary(this->external,((HX_("Class: ",be,50,e2,36) + this->currentTestClass) + HX_(" ",20,00,00,00)));
            	}


void RichPrintClient_obj::updateTestClass( ::massive::munit::TestResult result){
            	HX_STACK_FRAME("massive.munit.client.RichPrintClient","updateTestClass",0x5ef6c6cf,"massive.munit.client.RichPrintClient.updateTestClass","massive/munit/client/RichPrintClient.hx",74,0xd074f7fd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
HXLINE(  75)		this->super::updateTestClass(result);
HXLINE(  77)		HX_VARI( ::String,value) = this->serializeTestResult(result);
HXLINE(  78)		{
HXLINE(  78)			HX_VARI( ::hx::EnumBase,_g) = result->get_type();
HXDLIN(  78)			Int _hx_tmp = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN(  78)			switch((int)(_hx_tmp)){
            				case (int)0: {
            				}
            				break;
            				case (int)1: {
HXLINE(  82)					::massive::munit::client::ExternalPrintClient_obj::printToTestClassSummary(this->external,HX_(".",2e,00,00,00));
HXLINE(  83)					::massive::munit::client::ExternalPrintClient_obj::addTestPass(this->external,value);
            				}
            				break;
            				case (int)2: {
HXLINE(  87)					::massive::munit::client::ExternalPrintClient_obj::printToTestClassSummary(this->external,HX_("!",21,00,00,00));
HXLINE(  88)					::massive::munit::client::ExternalPrintClient_obj::addTestFail(this->external,value);
            				}
            				break;
            				case (int)3: {
HXLINE(  92)					::massive::munit::client::ExternalPrintClient_obj::printToTestClassSummary(this->external,HX_("x",78,00,00,00));
HXLINE(  93)					::massive::munit::client::ExternalPrintClient_obj::addTestError(this->external,value);
            				}
            				break;
            				case (int)4: {
HXLINE(  97)					::massive::munit::client::ExternalPrintClient_obj::printToTestClassSummary(this->external,HX_(",",2c,00,00,00));
HXLINE(  98)					::massive::munit::client::ExternalPrintClient_obj::addTestIgnore(this->external,value);
            				}
            				break;
            			}
            		}
            	}


::String RichPrintClient_obj::serializeTestResult( ::massive::munit::TestResult result){
            	HX_STACK_FRAME("massive.munit.client.RichPrintClient","serializeTestResult",0x28cd9961,"massive.munit.client.RichPrintClient.serializeTestResult","massive/munit/client/RichPrintClient.hx",105,0xd074f7fd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
HXLINE( 106)		HX_VARI( ::String,summary) = result->name;
HXLINE( 108)		Bool _hx_tmp;
HXDLIN( 108)		Bool _hx_tmp1 = hx::IsNotNull( result->description );
HXDLIN( 108)		if (_hx_tmp1) {
HXLINE( 108)			_hx_tmp = (result->description != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 108)			_hx_tmp = false;
            		}
HXDLIN( 108)		if (_hx_tmp) {
HXLINE( 110)			hx::AddEq(summary,((HX_(" - ",73,6f,18,00) + result->description) + HX_(" -",0d,1c,00,00)));
            		}
HXLINE( 113)		Float _hx_tmp2 = ::massive::munit::util::MathUtil_obj::round(result->executionTime,(int)4);
HXDLIN( 113)		hx::AddEq(summary,((HX_(" (",08,1c,00,00) + _hx_tmp2) + HX_("s)",56,64,00,00)));
HXLINE( 115)		HX_VARI( ::String,str) = null();
HXLINE( 116)		Bool _hx_tmp3 = hx::IsNotNull( result->error );
HXDLIN( 116)		if (_hx_tmp3) {
HXLINE( 118)			::String _hx_tmp4 = ((HX_("Error: ",4e,a8,5b,b7) + summary) + HX_("\n",0a,00,00,00));
HXDLIN( 118)			::String _hx_tmp5 = ::Std_obj::string(result->error);
HXDLIN( 118)			str = (_hx_tmp4 + _hx_tmp5);
            		}
            		else {
HXLINE( 120)			Bool _hx_tmp6 = hx::IsNotNull( result->failure );
HXDLIN( 120)			if (_hx_tmp6) {
HXLINE( 122)				::String _hx_tmp7 = ((HX_("Failure: ",50,a9,81,40) + summary) + HX_("\n",0a,00,00,00));
HXDLIN( 122)				::String _hx_tmp8 = ::Std_obj::string(result->failure);
HXDLIN( 122)				str = (_hx_tmp7 + _hx_tmp8);
            			}
            			else {
HXLINE( 124)				if (result->ignore) {
HXLINE( 126)					str = (HX_("Ignore: ",58,90,e8,3a) + summary);
            				}
            			}
            		}
HXLINE( 133)		return str;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RichPrintClient_obj,serializeTestResult,return )

void RichPrintClient_obj::finalizeTestClass(){
            	HX_STACK_FRAME("massive.munit.client.RichPrintClient","finalizeTestClass",0x9b86751a,"massive.munit.client.RichPrintClient.finalizeTestClass","massive/munit/client/RichPrintClient.hx",141,0xd074f7fd)
            	HX_STACK_THIS(this)
HXLINE( 142)		this->super::finalizeTestClass();
HXLINE( 143)		this->testClassResultType = this->getTestClassResultType();
HXLINE( 145)		HX_VAR( Int,code);
HXLINE( 147)		Int _hx_tmp = ( ( ::hx::EnumBase)(this->testClassResultType) )->_hx_getIndex();
HXDLIN( 147)		switch((int)(_hx_tmp)){
            			case (int)1: {
HXLINE( 145)				code = (int)0;
            			}
            			break;
            			case (int)2: {
HXLINE( 145)				code = (int)1;
            			}
            			break;
            			case (int)3: {
HXLINE( 145)				code = (int)2;
            			}
            			break;
            			case (int)4: {
HXLINE( 145)				code = (int)3;
            			}
            			break;
            			default:{
HXLINE( 145)				code = (int)-1;
            			}
            		}
HXLINE( 155)		if ((code == (int)-1)) {
HXLINE( 155)			return;
            		}
HXLINE( 156)		::massive::munit::client::ExternalPrintClient_obj::setTestClassResult(this->external,code);
            	}


::hx::EnumBase RichPrintClient_obj::getTestClassResultType(){
            	HX_STACK_FRAME("massive.munit.client.RichPrintClient","getTestClassResultType",0x86813c15,"massive.munit.client.RichPrintClient.getTestClassResultType","massive/munit/client/RichPrintClient.hx",163,0xd074f7fd)
            	HX_STACK_THIS(this)
HXLINE( 163)		if ((this->errorCount > (int)0)) {
HXLINE( 163)			return ::massive::munit::TestResultType_obj::ERROR_dyn();
            		}
            		else {
HXLINE( 164)			if ((this->failCount > (int)0)) {
HXLINE( 164)				return ::massive::munit::TestResultType_obj::FAIL_dyn();
            			}
            			else {
HXLINE( 165)				if ((this->ignoreCount > (int)0)) {
HXLINE( 165)					return ::massive::munit::TestResultType_obj::IGNORE_dyn();
            				}
            				else {
HXLINE( 166)					return ::massive::munit::TestResultType_obj::PASS_dyn();
            				}
            			}
            		}
HXLINE( 163)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(RichPrintClient_obj,getTestClassResultType,return )

void RichPrintClient_obj::setCurrentTestClassCoverage( ::Dynamic result){
            	HX_STACK_FRAME("massive.munit.client.RichPrintClient","setCurrentTestClassCoverage",0x02ef8e69,"massive.munit.client.RichPrintClient.setCurrentTestClassCoverage","massive/munit/client/RichPrintClient.hx",171,0xd074f7fd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
HXLINE( 172)		this->super::setCurrentTestClassCoverage(result);
HXLINE( 174)		::String _hx_tmp = ((HX_(" [",3b,1c,00,00) + ( (Float)(result->__Field(HX_("percent",c5,aa,da,78),hx::paccDynamic)) )) + HX_("%]",98,20,00,00));
HXDLIN( 174)		::massive::munit::client::ExternalPrintClient_obj::printToTestClassSummary(this->external,_hx_tmp);
HXLINE( 176)		if ((( (Float)(result->__Field(HX_("percent",c5,aa,da,78),hx::paccDynamic)) ) == (int)100)) {
HXLINE( 176)			return;
            		}
HXLINE( 178)		::massive::munit::client::ExternalPrintClient_obj::addTestClassCoverage(this->external, ::Dynamic(result->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)), ::Dynamic(result->__Field(HX_("percent",c5,aa,da,78),hx::paccDynamic)));
HXLINE( 179)		{
HXLINE( 179)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 179)			HX_VARI( ::Array< ::String >,_g1) = ( (::Array< ::String >)(result->__Field(HX_("blocks",86,2e,ea,a7),hx::paccDynamic)) );
HXDLIN( 179)			while((_g < _g1->length)){
HXLINE( 179)				HX_VARI( ::String,item) = _g1->__get(_g);
HXDLIN( 179)				++_g;
HXLINE( 181)				::massive::munit::client::ExternalPrintClient_obj::addTestClassCoverageItem(this->external,item);
            			}
            		}
            	}


void RichPrintClient_obj::reportFinalCoverage( ::Dynamic __o_percent,::Array< ::Dynamic> missingCoverageResults,::String summary,::String classBreakdown,::String packageBreakdown,::String executionFrequency){
 ::Dynamic percent = __o_percent.Default(0);
            	HX_STACK_FRAME("massive.munit.client.RichPrintClient","reportFinalCoverage",0xc70636bc,"massive.munit.client.RichPrintClient.reportFinalCoverage","massive/munit/client/RichPrintClient.hx",191,0xd074f7fd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(percent,"percent")
            	HX_STACK_ARG(missingCoverageResults,"missingCoverageResults")
            	HX_STACK_ARG(summary,"summary")
            	HX_STACK_ARG(classBreakdown,"classBreakdown")
            	HX_STACK_ARG(packageBreakdown,"packageBreakdown")
            	HX_STACK_ARG(executionFrequency,"executionFrequency")
HXLINE( 192)		this->super::reportFinalCoverage(percent,missingCoverageResults,summary,classBreakdown,packageBreakdown,executionFrequency);
HXLINE( 194)		::massive::munit::client::ExternalPrintClient_obj::createCoverageReport(this->external,percent);
HXLINE( 195)		this->printMissingCoverage(missingCoverageResults);
HXLINE( 197)		Bool _hx_tmp = hx::IsNotNull( executionFrequency );
HXDLIN( 197)		if (_hx_tmp) {
HXLINE( 199)			::String _hx_tmp1 = this->trim(executionFrequency);
HXDLIN( 199)			::massive::munit::client::ExternalPrintClient_obj::addCoverageReportSection(this->external,HX_("Code Execution Frequency",81,35,09,9d),_hx_tmp1);
            		}
HXLINE( 202)		Bool _hx_tmp2 = hx::IsNotNull( classBreakdown );
HXDLIN( 202)		if (_hx_tmp2) {
HXLINE( 204)			::String _hx_tmp3 = this->trim(classBreakdown);
HXDLIN( 204)			::massive::munit::client::ExternalPrintClient_obj::addCoverageReportSection(this->external,HX_("Class Breakdown",79,ba,b8,ec),_hx_tmp3);
            		}
HXLINE( 207)		Bool _hx_tmp4 = hx::IsNotNull( packageBreakdown );
HXDLIN( 207)		if (_hx_tmp4) {
HXLINE( 209)			::String _hx_tmp5 = this->trim(packageBreakdown);
HXDLIN( 209)			::massive::munit::client::ExternalPrintClient_obj::addCoverageReportSection(this->external,HX_("Package Breakdown",47,93,cd,0d),_hx_tmp5);
            		}
HXLINE( 212)		Bool _hx_tmp6 = hx::IsNotNull( packageBreakdown );
HXDLIN( 212)		if (_hx_tmp6) {
HXLINE( 214)			::String _hx_tmp7 = this->trim(summary);
HXDLIN( 214)			::massive::munit::client::ExternalPrintClient_obj::addCoverageReportSection(this->external,HX_("Summary",06,33,3a,4e),_hx_tmp7);
            		}
            	}


::String RichPrintClient_obj::trim(::String output){
            	HX_STACK_FRAME("massive.munit.client.RichPrintClient","trim",0x4a42f010,"massive.munit.client.RichPrintClient.trim","massive/munit/client/RichPrintClient.hx",219,0xd074f7fd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(output,"output")
HXLINE( 220)		while(true){
HXLINE( 220)			Int _hx_tmp = output.indexOf(HX_("\n",0a,00,00,00),null());
HXDLIN( 220)			if (!((_hx_tmp == (int)0))) {
HXLINE( 220)				goto _hx_goto_1;
            			}
HXLINE( 222)			output = output.substr((int)1,null());
            		}
            		_hx_goto_1:;
HXLINE( 225)		while(true){
HXLINE( 225)			Int _hx_tmp1 = output.lastIndexOf(HX_("\n",0a,00,00,00),null());
HXDLIN( 225)			if (!((_hx_tmp1 == (output.length - (int)2)))) {
HXLINE( 225)				goto _hx_goto_2;
            			}
HXLINE( 227)			Int _hx_tmp2 = (output.length - (int)2);
HXDLIN( 227)			output = output.substr((int)0,_hx_tmp2);
            		}
            		_hx_goto_2:;
HXLINE( 230)		return output;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RichPrintClient_obj,trim,return )

void RichPrintClient_obj::printMissingCoverage(::Array< ::Dynamic> missingCoverageResults){
            	HX_STACK_FRAME("massive.munit.client.RichPrintClient","printMissingCoverage",0xe0675cef,"massive.munit.client.RichPrintClient.printMissingCoverage","massive/munit/client/RichPrintClient.hx",235,0xd074f7fd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(missingCoverageResults,"missingCoverageResults")
HXLINE( 236)		Bool _hx_tmp;
HXDLIN( 236)		Bool _hx_tmp1 = hx::IsNotNull( missingCoverageResults );
HXDLIN( 236)		if (_hx_tmp1) {
HXLINE( 236)			_hx_tmp = (missingCoverageResults->length == (int)0);
            		}
            		else {
HXLINE( 236)			_hx_tmp = true;
            		}
HXDLIN( 236)		if (_hx_tmp) {
HXLINE( 236)			return;
            		}
HXLINE( 238)		{
HXLINE( 238)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 238)			while((_g < missingCoverageResults->length)){
HXLINE( 238)				HX_VARI(  ::Dynamic,result) = missingCoverageResults->__get(_g);
HXDLIN( 238)				++_g;
HXLINE( 240)				::massive::munit::client::ExternalPrintClient_obj::addMissingCoverageClass(this->external, ::Dynamic(result->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)), ::Dynamic(result->__Field(HX_("percent",c5,aa,da,78),hx::paccDynamic)));
HXLINE( 241)				{
HXLINE( 241)					HX_VARI( Int,_g1) = (int)0;
HXDLIN( 241)					HX_VARI( ::Array< ::String >,_g2) = ( (::Array< ::String >)(result->__Field(HX_("blocks",86,2e,ea,a7),hx::paccDynamic)) );
HXDLIN( 241)					while((_g1 < _g2->length)){
HXLINE( 241)						HX_VARI( ::String,item) = _g2->__get(_g1);
HXDLIN( 241)						++_g1;
HXLINE( 243)						::massive::munit::client::ExternalPrintClient_obj::addTestClassCoverageItem(this->external,item);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(RichPrintClient_obj,printMissingCoverage,(void))

void RichPrintClient_obj::printReports(){
            	HX_STACK_FRAME("massive.munit.client.RichPrintClient","printReports",0x0f1af1c0,"massive.munit.client.RichPrintClient.printReports","massive/munit/client/RichPrintClient.hx",250,0xd074f7fd)
            	HX_STACK_THIS(this)
HXLINE( 250)		this->super::printReports();
            	}


void RichPrintClient_obj::printFinalStatistics(Bool result,Int testCount,Int passCount,Int failCount,Int errorCount,Int ignoreCount,Float time){
            	HX_STACK_FRAME("massive.munit.client.RichPrintClient","printFinalStatistics",0x247663ba,"massive.munit.client.RichPrintClient.printFinalStatistics","massive/munit/client/RichPrintClient.hx",254,0xd074f7fd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
            	HX_STACK_ARG(testCount,"testCount")
            	HX_STACK_ARG(passCount,"passCount")
            	HX_STACK_ARG(failCount,"failCount")
            	HX_STACK_ARG(errorCount,"errorCount")
            	HX_STACK_ARG(ignoreCount,"ignoreCount")
            	HX_STACK_ARG(time,"time")
HXLINE( 255)		this->super::printFinalStatistics(result,testCount,passCount,failCount,errorCount,ignoreCount,time);
HXLINE( 257)		HX_VAR( ::String,resultString);
HXDLIN( 257)		if (result) {
HXLINE( 257)			resultString = HX_("PASSED",70,7f,b4,a0);
            		}
            		else {
HXLINE( 257)			resultString = HX_("FAILED",bd,71,81,9a);
            		}
HXLINE( 258)		::String _hx_tmp = (((((((((((HX_("\n",0a,00,00,00) + HX_("Tests: ",a7,54,2f,8b)) + testCount) + HX_("  Passed: ",36,9a,0f,7e)) + passCount) + HX_("  Failed: ",c3,79,b7,3a)) + failCount) + HX_(" Errors: ",51,13,30,17)) + errorCount) + HX_(" Ignored: ",f8,ad,04,5a)) + ignoreCount) + HX_(" Time: ",33,28,15,86));
HXLINE( 263)		Float _hx_tmp1 = ::massive::munit::util::MathUtil_obj::round(time,(int)5);
HXLINE( 258)		hx::AddEq(resultString,(_hx_tmp + _hx_tmp1));
HXLINE( 265)		::massive::munit::client::ExternalPrintClient_obj::printSummary(this->external,resultString);
            	}


void RichPrintClient_obj::printOverallResult(Bool result){
            	HX_STACK_FRAME("massive.munit.client.RichPrintClient","printOverallResult",0xd5ab704b,"massive.munit.client.RichPrintClient.printOverallResult","massive/munit/client/RichPrintClient.hx",269,0xd074f7fd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
HXLINE( 270)		this->super::printOverallResult(result);
HXLINE( 271)		::massive::munit::client::ExternalPrintClient_obj::setResult(this->external,result);
            	}


void RichPrintClient_obj::customTrace( ::Dynamic value, ::Dynamic info){
            	HX_STACK_FRAME("massive.munit.client.RichPrintClient","customTrace",0x060d83a6,"massive.munit.client.RichPrintClient.customTrace","massive/munit/client/RichPrintClient.hx",275,0xd074f7fd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(info,"info")
HXLINE( 276)		this->addTrace(value,info);
HXLINE( 278)		HX_VARI( ::Array< ::String >,traces) = this->getTraces();
HXLINE( 279)		HX_VARI( ::String,t) = traces->__get((traces->length - (int)1));
HXLINE( 280)		::massive::munit::client::ExternalPrintClient_obj::trace(this->external,t);
            	}


HX_DEFINE_DYNAMIC_FUNC2(RichPrintClient_obj,customTrace,(void))

void RichPrintClient_obj::print( ::Dynamic value){
            	HX_STACK_FRAME("massive.munit.client.RichPrintClient","print",0x62b4cd3f,"massive.munit.client.RichPrintClient.print","massive/munit/client/RichPrintClient.hx",286,0xd074f7fd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 287)		this->super::print(value);
HXLINE( 293)		::Sys_obj::print(value);
            	}


void RichPrintClient_obj::printLine( ::Dynamic value, ::Dynamic __o_indent){
 ::Dynamic indent = __o_indent.Default(0);
            	HX_STACK_FRAME("massive.munit.client.RichPrintClient","printLine",0x6a6a1cd3,"massive.munit.client.RichPrintClient.printLine","massive/munit/client/RichPrintClient.hx",299,0xd074f7fd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(indent,"indent")
HXLINE( 299)		this->super::printLine(value,indent);
            	}


::String RichPrintClient_obj::DEFAULT_ID;


RichPrintClient_obj::RichPrintClient_obj()
{
}

void RichPrintClient_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RichPrintClient);
	HX_MARK_MEMBER_NAME(testClassResultType,"testClassResultType");
	HX_MARK_MEMBER_NAME(external,"external");
	 ::massive::munit::client::PrintClientBase_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void RichPrintClient_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(testClassResultType,"testClassResultType");
	HX_VISIT_MEMBER_NAME(external,"external");
	 ::massive::munit::client::PrintClientBase_obj::__Visit(HX_VISIT_ARG);
}

hx::Val RichPrintClient_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		if (HX_FIELD_EQ(inName,"trim") ) { return hx::Val( trim_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"print") ) { return hx::Val( print_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"external") ) { return hx::Val( external); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"printLine") ) { return hx::Val( printLine_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"customTrace") ) { return hx::Val( customTrace_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"printReports") ) { return hx::Val( printReports_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateTestClass") ) { return hx::Val( updateTestClass_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"finalizeTestClass") ) { return hx::Val( finalizeTestClass_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"printOverallResult") ) { return hx::Val( printOverallResult_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"testClassResultType") ) { return hx::Val( testClassResultType); }
		if (HX_FIELD_EQ(inName,"initializeTestClass") ) { return hx::Val( initializeTestClass_dyn()); }
		if (HX_FIELD_EQ(inName,"serializeTestResult") ) { return hx::Val( serializeTestResult_dyn()); }
		if (HX_FIELD_EQ(inName,"reportFinalCoverage") ) { return hx::Val( reportFinalCoverage_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"printMissingCoverage") ) { return hx::Val( printMissingCoverage_dyn()); }
		if (HX_FIELD_EQ(inName,"printFinalStatistics") ) { return hx::Val( printFinalStatistics_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"getTestClassResultType") ) { return hx::Val( getTestClassResultType_dyn()); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"setCurrentTestClassCoverage") ) { return hx::Val( setCurrentTestClassCoverage_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val RichPrintClient_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"external") ) { external=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"testClassResultType") ) { testClassResultType=inValue.Cast< ::hx::EnumBase >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RichPrintClient_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("testClassResultType","\x5d","\x18","\x80","\x4f"));
	outFields->push(HX_HCSTRING("external","\x4b","\x42","\x83","\xe3"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo RichPrintClient_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::massive::munit::TestResultType*/ ,(int)offsetof(RichPrintClient_obj,testClassResultType),HX_HCSTRING("testClassResultType","\x5d","\x18","\x80","\x4f")},
	{hx::fsObject /*::massive::munit::client::ExternalPrintClient*/ ,(int)offsetof(RichPrintClient_obj,external),HX_HCSTRING("external","\x4b","\x42","\x83","\xe3")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo RichPrintClient_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &RichPrintClient_obj::DEFAULT_ID,HX_HCSTRING("DEFAULT_ID","\xf9","\x83","\x2f","\x18")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String RichPrintClient_obj_sMemberFields[] = {
	HX_HCSTRING("testClassResultType","\x5d","\x18","\x80","\x4f"),
	HX_HCSTRING("external","\x4b","\x42","\x83","\xe3"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("initializeTestClass","\x16","\xbb","\x49","\x2f"),
	HX_HCSTRING("updateTestClass","\x3d","\x87","\xe5","\x60"),
	HX_HCSTRING("serializeTestResult","\xcf","\x28","\x30","\xff"),
	HX_HCSTRING("finalizeTestClass","\x08","\xad","\xf8","\x06"),
	HX_HCSTRING("getTestClassResultType","\x67","\x85","\x97","\x27"),
	HX_HCSTRING("setCurrentTestClassCoverage","\xd7","\x3b","\xb4","\x88"),
	HX_HCSTRING("reportFinalCoverage","\x2a","\xc6","\x68","\x9d"),
	HX_HCSTRING("trim","\xe2","\x9c","\x03","\x4d"),
	HX_HCSTRING("printMissingCoverage","\xc1","\x4d","\x42","\xa0"),
	HX_HCSTRING("printReports","\x92","\xc0","\x6f","\x0e"),
	HX_HCSTRING("printFinalStatistics","\x8c","\x54","\x51","\xe4"),
	HX_HCSTRING("printOverallResult","\x9d","\x28","\x2a","\x6e"),
	HX_HCSTRING("customTrace","\x14","\xf5","\x5b","\xab"),
	HX_HCSTRING("print","\x2d","\x58","\x8b","\xc8"),
	HX_HCSTRING("printLine","\xc1","\xb6","\xab","\xc8"),
	::String(null()) };

static void RichPrintClient_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RichPrintClient_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(RichPrintClient_obj::DEFAULT_ID,"DEFAULT_ID");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RichPrintClient_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RichPrintClient_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(RichPrintClient_obj::DEFAULT_ID,"DEFAULT_ID");
};

#endif

hx::Class RichPrintClient_obj::__mClass;

static ::String RichPrintClient_obj_sStaticFields[] = {
	HX_HCSTRING("DEFAULT_ID","\xf9","\x83","\x2f","\x18"),
	::String(null())
};

void RichPrintClient_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("massive.munit.client.RichPrintClient","\x00","\xdc","\xf1","\xf8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RichPrintClient_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(RichPrintClient_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RichPrintClient_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RichPrintClient_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RichPrintClient_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RichPrintClient_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RichPrintClient_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void RichPrintClient_obj::__boot()
{
{
            	HX_STACK_FRAME("massive.munit.client.RichPrintClient","boot",0x3e5ad760,"massive.munit.client.RichPrintClient.boot","massive/munit/client/RichPrintClient.hx",44,0xd074f7fd)
HXLINE(  44)		DEFAULT_ID = HX_("RichPrintClient",7c,7d,df,56);
            	}
}

} // end namespace massive
} // end namespace munit
} // end namespace client
