// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_massive_munit_IAdvancedTestResultClient
#include <massive/munit/IAdvancedTestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_ICoverageTestResultClient
#include <massive/munit/ICoverageTestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_ITestResultClient
#include <massive/munit/ITestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_TestResult
#include <massive/munit/TestResult.h>
#endif
#ifndef INCLUDED_massive_munit_client_AbstractTestResultClient
#include <massive/munit/client/AbstractTestResultClient.h>
#endif
#ifndef INCLUDED_massive_munit_client_SummaryReportClient
#include <massive/munit/client/SummaryReportClient.h>
#endif

namespace massive{
namespace munit{
namespace client{

void SummaryReportClient_obj::__construct(){
            	HX_STACK_FRAME("massive.munit.client.SummaryReportClient","new",0xb25e143b,"massive.munit.client.SummaryReportClient.new","massive/munit/client/SummaryReportClient.hx",62,0xf2eda854)
            	HX_STACK_THIS(this)
HXLINE(  63)		super::__construct();
HXLINE(  64)		this->id = HX_("summary",26,0b,e9,80);
            	}

Dynamic SummaryReportClient_obj::__CreateEmpty() { return new SummaryReportClient_obj; }

hx::ObjectPtr< SummaryReportClient_obj > SummaryReportClient_obj::__new()
{
	hx::ObjectPtr< SummaryReportClient_obj > _hx_result = new SummaryReportClient_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic SummaryReportClient_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SummaryReportClient_obj > _hx_result = new SummaryReportClient_obj();
	_hx_result->__construct();
	return _hx_result;
}

void SummaryReportClient_obj::printFinalStatistics(Bool result,Int testCount,Int passCount,Int failCount,Int errorCount,Int ignoreCount,Float time){
            	HX_STACK_FRAME("massive.munit.client.SummaryReportClient","printFinalStatistics",0x2a090a51,"massive.munit.client.SummaryReportClient.printFinalStatistics","massive/munit/client/SummaryReportClient.hx",68,0xf2eda854)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
            	HX_STACK_ARG(testCount,"testCount")
            	HX_STACK_ARG(passCount,"passCount")
            	HX_STACK_ARG(failCount,"failCount")
            	HX_STACK_ARG(errorCount,"errorCount")
            	HX_STACK_ARG(ignoreCount,"ignoreCount")
            	HX_STACK_ARG(time,"time")
HXLINE(  69)		this->output = HX_("",00,00,00,00);
HXLINE(  70)		::String _hx_tmp = ::Std_obj::string(result);
HXDLIN(  70)		hx::AddEq(this->output,(HX_("result:",bd,58,57,6b) + _hx_tmp));
HXLINE(  71)		hx::AddEq(this->output,(HX_("\ncount:",15,94,4f,6c) + testCount));
HXLINE(  72)		hx::AddEq(this->output,(HX_("\npass:",ff,ed,e7,bc) + passCount));
HXLINE(  73)		hx::AddEq(this->output,(HX_("\nfail:",52,84,de,fa) + failCount));
HXLINE(  74)		hx::AddEq(this->output,(HX_("\nerror:",fc,26,3f,f1) + errorCount));
HXLINE(  75)		hx::AddEq(this->output,(HX_("\nignore:",1e,ac,d1,18) + ignoreCount));
HXLINE(  76)		hx::AddEq(this->output,(HX_("\ntime:",43,5b,c7,0f) + time));
HXLINE(  77)		hx::AddEq(this->output,HX_("\n",0a,00,00,00));
HXLINE(  79)		HX_VARI( Int,resultCount) = (int)0;
HXLINE(  81)		while(true){
HXLINE(  81)			Bool _hx_tmp1;
HXDLIN(  81)			if ((this->totalResults->length > (int)0)) {
HXLINE(  81)				_hx_tmp1 = (resultCount < (int)10);
            			}
            			else {
HXLINE(  81)				_hx_tmp1 = false;
            			}
HXDLIN(  81)			if (!(_hx_tmp1)) {
HXLINE(  81)				goto _hx_goto_0;
            			}
HXLINE(  83)			HX_VARI_NAME(  ::massive::munit::TestResult,result1,"result") = this->totalResults->shift().StaticCast<  ::massive::munit::TestResult >();
HXLINE(  84)			Bool _hx_tmp2 = !(result1->passed);
HXDLIN(  84)			if (_hx_tmp2) {
HXLINE(  86)				::String _hx_tmp3 = result1->get_location();
HXDLIN(  86)				hx::AddEq(this->output,(HX_("\n# ",27,b5,07,00) + _hx_tmp3));
HXLINE(  87)				++resultCount;
            			}
            		}
            		_hx_goto_0:;
HXLINE(  91)		HX_VARI( Int,remainder) = ((failCount + errorCount) - resultCount);
HXLINE(  93)		if ((remainder > (int)0)) {
HXLINE(  95)			hx::AddEq(this->output,((HX_("# ... plus ",97,17,0d,df) + remainder) + HX_(" more",b5,6f,33,b5)));
            		}
            	}


void SummaryReportClient_obj::printOverallResult(Bool result){
            	HX_STACK_FRAME("massive.munit.client.SummaryReportClient","printOverallResult",0x98567322,"massive.munit.client.SummaryReportClient.printOverallResult","massive/munit/client/SummaryReportClient.hx",101,0xf2eda854)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(result,"result")
            	}


void SummaryReportClient_obj::printReports(){
            	HX_STACK_FRAME("massive.munit.client.SummaryReportClient","printReports",0xc839a957,"massive.munit.client.SummaryReportClient.printReports","massive/munit/client/SummaryReportClient.hx",107,0xf2eda854)
            	HX_STACK_THIS(this)
            	}


::String SummaryReportClient_obj::DEFAULT_ID;


SummaryReportClient_obj::SummaryReportClient_obj()
{
}

hx::Val SummaryReportClient_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"printReports") ) { return hx::Val( printReports_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"printOverallResult") ) { return hx::Val( printOverallResult_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"printFinalStatistics") ) { return hx::Val( printFinalStatistics_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *SummaryReportClient_obj_sMemberStorageInfo = 0;
static hx::StaticInfo SummaryReportClient_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &SummaryReportClient_obj::DEFAULT_ID,HX_HCSTRING("DEFAULT_ID","\xf9","\x83","\x2f","\x18")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String SummaryReportClient_obj_sMemberFields[] = {
	HX_HCSTRING("printFinalStatistics","\x8c","\x54","\x51","\xe4"),
	HX_HCSTRING("printOverallResult","\x9d","\x28","\x2a","\x6e"),
	HX_HCSTRING("printReports","\x92","\xc0","\x6f","\x0e"),
	::String(null()) };

static void SummaryReportClient_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SummaryReportClient_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(SummaryReportClient_obj::DEFAULT_ID,"DEFAULT_ID");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SummaryReportClient_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SummaryReportClient_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(SummaryReportClient_obj::DEFAULT_ID,"DEFAULT_ID");
};

#endif

hx::Class SummaryReportClient_obj::__mClass;

static ::String SummaryReportClient_obj_sStaticFields[] = {
	HX_HCSTRING("DEFAULT_ID","\xf9","\x83","\x2f","\x18"),
	::String(null())
};

void SummaryReportClient_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("massive.munit.client.SummaryReportClient","\xc9","\xda","\xa2","\x84");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SummaryReportClient_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SummaryReportClient_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SummaryReportClient_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SummaryReportClient_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SummaryReportClient_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SummaryReportClient_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SummaryReportClient_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SummaryReportClient_obj::__boot()
{
{
            	HX_STACK_FRAME("massive.munit.client.SummaryReportClient","boot",0x580c9ff7,"massive.munit.client.SummaryReportClient.boot","massive/munit/client/SummaryReportClient.hx",59,0xf2eda854)
HXLINE(  59)		DEFAULT_ID = HX_("summary",26,0b,e9,80);
            	}
}

} // end namespace massive
} // end namespace munit
} // end namespace client
