// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_CallStack
#include <haxe/CallStack.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_massive_haxe_Exception
#include <massive/haxe/Exception.h>
#endif
#ifndef INCLUDED_massive_haxe_util_ReflectUtil
#include <massive/haxe/util/ReflectUtil.h>
#endif
#ifndef INCLUDED_massive_munit_MUnitException
#include <massive/munit/MUnitException.h>
#endif
#ifndef INCLUDED_massive_munit_UnhandledException
#include <massive/munit/UnhandledException.h>
#endif

namespace massive{
namespace munit{

void UnhandledException_obj::__construct( ::Dynamic source,::String testLocation){
            	HX_STACK_FRAME("massive.munit.UnhandledException","new",0x1b256705,"massive.munit.UnhandledException.new","massive/munit/UnhandledException.hx",51,0x46824609)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(testLocation,"testLocation")
HXLINE(  52)		 ::Dynamic _hx_tmp = source->toString();
HXDLIN(  52)		::String _hx_tmp1 = ::Std_obj::string(_hx_tmp);
HXDLIN(  52)		::String _hx_tmp2 = this->formatLocation(source,testLocation);
HXDLIN(  52)		super::__construct((_hx_tmp1 + _hx_tmp2),null());
HXLINE(  53)		this->type = ( (::String)(::massive::haxe::util::ReflectUtil_obj::here(hx::SourceInfo(HX_("UnhandledException.hx",d2,78,21,40),53,HX_("massive.munit.UnhandledException",93,80,42,45),HX_("new",60,d0,53,00)))->__Field(HX_("className",a3,92,3d,dc),hx::paccDynamic)) );
            	}

Dynamic UnhandledException_obj::__CreateEmpty() { return new UnhandledException_obj; }

hx::ObjectPtr< UnhandledException_obj > UnhandledException_obj::__new( ::Dynamic source,::String testLocation)
{
	hx::ObjectPtr< UnhandledException_obj > _hx_result = new UnhandledException_obj();
	_hx_result->__construct(source,testLocation);
	return _hx_result;
}

Dynamic UnhandledException_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< UnhandledException_obj > _hx_result = new UnhandledException_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

::String UnhandledException_obj::formatLocation( ::Dynamic source,::String testLocation){
            	HX_STACK_FRAME("massive.munit.UnhandledException","formatLocation",0x55771a07,"massive.munit.UnhandledException.formatLocation","massive/munit/UnhandledException.hx",57,0x46824609)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(testLocation,"testLocation")
HXLINE(  58)		HX_VARI( ::String,stackTrace) = (HX_(" at ",ad,d3,70,15) + testLocation);
HXLINE(  60)		HX_VARI( ::String,stack) = this->getStackTrace(source);
HXLINE(  62)		if ((stack != HX_("",00,00,00,00))) {
HXLINE(  63)			::String _hx_tmp = stack.substr((int)1,null());
HXDLIN(  63)			hx::AddEq(stackTrace,(HX_(" ",20,00,00,00) + _hx_tmp));
            		}
HXLINE(  65)		return stackTrace;
            	}


HX_DEFINE_DYNAMIC_FUNC2(UnhandledException_obj,formatLocation,return )

::String UnhandledException_obj::getStackTrace( ::Dynamic source){
            	HX_STACK_FRAME("massive.munit.UnhandledException","getStackTrace",0x11f4c538,"massive.munit.UnhandledException.getStackTrace","massive/munit/UnhandledException.hx",69,0x46824609)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(source,"source")
HXLINE(  70)		HX_VARI( ::String,s) = HX_("",00,00,00,00);
HXLINE(  83)		{
HXLINE(  84)			HX_VARI( ::Array< ::Dynamic>,stack) = ::haxe::CallStack_obj::exceptionStack();
HXLINE(  85)			while((stack->length > (int)0)){
HXLINE(  87)				HX_VARI( ::hx::EnumBase,_g) = stack->shift().StaticCast< ::hx::EnumBase >();
HXDLIN(  87)				Bool _hx_tmp = hx::IsNull( _g );
HXDLIN(  87)				if (!(_hx_tmp)) {
HXLINE(  87)					Int _hx_tmp1 = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN(  87)					switch((int)(_hx_tmp1)){
            						case (int)2: {
HXLINE(  90)							hx::AddEq(s,((((HX_("\tat ",64,eb,3c,06) + _g->_hx_getString(1)) + HX_(" (",08,1c,00,00)) + _g->_hx_getInt(2)) + HX_(")\n",c1,23,00,00)));
            						}
            						break;
            						case (int)3: {
HXLINE(  91)							hx::AddEq(s,((((HX_("\tat ",64,eb,3c,06) + _g->_hx_getString(0)) + HX_("#",23,00,00,00)) + _g->_hx_getString(1)) + HX_("\n",0a,00,00,00)));
            						}
            						break;
            						default:{
            						}
            					}
            				}
            			}
            		}
HXLINE( 107)		return s;
            	}


HX_DEFINE_DYNAMIC_FUNC1(UnhandledException_obj,getStackTrace,return )


UnhandledException_obj::UnhandledException_obj()
{
}

hx::Val UnhandledException_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"getStackTrace") ) { return hx::Val( getStackTrace_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"formatLocation") ) { return hx::Val( formatLocation_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *UnhandledException_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *UnhandledException_obj_sStaticStorageInfo = 0;
#endif

static ::String UnhandledException_obj_sMemberFields[] = {
	HX_HCSTRING("formatLocation","\x8c","\x48","\x0b","\x26"),
	HX_HCSTRING("getStackTrace","\x53","\x8e","\xb0","\x85"),
	::String(null()) };

static void UnhandledException_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(UnhandledException_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void UnhandledException_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(UnhandledException_obj::__mClass,"__mClass");
};

#endif

hx::Class UnhandledException_obj::__mClass;

void UnhandledException_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("massive.munit.UnhandledException","\x93","\x80","\x42","\x45");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = UnhandledException_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(UnhandledException_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< UnhandledException_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = UnhandledException_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UnhandledException_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UnhandledException_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace massive
} // end namespace munit
