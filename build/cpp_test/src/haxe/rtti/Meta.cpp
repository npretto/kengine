// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_rtti_Meta
#include <haxe/rtti/Meta.h>
#endif

namespace haxe{
namespace rtti{

void Meta_obj::__construct() { }

Dynamic Meta_obj::__CreateEmpty() { return new Meta_obj; }

hx::ObjectPtr< Meta_obj > Meta_obj::__new()
{
	hx::ObjectPtr< Meta_obj > _hx_result = new Meta_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Meta_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Meta_obj > _hx_result = new Meta_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::Dynamic Meta_obj::getMeta( ::Dynamic t){
            	HX_STACK_FRAME("haxe.rtti.Meta","getMeta",0x629b4ac1,"haxe.rtti.Meta.getMeta","C:\\Dev\\HaxeToolkit\\haxe\\std/haxe/rtti/Meta.hx",73,0xb7b0def8)
            	HX_STACK_ARG(t,"t")
HXLINE(  73)		return  ::Dynamic(t->__Field(HX_("__meta__",45,04,85,b1),hx::paccDynamic));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Meta_obj,getMeta,return )

 ::Dynamic Meta_obj::getFields( ::Dynamic t){
            	HX_STACK_FRAME("haxe.rtti.Meta","getFields",0x2f4d8575,"haxe.rtti.Meta.getFields","C:\\Dev\\HaxeToolkit\\haxe\\std/haxe/rtti/Meta.hx",88,0xb7b0def8)
            	HX_STACK_ARG(t,"t")
HXLINE(  89)		HX_VARI(  ::Dynamic,meta) = ::haxe::rtti::Meta_obj::getMeta(t);
HXLINE(  90)		Bool _hx_tmp;
HXDLIN(  90)		Bool _hx_tmp1 = hx::IsNotNull( meta );
HXDLIN(  90)		if (_hx_tmp1) {
HXLINE(  90)			_hx_tmp = hx::IsNull(  ::Dynamic(meta->__Field(HX_("fields",79,8e,8e,80),hx::paccDynamic)) );
            		}
            		else {
HXLINE(  90)			_hx_tmp = true;
            		}
HXDLIN(  90)		if (_hx_tmp) {
HXLINE(  90)			return  ::Dynamic(hx::Anon_obj::Create(0));
            		}
            		else {
HXLINE(  90)			return  ::Dynamic(meta->__Field(HX_("fields",79,8e,8e,80),hx::paccDynamic));
            		}
HXDLIN(  90)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Meta_obj,getFields,return )


Meta_obj::Meta_obj()
{
}

bool Meta_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getMeta") ) { outValue = getMeta_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getFields") ) { outValue = getFields_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Meta_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Meta_obj_sStaticStorageInfo = 0;
#endif

static void Meta_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Meta_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Meta_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Meta_obj::__mClass,"__mClass");
};

#endif

hx::Class Meta_obj::__mClass;

static ::String Meta_obj_sStaticFields[] = {
	HX_HCSTRING("getMeta","\x7b","\xfa","\xdb","\x1a"),
	HX_HCSTRING("getFields","\xaf","\x17","\xe5","\xfc"),
	::String(null())
};

void Meta_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.rtti.Meta","\xb4","\xfa","\x66","\x18");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Meta_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Meta_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Meta_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Meta_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Meta_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Meta_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Meta_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace rtti
