// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_Http
#include <haxe/Http.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesBuffer
#include <haxe/io/BytesBuffer.h>
#endif
#ifndef INCLUDED_haxe_io_BytesOutput
#include <haxe/io/BytesOutput.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_sys_net_Host
#include <sys/net/Host.h>
#endif
#ifndef INCLUDED_sys_net_Socket
#include <sys/net/Socket.h>
#endif
#ifndef INCLUDED_sys_ssl_Socket
#include <sys/ssl/Socket.h>
#endif

static const Bool _hx_array_data_0[] = {
	0,
};
namespace haxe{

void Http_obj::__construct(::String url){
            	HX_STACK_FRAME("haxe.Http","new",0x57ac51e2,"haxe.Http.new","C:\\Dev\\HaxeToolkit\\haxe\\std/haxe/Http.hx",79,0xbd57e5df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(url,"url")
HXLINE(  80)		this->url = url;
HXLINE(  81)		this->headers =  ::List_obj::__new();
HXLINE(  82)		this->params =  ::List_obj::__new();
HXLINE(  88)		this->cnxTimeout = (int)10;
            	}

Dynamic Http_obj::__CreateEmpty() { return new Http_obj; }

hx::ObjectPtr< Http_obj > Http_obj::__new(::String url)
{
	hx::ObjectPtr< Http_obj > _hx_result = new Http_obj();
	_hx_result->__construct(url);
	return _hx_result;
}

Dynamic Http_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Http_obj > _hx_result = new Http_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

 ::haxe::Http Http_obj::setHeader(::String header,::String value){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,header) HXARGC(1)
            		Bool _hx_run( ::Dynamic h){
            			HX_STACK_FRAME("haxe.Http","setHeader",0x34bd0dd1,"haxe.Http.setHeader","C:\\Dev\\HaxeToolkit\\haxe\\std/haxe/Http.hx",103,0xbd57e5df)
            			HX_STACK_ARG(h,"h")
HXLINE( 103)			return (( (::String)(h->__Field(HX_("header",8d,09,00,fd),hx::paccDynamic)) ) != header);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("haxe.Http","setHeader",0x34bd0dd1,"haxe.Http.setHeader","C:\\Dev\\HaxeToolkit\\haxe\\std/haxe/Http.hx",102,0xbd57e5df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(header,"header")
            	HX_STACK_ARG(value,"value")
HXLINE( 103)		this->headers = ::Lambda_obj::filter(this->headers, ::Dynamic(new _hx_Closure_0(header)));
HXLINE( 104)		this->headers->push( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("header",8d,09,00,fd),header)
            			->setFixed(1,HX_("value",71,7f,b8,31),value)));
HXLINE( 105)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Http_obj,setHeader,return )

 ::haxe::Http Http_obj::setParameter(::String param,::String value){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,param) HXARGC(1)
            		Bool _hx_run( ::Dynamic p){
            			HX_STACK_FRAME("haxe.Http","setParameter",0x96e033e5,"haxe.Http.setParameter","C:\\Dev\\HaxeToolkit\\haxe\\std/haxe/Http.hx",121,0xbd57e5df)
            			HX_STACK_ARG(p,"p")
HXLINE( 121)			return (( (::String)(p->__Field(HX_("param",8d,80,55,bd),hx::paccDynamic)) ) != param);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("haxe.Http","setParameter",0x96e033e5,"haxe.Http.setParameter","C:\\Dev\\HaxeToolkit\\haxe\\std/haxe/Http.hx",120,0xbd57e5df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(value,"value")
HXLINE( 121)		this->params = ::Lambda_obj::filter(this->params, ::Dynamic(new _hx_Closure_0(param)));
HXLINE( 122)		this->params->push( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("param",8d,80,55,bd),param)
            			->setFixed(1,HX_("value",71,7f,b8,31),value)));
HXLINE( 123)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Http_obj,setParameter,return )

void Http_obj::request( ::Dynamic post){
            		HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_0,::Array< Bool >,err, ::haxe::Http,_gthis, ::haxe::io::BytesOutput,output, ::haxe::Http,me, ::Dynamic,old) HXARGC(1)
            		void _hx_run(::String e){
            			HX_STACK_FRAME("haxe.Http","request",0xb2c949d1,"haxe.Http.request","C:\\Dev\\HaxeToolkit\\haxe\\std/haxe/Http.hx",329,0xbd57e5df)
            			HX_STACK_ARG(e,"e")
HXLINE( 333)			me->responseData = output->getBytes()->toString();
HXLINE( 335)			err[(int)0] = true;
HXLINE( 337)			_gthis->onError = old;
HXLINE( 338)			_gthis->onError(e);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("haxe.Http","request",0xb2c949d1,"haxe.Http.request","C:\\Dev\\HaxeToolkit\\haxe\\std/haxe/Http.hx",187,0xbd57e5df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(post,"post")
HXLINE( 187)		HX_VARI(  ::haxe::Http,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 325)		HX_VARI(  ::haxe::Http,me) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 326)		HX_VARI(  ::haxe::io::BytesOutput,output) =  ::haxe::io::BytesOutput_obj::__new();
HXLINE( 327)		HX_VARI(  ::Dynamic,old) = this->onError;
HXLINE( 328)		HX_VARI( ::Array< Bool >,err) = ::Array_obj< Bool >::fromData( _hx_array_data_0,1);
HXLINE( 329)		this->onError =  ::Dynamic(new _hx_Closure_0(err,_gthis,output,me,old));
HXLINE( 340)		this->customRequest(post,output,null(),null());
HXLINE( 341)		Bool _hx_tmp = !(err->__get((int)0));
HXDLIN( 341)		if (_hx_tmp) {
HXLINE( 345)			::String _hx_tmp1 = (me->responseData = output->getBytes()->toString());
HXDLIN( 345)			me->onData(_hx_tmp1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Http_obj,request,(void))

void Http_obj::customRequest(Bool post, ::haxe::io::Output api, ::sys::net::Socket sock,::String method){
            	HX_STACK_FRAME("haxe.Http","customRequest",0x68e97fa0,"haxe.Http.customRequest","C:\\Dev\\HaxeToolkit\\haxe\\std/haxe/Http.hx",364,0xbd57e5df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(post,"post")
            	HX_STACK_ARG(api,"api")
            	HX_STACK_ARG(sock,"sock")
            	HX_STACK_ARG(method,"method")
HXLINE( 365)		this->responseData = null();
HXLINE( 366)		HX_VARI(  ::EReg,url_regexp) =  ::EReg_obj::__new(HX_("^(https?://)?([a-zA-Z\\.0-9_-]+)(:[0-9]+)?(.*)$",00,3e,3a,6c),HX_("",00,00,00,00));
HXLINE( 367)		Bool _hx_tmp = !(url_regexp->match(this->url));
HXDLIN( 367)		if (_hx_tmp) {
HXLINE( 368)			this->onError(HX_("Invalid URL",86,55,d0,76));
HXLINE( 369)			return;
            		}
HXLINE( 371)		::String _hx_tmp1 = url_regexp->matched((int)1);
HXDLIN( 371)		HX_VARI( Bool,secure) = (_hx_tmp1 == HX_("https://",cf,b4,ae,3e));
HXLINE( 372)		Bool _hx_tmp2 = hx::IsNull( sock );
HXDLIN( 372)		if (_hx_tmp2) {
HXLINE( 373)			if (secure) {
HXLINE( 379)				sock =  ::sys::ssl::Socket_obj::__new();
            			}
            			else {
HXLINE( 384)				sock =  ::sys::net::Socket_obj::__new();
            			}
            		}
HXLINE( 386)		HX_VARI( ::String,host) = url_regexp->matched((int)2);
HXLINE( 387)		HX_VARI( ::String,portString) = url_regexp->matched((int)3);
HXLINE( 388)		HX_VARI( ::String,request) = url_regexp->matched((int)4);
HXLINE( 389)		Bool _hx_tmp3 = (request == HX_("",00,00,00,00));
HXDLIN( 389)		if (_hx_tmp3) {
HXLINE( 390)			request = HX_("/",2f,00,00,00);
            		}
HXLINE( 391)		HX_VAR(  ::Dynamic,port);
HXDLIN( 391)		Bool _hx_tmp4;
HXDLIN( 391)		Bool _hx_tmp5 = hx::IsNotNull( portString );
HXDLIN( 391)		if (_hx_tmp5) {
HXLINE( 391)			_hx_tmp4 = (portString == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 391)			_hx_tmp4 = true;
            		}
HXDLIN( 391)		if (_hx_tmp4) {
HXLINE( 391)			if (secure) {
HXLINE( 391)				port = (int)443;
            			}
            			else {
HXLINE( 391)				port = (int)80;
            			}
            		}
            		else {
HXLINE( 391)			Int _hx_tmp6 = (portString.length - (int)1);
HXDLIN( 391)			::String _hx_tmp7 = portString.substr((int)1,_hx_tmp6);
HXDLIN( 391)			port = ::Std_obj::parseInt(_hx_tmp7);
            		}
HXLINE( 394)		HX_VARI( Bool,multipart) = hx::IsNotNull( this->file );
HXLINE( 395)		HX_VARI( ::String,boundary) = null();
HXLINE( 396)		HX_VARI( ::String,uri) = null();
HXLINE( 397)		if (multipart) {
HXLINE( 398)			post = true;
HXLINE( 399)			Int _hx_tmp8 = ::Std_obj::random((int)1000);
HXDLIN( 399)			::String _hx_tmp9 = ::Std_obj::string(_hx_tmp8);
HXDLIN( 399)			Int _hx_tmp10 = ::Std_obj::random((int)1000);
HXDLIN( 399)			::String _hx_tmp11 = ::Std_obj::string(_hx_tmp10);
HXDLIN( 399)			::String _hx_tmp12 = (_hx_tmp9 + _hx_tmp11);
HXDLIN( 399)			Int _hx_tmp13 = ::Std_obj::random((int)1000);
HXDLIN( 399)			::String _hx_tmp14 = ::Std_obj::string(_hx_tmp13);
HXDLIN( 399)			::String _hx_tmp15 = (_hx_tmp12 + _hx_tmp14);
HXDLIN( 399)			Int _hx_tmp16 = ::Std_obj::random((int)1000);
HXDLIN( 399)			::String _hx_tmp17 = ::Std_obj::string(_hx_tmp16);
HXDLIN( 399)			boundary = (_hx_tmp15 + _hx_tmp17);
HXLINE( 400)			while((boundary.length < (int)38)){
HXLINE( 401)				boundary = (HX_("-",2d,00,00,00) + boundary);
            			}
HXLINE( 402)			HX_VARI(  ::StringBuf,b) =  ::StringBuf_obj::__new();
HXLINE( 403)			{
HXLINE( 403)				HX_VARI(  ::_List::ListNode,_g_head) = this->params->h;
HXDLIN( 403)				while(true){
HXLINE( 403)					Bool _hx_tmp18 = !(hx::IsNotNull( _g_head ));
HXDLIN( 403)					if (_hx_tmp18) {
HXLINE( 403)						goto _hx_goto_2;
            					}
HXDLIN( 403)					HX_VARI(  ::Dynamic,val) = _g_head->item;
HXLINE( 364)					_g_head = _g_head->next;
HXLINE( 404)					{
HXLINE( 404)						Bool _hx_tmp19 = hx::IsNotNull( b->charBuf );
HXDLIN( 404)						if (_hx_tmp19) {
HXLINE( 404)							b->flush();
            						}
HXDLIN( 404)						b->b->push(HX_("--",60,27,00,00));
            					}
HXLINE( 405)					{
HXLINE( 405)						Bool _hx_tmp20 = hx::IsNotNull( b->charBuf );
HXDLIN( 405)						if (_hx_tmp20) {
HXLINE( 405)							b->flush();
            						}
HXDLIN( 405)						::String _hx_tmp21 = ::Std_obj::string(boundary);
HXDLIN( 405)						b->b->push(_hx_tmp21);
            					}
HXLINE( 406)					{
HXLINE( 406)						Bool _hx_tmp22 = hx::IsNotNull( b->charBuf );
HXDLIN( 406)						if (_hx_tmp22) {
HXLINE( 406)							b->flush();
            						}
HXDLIN( 406)						b->b->push(HX_("\r\n",5d,0b,00,00));
            					}
HXLINE( 407)					{
HXLINE( 407)						Bool _hx_tmp23 = hx::IsNotNull( b->charBuf );
HXDLIN( 407)						if (_hx_tmp23) {
HXLINE( 407)							b->flush();
            						}
HXDLIN( 407)						b->b->push(HX_("Content-Disposition: form-data; name=\"",bf,46,3a,1c));
            					}
HXLINE( 408)					{
HXLINE( 408)						Bool _hx_tmp24 = hx::IsNotNull( b->charBuf );
HXDLIN( 408)						if (_hx_tmp24) {
HXLINE( 408)							b->flush();
            						}
HXDLIN( 408)						::String _hx_tmp25 = ::Std_obj::string( ::Dynamic(val->__Field(HX_("param",8d,80,55,bd),hx::paccDynamic)));
HXDLIN( 408)						b->b->push(_hx_tmp25);
            					}
HXLINE( 409)					{
HXLINE( 409)						Bool _hx_tmp26 = hx::IsNotNull( b->charBuf );
HXDLIN( 409)						if (_hx_tmp26) {
HXLINE( 409)							b->flush();
            						}
HXDLIN( 409)						b->b->push(HX_("\"",22,00,00,00));
            					}
HXLINE( 410)					{
HXLINE( 410)						Bool _hx_tmp27 = hx::IsNotNull( b->charBuf );
HXDLIN( 410)						if (_hx_tmp27) {
HXLINE( 410)							b->flush();
            						}
HXDLIN( 410)						b->b->push(HX_("\r\n",5d,0b,00,00));
            					}
HXLINE( 411)					{
HXLINE( 411)						Bool _hx_tmp28 = hx::IsNotNull( b->charBuf );
HXDLIN( 411)						if (_hx_tmp28) {
HXLINE( 411)							b->flush();
            						}
HXDLIN( 411)						b->b->push(HX_("\r\n",5d,0b,00,00));
            					}
HXLINE( 412)					{
HXLINE( 412)						Bool _hx_tmp29 = hx::IsNotNull( b->charBuf );
HXDLIN( 412)						if (_hx_tmp29) {
HXLINE( 412)							b->flush();
            						}
HXDLIN( 412)						::String _hx_tmp30 = ::Std_obj::string( ::Dynamic(val->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
HXDLIN( 412)						b->b->push(_hx_tmp30);
            					}
HXLINE( 413)					{
HXLINE( 413)						Bool _hx_tmp31 = hx::IsNotNull( b->charBuf );
HXDLIN( 413)						if (_hx_tmp31) {
HXLINE( 413)							b->flush();
            						}
HXDLIN( 413)						b->b->push(HX_("\r\n",5d,0b,00,00));
            					}
            				}
            				_hx_goto_2:;
            			}
HXLINE( 415)			{
HXLINE( 415)				Bool _hx_tmp32 = hx::IsNotNull( b->charBuf );
HXDLIN( 415)				if (_hx_tmp32) {
HXLINE( 415)					b->flush();
            				}
HXDLIN( 415)				b->b->push(HX_("--",60,27,00,00));
            			}
HXLINE( 416)			{
HXLINE( 416)				Bool _hx_tmp33 = hx::IsNotNull( b->charBuf );
HXDLIN( 416)				if (_hx_tmp33) {
HXLINE( 416)					b->flush();
            				}
HXDLIN( 416)				::String _hx_tmp34 = ::Std_obj::string(boundary);
HXDLIN( 416)				b->b->push(_hx_tmp34);
            			}
HXLINE( 417)			{
HXLINE( 417)				Bool _hx_tmp35 = hx::IsNotNull( b->charBuf );
HXDLIN( 417)				if (_hx_tmp35) {
HXLINE( 417)					b->flush();
            				}
HXDLIN( 417)				b->b->push(HX_("\r\n",5d,0b,00,00));
            			}
HXLINE( 418)			{
HXLINE( 418)				Bool _hx_tmp36 = hx::IsNotNull( b->charBuf );
HXDLIN( 418)				if (_hx_tmp36) {
HXLINE( 418)					b->flush();
            				}
HXDLIN( 418)				b->b->push(HX_("Content-Disposition: form-data; name=\"",bf,46,3a,1c));
            			}
HXLINE( 419)			{
HXLINE( 419)				Bool _hx_tmp37 = hx::IsNotNull( b->charBuf );
HXDLIN( 419)				if (_hx_tmp37) {
HXLINE( 419)					b->flush();
            				}
HXDLIN( 419)				::String _hx_tmp38 = ::Std_obj::string( ::Dynamic(this->file->__Field(HX_("param",8d,80,55,bd),hx::paccDynamic)));
HXDLIN( 419)				b->b->push(_hx_tmp38);
            			}
HXLINE( 420)			{
HXLINE( 420)				Bool _hx_tmp39 = hx::IsNotNull( b->charBuf );
HXDLIN( 420)				if (_hx_tmp39) {
HXLINE( 420)					b->flush();
            				}
HXDLIN( 420)				b->b->push(HX_("\"; filename=\"",b3,3a,e5,4f));
            			}
HXLINE( 421)			{
HXLINE( 421)				Bool _hx_tmp40 = hx::IsNotNull( b->charBuf );
HXDLIN( 421)				if (_hx_tmp40) {
HXLINE( 421)					b->flush();
            				}
HXDLIN( 421)				::String _hx_tmp41 = ::Std_obj::string( ::Dynamic(this->file->__Field(HX_("filename",c7,2e,6a,77),hx::paccDynamic)));
HXDLIN( 421)				b->b->push(_hx_tmp41);
            			}
HXLINE( 422)			{
HXLINE( 422)				Bool _hx_tmp42 = hx::IsNotNull( b->charBuf );
HXDLIN( 422)				if (_hx_tmp42) {
HXLINE( 422)					b->flush();
            				}
HXDLIN( 422)				b->b->push(HX_("\"",22,00,00,00));
            			}
HXLINE( 423)			{
HXLINE( 423)				Bool _hx_tmp43 = hx::IsNotNull( b->charBuf );
HXDLIN( 423)				if (_hx_tmp43) {
HXLINE( 423)					b->flush();
            				}
HXDLIN( 423)				b->b->push(HX_("\r\n",5d,0b,00,00));
            			}
HXLINE( 424)			{
HXLINE( 424)				Bool _hx_tmp44 = hx::IsNotNull( b->charBuf );
HXDLIN( 424)				if (_hx_tmp44) {
HXLINE( 424)					b->flush();
            				}
HXDLIN( 424)				::String _hx_tmp45 = ::Std_obj::string((((HX_("Content-Type: ",f4,2b,e6,1d) + ( (::String)(this->file->__Field(HX_("mimeType",8e,56,09,5d),hx::paccDynamic)) )) + HX_("\r\n",5d,0b,00,00)) + HX_("\r\n",5d,0b,00,00)));
HXDLIN( 424)				b->b->push(_hx_tmp45);
            			}
HXLINE( 425)			Bool _hx_tmp46 = hx::IsNotNull( b->charBuf );
HXDLIN( 425)			if (_hx_tmp46) {
HXLINE( 425)				b->flush();
            			}
HXDLIN( 425)			uri = b->b->join(HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 427)			HX_VARI_NAME(  ::_List::ListNode,_g_head1,"_g_head") = this->params->h;
HXDLIN( 427)			while(true){
HXLINE( 427)				Bool _hx_tmp47 = !(hx::IsNotNull( _g_head1 ));
HXDLIN( 427)				if (_hx_tmp47) {
HXLINE( 427)					goto _hx_goto_3;
            				}
HXDLIN( 427)				HX_VARI_NAME(  ::Dynamic,val1,"val") = _g_head1->item;
HXLINE( 364)				_g_head1 = _g_head1->next;
HXLINE( 428)				Bool _hx_tmp48 = hx::IsNull( uri );
HXDLIN( 428)				if (_hx_tmp48) {
HXLINE( 429)					uri = HX_("",00,00,00,00);
            				}
            				else {
HXLINE( 431)					hx::AddEq(uri,HX_("&",26,00,00,00));
            				}
HXLINE( 432)				::String _hx_tmp49 = ::StringTools_obj::urlEncode( ::Dynamic(val1->__Field(HX_("param",8d,80,55,bd),hx::paccDynamic)));
HXDLIN( 432)				::String _hx_tmp50 = (_hx_tmp49 + HX_("=",3d,00,00,00));
HXDLIN( 432)				::String _hx_tmp51 = ::StringTools_obj::urlEncode( ::Dynamic(val1->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
HXDLIN( 432)				hx::AddEq(uri,(_hx_tmp50 + _hx_tmp51));
            			}
            			_hx_goto_3:;
            		}
HXLINE( 436)		HX_VARI_NAME(  ::StringBuf,b1,"b") =  ::StringBuf_obj::__new();
HXLINE( 437)		Bool _hx_tmp52 = hx::IsNotNull( method );
HXDLIN( 437)		if (_hx_tmp52) {
HXLINE( 438)			{
HXLINE( 438)				Bool _hx_tmp53 = hx::IsNotNull( b1->charBuf );
HXDLIN( 438)				if (_hx_tmp53) {
HXLINE( 438)					b1->flush();
            				}
HXDLIN( 438)				::String _hx_tmp54 = ::Std_obj::string(method);
HXDLIN( 438)				b1->b->push(_hx_tmp54);
            			}
HXLINE( 439)			{
HXLINE( 439)				Bool _hx_tmp55 = hx::IsNotNull( b1->charBuf );
HXDLIN( 439)				if (_hx_tmp55) {
HXLINE( 439)					b1->flush();
            				}
HXDLIN( 439)				b1->b->push(HX_(" ",20,00,00,00));
            			}
            		}
            		else {
HXLINE( 440)			if (post) {
HXLINE( 441)				Bool _hx_tmp56 = hx::IsNotNull( b1->charBuf );
HXDLIN( 441)				if (_hx_tmp56) {
HXLINE( 441)					b1->flush();
            				}
HXDLIN( 441)				b1->b->push(HX_("POST ",c0,87,85,44));
            			}
            			else {
HXLINE( 443)				Bool _hx_tmp57 = hx::IsNotNull( b1->charBuf );
HXDLIN( 443)				if (_hx_tmp57) {
HXLINE( 443)					b1->flush();
            				}
HXDLIN( 443)				b1->b->push(HX_("GET ",ea,ca,22,2f));
            			}
            		}
HXLINE( 445)		Bool _hx_tmp58 = hx::IsNotNull( ::haxe::Http_obj::PROXY );
HXDLIN( 445)		if (_hx_tmp58) {
HXLINE( 446)			{
HXLINE( 446)				Bool _hx_tmp59 = hx::IsNotNull( b1->charBuf );
HXDLIN( 446)				if (_hx_tmp59) {
HXLINE( 446)					b1->flush();
            				}
HXDLIN( 446)				b1->b->push(HX_("http://",52,75,cd,5a));
            			}
HXLINE( 447)			{
HXLINE( 447)				Bool _hx_tmp60 = hx::IsNotNull( b1->charBuf );
HXDLIN( 447)				if (_hx_tmp60) {
HXLINE( 447)					b1->flush();
            				}
HXDLIN( 447)				::String _hx_tmp61 = ::Std_obj::string(host);
HXDLIN( 447)				b1->b->push(_hx_tmp61);
            			}
HXLINE( 448)			if (hx::IsNotEq( port,(int)80 )) {
HXLINE( 449)				{
HXLINE( 449)					Bool _hx_tmp62 = hx::IsNotNull( b1->charBuf );
HXDLIN( 449)					if (_hx_tmp62) {
HXLINE( 449)						b1->flush();
            					}
HXDLIN( 449)					b1->b->push(HX_(":",3a,00,00,00));
            				}
HXLINE( 450)				{
HXLINE( 450)					Bool _hx_tmp63 = hx::IsNotNull( b1->charBuf );
HXDLIN( 450)					if (_hx_tmp63) {
HXLINE( 450)						b1->flush();
            					}
HXDLIN( 450)					::String _hx_tmp64 = ::Std_obj::string(port);
HXDLIN( 450)					b1->b->push(_hx_tmp64);
            				}
            			}
            		}
HXLINE( 453)		{
HXLINE( 453)			Bool _hx_tmp65 = hx::IsNotNull( b1->charBuf );
HXDLIN( 453)			if (_hx_tmp65) {
HXLINE( 453)				b1->flush();
            			}
HXDLIN( 453)			::String _hx_tmp66 = ::Std_obj::string(request);
HXDLIN( 453)			b1->b->push(_hx_tmp66);
            		}
HXLINE( 455)		Bool _hx_tmp67;
HXDLIN( 455)		if (!(post)) {
HXLINE( 455)			_hx_tmp67 = hx::IsNotNull( uri );
            		}
            		else {
HXLINE( 455)			_hx_tmp67 = false;
            		}
HXDLIN( 455)		if (_hx_tmp67) {
HXLINE( 456)			Int _hx_tmp68 = request.indexOf(HX_("?",3f,00,00,00),(int)0);
HXDLIN( 456)			if ((_hx_tmp68 >= (int)0)) {
HXLINE( 457)				Bool _hx_tmp69 = hx::IsNotNull( b1->charBuf );
HXDLIN( 457)				if (_hx_tmp69) {
HXLINE( 457)					b1->flush();
            				}
HXDLIN( 457)				b1->b->push(HX_("&",26,00,00,00));
            			}
            			else {
HXLINE( 459)				Bool _hx_tmp70 = hx::IsNotNull( b1->charBuf );
HXDLIN( 459)				if (_hx_tmp70) {
HXLINE( 459)					b1->flush();
            				}
HXDLIN( 459)				b1->b->push(HX_("?",3f,00,00,00));
            			}
HXLINE( 460)			{
HXLINE( 460)				Bool _hx_tmp71 = hx::IsNotNull( b1->charBuf );
HXDLIN( 460)				if (_hx_tmp71) {
HXLINE( 460)					b1->flush();
            				}
HXDLIN( 460)				::String _hx_tmp72 = ::Std_obj::string(uri);
HXDLIN( 460)				b1->b->push(_hx_tmp72);
            			}
            		}
HXLINE( 462)		{
HXLINE( 462)			Bool _hx_tmp73 = hx::IsNotNull( b1->charBuf );
HXDLIN( 462)			if (_hx_tmp73) {
HXLINE( 462)				b1->flush();
            			}
HXDLIN( 462)			::String _hx_tmp74 = ::Std_obj::string(((HX_(" HTTP/1.1\r\nHost: ",d8,a9,d9,24) + host) + HX_("\r\n",5d,0b,00,00)));
HXDLIN( 462)			b1->b->push(_hx_tmp74);
            		}
HXLINE( 463)		Bool _hx_tmp75 = hx::IsNotNull( this->postData );
HXDLIN( 463)		if (_hx_tmp75) {
HXLINE( 464)			::String x = ((HX_("Content-Length: ",20,de,22,7c) + this->postData.length) + HX_("\r\n",5d,0b,00,00));
HXDLIN( 464)			Bool _hx_tmp76 = hx::IsNotNull( b1->charBuf );
HXDLIN( 464)			if (_hx_tmp76) {
HXLINE( 464)				b1->flush();
            			}
HXDLIN( 464)			::String _hx_tmp77 = ::Std_obj::string(x);
HXDLIN( 464)			b1->b->push(_hx_tmp77);
            		}
            		else {
HXLINE( 465)			Bool _hx_tmp78;
HXDLIN( 465)			if (post) {
HXLINE( 465)				_hx_tmp78 = hx::IsNotNull( uri );
            			}
            			else {
HXLINE( 465)				_hx_tmp78 = false;
            			}
HXDLIN( 465)			if (_hx_tmp78) {
HXLINE( 466)				Bool _hx_tmp79;
HXDLIN( 466)				if (!(multipart)) {
            					HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            					Bool _hx_run( ::Dynamic h){
            						HX_STACK_FRAME("haxe.Http","customRequest",0x68e97fa0,"haxe.Http.customRequest","C:\\Dev\\HaxeToolkit\\haxe\\std/haxe/Http.hx",466,0xbd57e5df)
            						HX_STACK_ARG(h,"h")
HXLINE( 466)						return (( (::String)(h->__Field(HX_("header",8d,09,00,fd),hx::paccDynamic)) ) == HX_("Content-Type",ce,69,5d,3c));
            					}
            					HX_END_LOCAL_FUNC1(return)

HXLINE( 466)					_hx_tmp79 = !(::Lambda_obj::exists(this->headers, ::Dynamic(new _hx_Closure_0())));
            				}
            				else {
HXLINE( 466)					_hx_tmp79 = true;
            				}
HXDLIN( 466)				if (_hx_tmp79) {
HXLINE( 467)					{
HXLINE( 467)						Bool _hx_tmp80 = hx::IsNotNull( b1->charBuf );
HXDLIN( 467)						if (_hx_tmp80) {
HXLINE( 467)							b1->flush();
            						}
HXDLIN( 467)						b1->b->push(HX_("Content-Type: ",f4,2b,e6,1d));
            					}
HXLINE( 468)					if (multipart) {
HXLINE( 469)						{
HXLINE( 469)							Bool _hx_tmp81 = hx::IsNotNull( b1->charBuf );
HXDLIN( 469)							if (_hx_tmp81) {
HXLINE( 469)								b1->flush();
            							}
HXDLIN( 469)							b1->b->push(HX_("multipart/form-data",f0,f8,88,db));
            						}
HXLINE( 470)						{
HXLINE( 470)							Bool _hx_tmp82 = hx::IsNotNull( b1->charBuf );
HXDLIN( 470)							if (_hx_tmp82) {
HXLINE( 470)								b1->flush();
            							}
HXDLIN( 470)							b1->b->push(HX_("; boundary=",ee,f7,f2,1a));
            						}
HXLINE( 471)						{
HXLINE( 471)							Bool _hx_tmp83 = hx::IsNotNull( b1->charBuf );
HXDLIN( 471)							if (_hx_tmp83) {
HXLINE( 471)								b1->flush();
            							}
HXDLIN( 471)							::String _hx_tmp84 = ::Std_obj::string(boundary);
HXDLIN( 471)							b1->b->push(_hx_tmp84);
            						}
            					}
            					else {
HXLINE( 473)						Bool _hx_tmp85 = hx::IsNotNull( b1->charBuf );
HXDLIN( 473)						if (_hx_tmp85) {
HXLINE( 473)							b1->flush();
            						}
HXDLIN( 473)						b1->b->push(HX_("application/x-www-form-urlencoded",9e,61,91,fa));
            					}
HXLINE( 474)					{
HXLINE( 474)						Bool _hx_tmp86 = hx::IsNotNull( b1->charBuf );
HXDLIN( 474)						if (_hx_tmp86) {
HXLINE( 474)							b1->flush();
            						}
HXDLIN( 474)						b1->b->push(HX_("\r\n",5d,0b,00,00));
            					}
            				}
HXLINE( 476)				if (multipart) {
HXLINE( 477)					::String x1 = ((HX_("Content-Length: ",20,de,22,7c) + (((uri.length + ( (Int)(this->file->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)) )) + boundary.length) + (int)6)) + HX_("\r\n",5d,0b,00,00));
HXDLIN( 477)					Bool _hx_tmp87 = hx::IsNotNull( b1->charBuf );
HXDLIN( 477)					if (_hx_tmp87) {
HXLINE( 477)						b1->flush();
            					}
HXDLIN( 477)					::String _hx_tmp88 = ::Std_obj::string(x1);
HXDLIN( 477)					b1->b->push(_hx_tmp88);
            				}
            				else {
HXLINE( 479)					::String x2 = ((HX_("Content-Length: ",20,de,22,7c) + uri.length) + HX_("\r\n",5d,0b,00,00));
HXDLIN( 479)					Bool _hx_tmp89 = hx::IsNotNull( b1->charBuf );
HXDLIN( 479)					if (_hx_tmp89) {
HXLINE( 479)						b1->flush();
            					}
HXDLIN( 479)					::String _hx_tmp90 = ::Std_obj::string(x2);
HXDLIN( 479)					b1->b->push(_hx_tmp90);
            				}
            			}
            		}
HXLINE( 481)		{
HXLINE( 481)			Bool _hx_tmp91 = hx::IsNotNull( b1->charBuf );
HXDLIN( 481)			if (_hx_tmp91) {
HXLINE( 481)				b1->flush();
            			}
HXDLIN( 481)			b1->b->push(HX_("Connection: close\r\n",31,73,d3,b4));
            		}
HXLINE( 482)		{
HXLINE( 482)			HX_VARI_NAME(  ::_List::ListNode,_g_head2,"_g_head") = this->headers->h;
HXDLIN( 482)			while(true){
HXLINE( 482)				Bool _hx_tmp92 = !(hx::IsNotNull( _g_head2 ));
HXDLIN( 482)				if (_hx_tmp92) {
HXLINE( 482)					goto _hx_goto_4;
            				}
HXDLIN( 482)				HX_VARI_NAME(  ::Dynamic,val2,"val") = _g_head2->item;
HXLINE( 364)				_g_head2 = _g_head2->next;
HXLINE( 483)				{
HXLINE( 483)					Bool _hx_tmp93 = hx::IsNotNull( b1->charBuf );
HXDLIN( 483)					if (_hx_tmp93) {
HXLINE( 483)						b1->flush();
            					}
HXDLIN( 483)					::String _hx_tmp94 = ::Std_obj::string( ::Dynamic(val2->__Field(HX_("header",8d,09,00,fd),hx::paccDynamic)));
HXDLIN( 483)					b1->b->push(_hx_tmp94);
            				}
HXLINE( 484)				{
HXLINE( 484)					Bool _hx_tmp95 = hx::IsNotNull( b1->charBuf );
HXDLIN( 484)					if (_hx_tmp95) {
HXLINE( 484)						b1->flush();
            					}
HXDLIN( 484)					b1->b->push(HX_(": ",a6,32,00,00));
            				}
HXLINE( 485)				{
HXLINE( 485)					Bool _hx_tmp96 = hx::IsNotNull( b1->charBuf );
HXDLIN( 485)					if (_hx_tmp96) {
HXLINE( 485)						b1->flush();
            					}
HXDLIN( 485)					::String _hx_tmp97 = ::Std_obj::string( ::Dynamic(val2->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
HXDLIN( 485)					b1->b->push(_hx_tmp97);
            				}
HXLINE( 486)				{
HXLINE( 486)					Bool _hx_tmp98 = hx::IsNotNull( b1->charBuf );
HXDLIN( 486)					if (_hx_tmp98) {
HXLINE( 486)						b1->flush();
            					}
HXDLIN( 486)					b1->b->push(HX_("\r\n",5d,0b,00,00));
            				}
            			}
            			_hx_goto_4:;
            		}
HXLINE( 488)		{
HXLINE( 488)			Bool _hx_tmp99 = hx::IsNotNull( b1->charBuf );
HXDLIN( 488)			if (_hx_tmp99) {
HXLINE( 488)				b1->flush();
            			}
HXDLIN( 488)			b1->b->push(HX_("\r\n",5d,0b,00,00));
            		}
HXLINE( 489)		Bool _hx_tmp100 = hx::IsNotNull( this->postData );
HXDLIN( 489)		if (_hx_tmp100) {
HXLINE( 490)			Bool _hx_tmp101 = hx::IsNotNull( b1->charBuf );
HXDLIN( 490)			if (_hx_tmp101) {
HXLINE( 490)				b1->flush();
            			}
HXDLIN( 490)			::String _hx_tmp102 = ::Std_obj::string(this->postData);
HXDLIN( 490)			b1->b->push(_hx_tmp102);
            		}
            		else {
HXLINE( 491)			Bool _hx_tmp103;
HXDLIN( 491)			if (post) {
HXLINE( 491)				_hx_tmp103 = hx::IsNotNull( uri );
            			}
            			else {
HXLINE( 491)				_hx_tmp103 = false;
            			}
HXDLIN( 491)			if (_hx_tmp103) {
HXLINE( 492)				Bool _hx_tmp104 = hx::IsNotNull( b1->charBuf );
HXDLIN( 492)				if (_hx_tmp104) {
HXLINE( 492)					b1->flush();
            				}
HXDLIN( 492)				::String _hx_tmp105 = ::Std_obj::string(uri);
HXDLIN( 492)				b1->b->push(_hx_tmp105);
            			}
            		}
HXLINE( 493)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 494)			Bool _hx_tmp106 = hx::IsNotNull( ::haxe::Http_obj::PROXY );
HXDLIN( 494)			if (_hx_tmp106) {
HXLINE( 495)				sock->connect( ::sys::net::Host_obj::__new( ::Dynamic(::haxe::Http_obj::PROXY->__Field(HX_("host",68,cf,12,45),hx::paccDynamic))), ::Dynamic(::haxe::Http_obj::PROXY->__Field(HX_("port",81,83,5c,4a),hx::paccDynamic)));
            			}
            			else {
HXLINE( 497)				sock->connect( ::sys::net::Host_obj::__new(host),port);
            			}
HXLINE( 498)			Bool _hx_tmp107 = hx::IsNotNull( b1->charBuf );
HXDLIN( 498)			if (_hx_tmp107) {
HXLINE( 498)				b1->flush();
            			}
HXDLIN( 498)			::String _hx_tmp108 = b1->b->join(HX_("",00,00,00,00));
HXDLIN( 498)			sock->write(_hx_tmp108);
HXLINE( 499)			if (multipart) {
HXLINE( 501)				HX_VARI(  ::haxe::io::Bytes,buf) = ::haxe::io::Bytes_obj::alloc((int)4096);
HXLINE( 502)				while((( (Int)(this->file->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)) ) > (int)0)){
HXLINE( 503)					HX_VAR( Int,size);
HXDLIN( 503)					if ((( (Int)(this->file->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)) ) > (int)4096)) {
HXLINE( 503)						size = (int)4096;
            					}
            					else {
HXLINE( 503)						size = ( (Int)(this->file->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)) );
            					}
HXLINE( 504)					HX_VARI( Int,len) = (int)0;
HXLINE( 505)					try {
            						HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE( 506)						len = ( ( ::haxe::io::Input)(this->file->__Field(HX_("io",e6,5b,00,00),hx::paccDynamic)) )->readBytes(buf,(int)0,size);
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::haxe::io::Eof e = _hx_e;
HXLINE( 507)							goto _hx_goto_5;
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXLINE( 508)					sock->output->writeFullBytes(buf,(int)0,len);
HXLINE( 509)					hx::SubEq(hx::FieldRef((this->file).mPtr,HX_("size",c1,a0,53,4c)),len);
            				}
            				_hx_goto_5:;
HXLINE( 511)				sock->write(HX_("\r\n",5d,0b,00,00));
HXLINE( 512)				sock->write(HX_("--",60,27,00,00));
HXLINE( 513)				sock->write(boundary);
HXLINE( 514)				sock->write(HX_("--",60,27,00,00));
            			}
HXLINE( 516)			this->readHttpResponse(api,sock);
HXLINE( 517)			sock->close();
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e1 = _hx_e;
HXLINE( 519)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 519)					sock->close();
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic e2 = _hx_e;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXLINE( 520)				::String _hx_tmp109 = ::Std_obj::string(e1);
HXDLIN( 520)				this->onError(_hx_tmp109);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Http_obj,customRequest,(void))

void Http_obj::readHttpResponse( ::haxe::io::Output api, ::sys::net::Socket sock){
            	HX_STACK_FRAME("haxe.Http","readHttpResponse",0x6bff43dd,"haxe.Http.readHttpResponse","C:\\Dev\\HaxeToolkit\\haxe\\std/haxe/Http.hx",524,0xbd57e5df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(api,"api")
            	HX_STACK_ARG(sock,"sock")
HXLINE( 526)		HX_VARI(  ::haxe::io::BytesBuffer,b) =  ::haxe::io::BytesBuffer_obj::__new();
HXLINE( 527)		HX_VARI( Int,k) = (int)4;
HXLINE( 528)		HX_VARI(  ::haxe::io::Bytes,s) = ::haxe::io::Bytes_obj::alloc((int)4);
HXLINE( 529)		sock->setTimeout(this->cnxTimeout);
HXLINE( 530)		while(true){
HXLINE( 531)			HX_VARI( Int,p) = sock->input->readBytes(s,(int)0,k);
HXLINE( 532)			while((p != k)){
HXLINE( 533)				Int _hx_tmp = sock->input->readBytes(s,p,(k - p));
HXDLIN( 533)				hx::AddEq(p,_hx_tmp);
            			}
HXLINE( 534)			{
HXLINE( 534)				Bool _hx_tmp1;
HXDLIN( 534)				if ((k >= (int)0)) {
HXLINE( 534)					_hx_tmp1 = (k > s->length);
            				}
            				else {
HXLINE( 534)					_hx_tmp1 = true;
            				}
HXDLIN( 534)				if (_hx_tmp1) {
HXLINE( 534)					HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            				}
HXDLIN( 534)				HX_VARI( ::Array< unsigned char >,b2) = s->b;
HXDLIN( 534)				{
HXLINE( 534)					HX_VARI( Int,_g1) = (int)0;
HXDLIN( 534)					HX_VARI( Int,_g) = k;
HXDLIN( 534)					while((_g1 < _g)){
HXLINE( 534)						HX_VARI( Int,i) = _g1++;
HXDLIN( 534)						unsigned char _hx_tmp2 = b2->__get(i);
HXDLIN( 534)						b->b->push(_hx_tmp2);
            					}
            				}
            			}
HXLINE( 535)			Int _hx_tmp3 = k;
HXDLIN( 535)			switch((int)(_hx_tmp3)){
            				case (int)1: {
HXLINE( 537)					HX_VARI( Int,c) = s->b->__get((int)0);
HXLINE( 538)					if ((c == (int)10)) {
HXLINE( 539)						goto _hx_goto_6;
            					}
HXLINE( 540)					if ((c == (int)13)) {
HXLINE( 541)						k = (int)3;
            					}
            					else {
HXLINE( 543)						k = (int)4;
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 545)					HX_VARI_NAME( Int,c1,"c") = s->b->__get((int)1);
HXLINE( 546)					if ((c1 == (int)10)) {
HXLINE( 547)						if ((s->b->__get((int)0) == (int)13)) {
HXLINE( 548)							goto _hx_goto_6;
            						}
HXLINE( 549)						k = (int)4;
            					}
            					else {
HXLINE( 550)						if ((c1 == (int)13)) {
HXLINE( 551)							k = (int)3;
            						}
            						else {
HXLINE( 553)							k = (int)4;
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 555)					HX_VARI_NAME( Int,c2,"c") = s->b->__get((int)2);
HXLINE( 556)					if ((c2 == (int)10)) {
HXLINE( 557)						if ((s->b->__get((int)1) != (int)13)) {
HXLINE( 558)							k = (int)4;
            						}
            						else {
HXLINE( 559)							if ((s->b->__get((int)0) != (int)10)) {
HXLINE( 560)								k = (int)2;
            							}
            							else {
HXLINE( 562)								goto _hx_goto_6;
            							}
            						}
            					}
            					else {
HXLINE( 563)						if ((c2 == (int)13)) {
HXLINE( 564)							Bool _hx_tmp4;
HXDLIN( 564)							if ((s->b->__get((int)1) == (int)10)) {
HXLINE( 564)								_hx_tmp4 = (s->b->__get((int)0) != (int)13);
            							}
            							else {
HXLINE( 564)								_hx_tmp4 = true;
            							}
HXDLIN( 564)							if (_hx_tmp4) {
HXLINE( 565)								k = (int)1;
            							}
            							else {
HXLINE( 567)								k = (int)3;
            							}
            						}
            						else {
HXLINE( 569)							k = (int)4;
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 571)					HX_VARI_NAME( Int,c3,"c") = s->b->__get((int)3);
HXLINE( 572)					if ((c3 == (int)10)) {
HXLINE( 573)						if ((s->b->__get((int)2) != (int)13)) {
HXLINE( 574)							continue;
            						}
            						else {
HXLINE( 575)							Bool _hx_tmp5;
HXDLIN( 575)							if ((s->b->__get((int)1) == (int)10)) {
HXLINE( 575)								_hx_tmp5 = (s->b->__get((int)0) != (int)13);
            							}
            							else {
HXLINE( 575)								_hx_tmp5 = true;
            							}
HXDLIN( 575)							if (_hx_tmp5) {
HXLINE( 576)								k = (int)2;
            							}
            							else {
HXLINE( 578)								goto _hx_goto_6;
            							}
            						}
            					}
            					else {
HXLINE( 579)						if ((c3 == (int)13)) {
HXLINE( 580)							Bool _hx_tmp6;
HXDLIN( 580)							if ((s->b->__get((int)2) == (int)10)) {
HXLINE( 580)								_hx_tmp6 = (s->b->__get((int)1) != (int)13);
            							}
            							else {
HXLINE( 580)								_hx_tmp6 = true;
            							}
HXDLIN( 580)							if (_hx_tmp6) {
HXLINE( 581)								k = (int)3;
            							}
            							else {
HXLINE( 583)								k = (int)1;
            							}
            						}
            					}
            				}
            				break;
            			}
            		}
            		_hx_goto_6:;
HXLINE( 590)		HX_VARI( ::Array< ::String >,headers) = b->getBytes()->toString().split(HX_("\r\n",5d,0b,00,00));
HXLINE( 592)		HX_VARI( ::String,response) = ( (::String)(headers->shift()) );
HXLINE( 593)		HX_VARI( ::Array< ::String >,rp) = response.split(HX_(" ",20,00,00,00));
HXLINE( 594)		::String _hx_tmp7 = rp->__get((int)1);
HXDLIN( 594)		HX_VARI(  ::Dynamic,status) = ::Std_obj::parseInt(_hx_tmp7);
HXLINE( 595)		Bool _hx_tmp8;
HXDLIN( 595)		if (hx::IsNotEq( status,(int)0 )) {
HXLINE( 595)			_hx_tmp8 = hx::IsNull( status );
            		}
            		else {
HXLINE( 595)			_hx_tmp8 = true;
            		}
HXDLIN( 595)		if (_hx_tmp8) {
HXLINE( 596)			HX_STACK_DO_THROW(HX_("Response status error",39,25,42,e1));
            		}
HXLINE( 599)		headers->pop();
HXLINE( 600)		headers->pop();
HXLINE( 601)		this->responseHeaders =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 602)		HX_VARI(  ::Dynamic,size) = null();
HXLINE( 603)		HX_VARI( Bool,chunked) = false;
HXLINE( 604)		{
HXLINE( 604)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 604)			while((_g2 < headers->length)){
HXLINE( 604)				HX_VARI( ::String,hline) = headers->__get(_g2);
HXDLIN( 604)				++_g2;
HXLINE( 605)				HX_VARI( ::Array< ::String >,a) = hline.split(HX_(": ",a6,32,00,00));
HXLINE( 606)				HX_VARI( ::String,hname) = ( (::String)(a->shift()) );
HXLINE( 607)				HX_VAR( ::String,hval);
HXDLIN( 607)				Bool _hx_tmp9 = (a->length == (int)1);
HXDLIN( 607)				if (_hx_tmp9) {
HXLINE( 607)					hval = a->__get((int)0);
            				}
            				else {
HXLINE( 607)					hval = a->join(HX_(": ",a6,32,00,00));
            				}
HXLINE( 608)				::String _hx_tmp10 = ::StringTools_obj::rtrim(hval);
HXDLIN( 608)				hval = ::StringTools_obj::ltrim(_hx_tmp10);
HXLINE( 609)				this->responseHeaders->set(hname,hval);
HXLINE( 610)				{
HXLINE( 610)					HX_VARI_NAME( ::String,_g11,"_g1") = hname.toLowerCase();
HXDLIN( 610)					::String _hx_switch_0 = _g11;
            					if (  (_hx_switch_0==HX_("content-length",ba,f0,cc,86)) ){
HXLINE( 613)						size = ::Std_obj::parseInt(hval);
HXDLIN( 613)						goto _hx_goto_10;
            					}
            					if (  (_hx_switch_0==HX_("transfer-encoding",75,95,2e,69)) ){
HXLINE( 615)						::String _hx_tmp11 = hval.toLowerCase();
HXDLIN( 615)						chunked = (_hx_tmp11 == HX_("chunked",0c,54,d3,50));
HXDLIN( 615)						goto _hx_goto_10;
            					}
            					_hx_goto_10:;
            				}
            			}
            		}
HXLINE( 619)		this->onStatus(status);
HXLINE( 621)		HX_VARI(  ::EReg,chunk_re) =  ::EReg_obj::__new(HX_("^([0-9A-Fa-f]+)[ ]*\r\n",df,97,ed,19),HX_("m",6d,00,00,00));
HXLINE( 622)		this->chunk_size = null();
HXLINE( 623)		this->chunk_buf = null();
HXLINE( 626)		HX_VARI(  ::haxe::io::Bytes,buf) = ::haxe::io::Bytes_obj::alloc((int)1024);
HXLINE( 627)		if (chunked) {
HXLINE( 628)			try {
            				HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE( 629)				while(true){
HXLINE( 630)					HX_VARI( Int,len) = sock->input->readBytes(buf,(int)0,(int)1024);
HXLINE( 631)					Bool _hx_tmp12 = !(this->readChunk(chunk_re,api,buf,len));
HXDLIN( 631)					if (_hx_tmp12) {
HXLINE( 632)						goto _hx_goto_11;
            					}
            				}
            				_hx_goto_11:;
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::io::Eof e = _hx_e;
HXLINE( 635)					HX_STACK_DO_THROW(HX_("Transfer aborted",3a,e2,d2,6a));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		else {
HXLINE( 637)			Bool _hx_tmp13 = hx::IsNull( size );
HXDLIN( 637)			if (_hx_tmp13) {
HXLINE( 638)				Bool _hx_tmp14 = !(this->noShutdown);
HXDLIN( 638)				if (_hx_tmp14) {
HXLINE( 639)					sock->shutdown(false,true);
            				}
HXLINE( 640)				try {
            					HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE( 641)					while(true){
HXLINE( 642)						HX_VARI_NAME( Int,len1,"len") = sock->input->readBytes(buf,(int)0,(int)1024);
HXLINE( 643)						api->writeBytes(buf,(int)0,len1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::io::Eof e1 = _hx_e;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            			else {
HXLINE( 648)				api->prepare(size);
HXLINE( 649)				try {
            					HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE( 650)					while(hx::IsGreater( size,(int)0 )){
HXLINE( 651)						Int _hx_tmp15;
HXDLIN( 651)						if (hx::IsGreater( size,(int)1024 )) {
HXLINE( 651)							_hx_tmp15 = (int)1024;
            						}
            						else {
HXLINE( 651)							_hx_tmp15 = size;
            						}
HXDLIN( 651)						HX_VARI_NAME( Int,len2,"len") = sock->input->readBytes(buf,(int)0,_hx_tmp15);
HXLINE( 652)						api->writeBytes(buf,(int)0,len2);
HXLINE( 653)						hx::SubEq(size,len2);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::io::Eof e2 = _hx_e;
HXLINE( 656)						HX_STACK_DO_THROW(HX_("Transfer aborted",3a,e2,d2,6a));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXLINE( 659)		Bool _hx_tmp16;
HXDLIN( 659)		if (chunked) {
HXLINE( 659)			Bool _hx_tmp17 = hx::IsNull( this->chunk_size );
HXDLIN( 659)			if (_hx_tmp17) {
HXLINE( 659)				_hx_tmp16 = hx::IsNotNull( this->chunk_buf );
            			}
            			else {
HXLINE( 659)				_hx_tmp16 = true;
            			}
            		}
            		else {
HXLINE( 659)			_hx_tmp16 = false;
            		}
HXDLIN( 659)		if (_hx_tmp16) {
HXLINE( 660)			HX_STACK_DO_THROW(HX_("Invalid chunk",64,90,fb,29));
            		}
HXLINE( 661)		Bool _hx_tmp18;
HXDLIN( 661)		if (hx::IsGreaterEq( status,(int)200 )) {
HXLINE( 661)			_hx_tmp18 = hx::IsGreaterEq( status,(int)400 );
            		}
            		else {
HXLINE( 661)			_hx_tmp18 = true;
            		}
HXDLIN( 661)		if (_hx_tmp18) {
HXLINE( 662)			HX_STACK_DO_THROW((HX_("Http Error #",33,85,a5,2b) + status));
            		}
HXLINE( 663)		api->close();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Http_obj,readHttpResponse,(void))

Bool Http_obj::readChunk( ::EReg chunk_re, ::haxe::io::Output api, ::haxe::io::Bytes buf,Int len){
            	HX_STACK_FRAME("haxe.Http","readChunk",0xeebfa239,"haxe.Http.readChunk","C:\\Dev\\HaxeToolkit\\haxe\\std/haxe/Http.hx",666,0xbd57e5df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(chunk_re,"chunk_re")
            	HX_STACK_ARG(api,"api")
            	HX_STACK_ARG(buf,"buf")
            	HX_STACK_ARG(len,"len")
HXLINE( 667)		Bool _hx_tmp = hx::IsNull( this->chunk_size );
HXDLIN( 667)		if (_hx_tmp) {
HXLINE( 668)			Bool _hx_tmp1 = hx::IsNotNull( this->chunk_buf );
HXDLIN( 668)			if (_hx_tmp1) {
HXLINE( 669)				HX_VARI(  ::haxe::io::BytesBuffer,b) =  ::haxe::io::BytesBuffer_obj::__new();
HXLINE( 670)				{
HXLINE( 670)					HX_VARI(  ::haxe::io::Bytes,src) = this->chunk_buf;
HXDLIN( 670)					HX_VARI( ::Array< unsigned char >,b2) = src->b;
HXDLIN( 670)					{
HXLINE( 670)						HX_VARI( Int,_g1) = (int)0;
HXDLIN( 670)						HX_VARI( Int,_g) = src->length;
HXDLIN( 670)						while((_g1 < _g)){
HXLINE( 670)							HX_VARI( Int,i) = _g1++;
HXDLIN( 670)							unsigned char _hx_tmp2 = b2->__get(i);
HXDLIN( 670)							b->b->push(_hx_tmp2);
            						}
            					}
            				}
HXLINE( 671)				{
HXLINE( 671)					Bool _hx_tmp3;
HXDLIN( 671)					if ((len >= (int)0)) {
HXLINE( 671)						_hx_tmp3 = (len > buf->length);
            					}
            					else {
HXLINE( 671)						_hx_tmp3 = true;
            					}
HXDLIN( 671)					if (_hx_tmp3) {
HXLINE( 671)						HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            					}
HXDLIN( 671)					HX_VARI_NAME( ::Array< unsigned char >,b21,"b2") = buf->b;
HXDLIN( 671)					{
HXLINE( 671)						HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 671)						HX_VARI_NAME( Int,_g2,"_g") = len;
HXDLIN( 671)						while((_g11 < _g2)){
HXLINE( 671)							HX_VARI_NAME( Int,i1,"i") = _g11++;
HXDLIN( 671)							unsigned char _hx_tmp4 = b21->__get(i1);
HXDLIN( 671)							b->b->push(_hx_tmp4);
            						}
            					}
            				}
HXLINE( 672)				buf = b->getBytes();
HXLINE( 673)				hx::AddEq(len,this->chunk_buf->length);
HXLINE( 674)				this->chunk_buf = null();
            			}
HXLINE( 679)			::String _hx_tmp5 = buf->toString();
HXDLIN( 679)			Bool _hx_tmp6 = chunk_re->match(_hx_tmp5);
HXDLIN( 679)			if (_hx_tmp6) {
HXLINE( 681)				HX_VARI(  ::Dynamic,p) = chunk_re->matchedPos();
HXLINE( 682)				Bool _hx_tmp7 = (( (Int)(p->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)) ) <= len);
HXDLIN( 682)				if (_hx_tmp7) {
HXLINE( 683)					HX_VARI( ::String,cstr) = chunk_re->matched((int)1);
HXLINE( 684)					this->chunk_size = ::Std_obj::parseInt((HX_("0x",48,2a,00,00) + cstr));
HXLINE( 685)					if ((cstr == HX_("0",30,00,00,00))) {
HXLINE( 686)						this->chunk_size = null();
HXLINE( 687)						this->chunk_buf = null();
HXLINE( 688)						return false;
            					}
HXLINE( 690)					hx::SubEq(len,( (Int)(p->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)) ));
HXLINE( 691)					 ::haxe::io::Bytes _hx_tmp8 = buf->sub( ::Dynamic(p->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)),len);
HXDLIN( 691)					return this->readChunk(chunk_re,api,_hx_tmp8,len);
            				}
            			}
HXLINE( 695)			if ((len > (int)10)) {
HXLINE( 696)				this->onError(HX_("Invalid chunk",64,90,fb,29));
HXLINE( 697)				return false;
            			}
HXLINE( 699)			this->chunk_buf = buf->sub((int)0,len);
HXLINE( 700)			return true;
            		}
HXLINE( 702)		Bool _hx_tmp9 = hx::IsGreater( this->chunk_size,len );
HXDLIN( 702)		if (_hx_tmp9) {
HXLINE( 703)			hx::SubEq(this->chunk_size,len);
HXLINE( 704)			api->writeBytes(buf,(int)0,len);
HXLINE( 705)			return true;
            		}
HXLINE( 707)		HX_VARI( Int,end) = (this->chunk_size + (int)2);
HXLINE( 708)		if ((len >= end)) {
HXLINE( 709)			Bool _hx_tmp10 = hx::IsGreater( this->chunk_size,(int)0 );
HXDLIN( 709)			if (_hx_tmp10) {
HXLINE( 710)				api->writeBytes(buf,(int)0,this->chunk_size);
            			}
HXLINE( 711)			hx::SubEq(len,end);
HXLINE( 712)			this->chunk_size = null();
HXLINE( 713)			if ((len == (int)0)) {
HXLINE( 714)				return true;
            			}
HXLINE( 715)			 ::haxe::io::Bytes _hx_tmp11 = buf->sub(end,len);
HXDLIN( 715)			return this->readChunk(chunk_re,api,_hx_tmp11,len);
            		}
HXLINE( 717)		Bool _hx_tmp12 = hx::IsGreater( this->chunk_size,(int)0 );
HXDLIN( 717)		if (_hx_tmp12) {
HXLINE( 718)			api->writeBytes(buf,(int)0,this->chunk_size);
            		}
HXLINE( 719)		hx::SubEq(this->chunk_size,len);
HXLINE( 720)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Http_obj,readChunk,return )

HX_BEGIN_DEFAULT_FUNC(__default_onData,Http_obj)
void _hx_run(::String data){
            	HX_STACK_FRAME("haxe.Http","__default_onData",0x0e426245,"haxe.Http.__default_onData","C:\\Dev\\HaxeToolkit\\haxe\\std/haxe/Http.hx",732,0xbd57e5df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onError,Http_obj)
void _hx_run(::String msg){
            	HX_STACK_FRAME("haxe.Http","__default_onError",0x0a75574d,"haxe.Http.__default_onError","C:\\Dev\\HaxeToolkit\\haxe\\std/haxe/Http.hx",742,0xbd57e5df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(msg,"msg")
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onStatus,Http_obj)
void _hx_run(Int status){
            	HX_STACK_FRAME("haxe.Http","__default_onStatus",0xd0ca700d,"haxe.Http.__default_onStatus","C:\\Dev\\HaxeToolkit\\haxe\\std/haxe/Http.hx",752,0xbd57e5df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(status,"status")
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

 ::Dynamic Http_obj::PROXY;


Http_obj::Http_obj()
{
	onData = new __default_onData(this);
	onError = new __default_onError(this);
	onStatus = new __default_onStatus(this);
}

void Http_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Http);
	HX_MARK_MEMBER_NAME(url,"url");
	HX_MARK_MEMBER_NAME(responseData,"responseData");
	HX_MARK_MEMBER_NAME(noShutdown,"noShutdown");
	HX_MARK_MEMBER_NAME(cnxTimeout,"cnxTimeout");
	HX_MARK_MEMBER_NAME(responseHeaders,"responseHeaders");
	HX_MARK_MEMBER_NAME(chunk_size,"chunk_size");
	HX_MARK_MEMBER_NAME(chunk_buf,"chunk_buf");
	HX_MARK_MEMBER_NAME(file,"file");
	HX_MARK_MEMBER_NAME(postData,"postData");
	HX_MARK_MEMBER_NAME(headers,"headers");
	HX_MARK_MEMBER_NAME(params,"params");
	HX_MARK_MEMBER_NAME(onData,"onData");
	HX_MARK_MEMBER_NAME(onError,"onError");
	HX_MARK_MEMBER_NAME(onStatus,"onStatus");
	HX_MARK_END_CLASS();
}

void Http_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(url,"url");
	HX_VISIT_MEMBER_NAME(responseData,"responseData");
	HX_VISIT_MEMBER_NAME(noShutdown,"noShutdown");
	HX_VISIT_MEMBER_NAME(cnxTimeout,"cnxTimeout");
	HX_VISIT_MEMBER_NAME(responseHeaders,"responseHeaders");
	HX_VISIT_MEMBER_NAME(chunk_size,"chunk_size");
	HX_VISIT_MEMBER_NAME(chunk_buf,"chunk_buf");
	HX_VISIT_MEMBER_NAME(file,"file");
	HX_VISIT_MEMBER_NAME(postData,"postData");
	HX_VISIT_MEMBER_NAME(headers,"headers");
	HX_VISIT_MEMBER_NAME(params,"params");
	HX_VISIT_MEMBER_NAME(onData,"onData");
	HX_VISIT_MEMBER_NAME(onError,"onError");
	HX_VISIT_MEMBER_NAME(onStatus,"onStatus");
}

hx::Val Http_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { return hx::Val( url); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"file") ) { return hx::Val( file); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { return hx::Val( params); }
		if (HX_FIELD_EQ(inName,"onData") ) { return hx::Val( onData); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"headers") ) { return hx::Val( headers); }
		if (HX_FIELD_EQ(inName,"request") ) { return hx::Val( request_dyn()); }
		if (HX_FIELD_EQ(inName,"onError") ) { return hx::Val( onError); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"postData") ) { return hx::Val( postData); }
		if (HX_FIELD_EQ(inName,"onStatus") ) { return hx::Val( onStatus); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"chunk_buf") ) { return hx::Val( chunk_buf); }
		if (HX_FIELD_EQ(inName,"setHeader") ) { return hx::Val( setHeader_dyn()); }
		if (HX_FIELD_EQ(inName,"readChunk") ) { return hx::Val( readChunk_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"noShutdown") ) { return hx::Val( noShutdown); }
		if (HX_FIELD_EQ(inName,"cnxTimeout") ) { return hx::Val( cnxTimeout); }
		if (HX_FIELD_EQ(inName,"chunk_size") ) { return hx::Val( chunk_size); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"responseData") ) { return hx::Val( responseData); }
		if (HX_FIELD_EQ(inName,"setParameter") ) { return hx::Val( setParameter_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"customRequest") ) { return hx::Val( customRequest_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"responseHeaders") ) { return hx::Val( responseHeaders); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"readHttpResponse") ) { return hx::Val( readHttpResponse_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Http_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"PROXY") ) { outValue = PROXY; return true; }
	}
	return false;
}

hx::Val Http_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { url=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"file") ) { file=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { params=inValue.Cast<  ::List >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onData") ) { onData=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"headers") ) { headers=inValue.Cast<  ::List >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onError") ) { onError=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"postData") ) { postData=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onStatus") ) { onStatus=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"chunk_buf") ) { chunk_buf=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"noShutdown") ) { noShutdown=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cnxTimeout") ) { cnxTimeout=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chunk_size") ) { chunk_size=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"responseData") ) { responseData=inValue.Cast< ::String >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"responseHeaders") ) { responseHeaders=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Http_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"PROXY") ) { PROXY=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void Http_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("url","\x6f","\x2b","\x59","\x00"));
	outFields->push(HX_HCSTRING("responseData","\x4b","\x05","\xe9","\xc4"));
	outFields->push(HX_HCSTRING("noShutdown","\xf7","\xc1","\x69","\x5b"));
	outFields->push(HX_HCSTRING("cnxTimeout","\xb4","\x3a","\x75","\x76"));
	outFields->push(HX_HCSTRING("responseHeaders","\xc5","\x0d","\xca","\x43"));
	outFields->push(HX_HCSTRING("chunk_size","\x13","\x8b","\xba","\xd8"));
	outFields->push(HX_HCSTRING("chunk_buf","\x21","\x09","\x61","\xa7"));
	outFields->push(HX_HCSTRING("file","\x7c","\xce","\xbb","\x43"));
	outFields->push(HX_HCSTRING("postData","\xaa","\xb6","\xa2","\x00"));
	outFields->push(HX_HCSTRING("headers","\x46","\x52","\x08","\x63"));
	outFields->push(HX_HCSTRING("params","\x46","\xfb","\x7a","\xed"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Http_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Http_obj,url),HX_HCSTRING("url","\x6f","\x2b","\x59","\x00")},
	{hx::fsString,(int)offsetof(Http_obj,responseData),HX_HCSTRING("responseData","\x4b","\x05","\xe9","\xc4")},
	{hx::fsBool,(int)offsetof(Http_obj,noShutdown),HX_HCSTRING("noShutdown","\xf7","\xc1","\x69","\x5b")},
	{hx::fsFloat,(int)offsetof(Http_obj,cnxTimeout),HX_HCSTRING("cnxTimeout","\xb4","\x3a","\x75","\x76")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Http_obj,responseHeaders),HX_HCSTRING("responseHeaders","\xc5","\x0d","\xca","\x43")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Http_obj,chunk_size),HX_HCSTRING("chunk_size","\x13","\x8b","\xba","\xd8")},
	{hx::fsObject /*::haxe::io::Bytes*/ ,(int)offsetof(Http_obj,chunk_buf),HX_HCSTRING("chunk_buf","\x21","\x09","\x61","\xa7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Http_obj,file),HX_HCSTRING("file","\x7c","\xce","\xbb","\x43")},
	{hx::fsString,(int)offsetof(Http_obj,postData),HX_HCSTRING("postData","\xaa","\xb6","\xa2","\x00")},
	{hx::fsObject /*::List*/ ,(int)offsetof(Http_obj,headers),HX_HCSTRING("headers","\x46","\x52","\x08","\x63")},
	{hx::fsObject /*::List*/ ,(int)offsetof(Http_obj,params),HX_HCSTRING("params","\x46","\xfb","\x7a","\xed")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Http_obj,onData),HX_HCSTRING("onData","\xe9","\x5e","\xed","\xe4")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Http_obj,onError),HX_HCSTRING("onError","\x29","\x6a","\x67","\x09")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Http_obj,onStatus),HX_HCSTRING("onStatus","\xb1","\xdd","\xa8","\xe5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Http_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &Http_obj::PROXY,HX_HCSTRING("PROXY","\x4e","\x26","\x7e","\x46")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Http_obj_sMemberFields[] = {
	HX_HCSTRING("url","\x6f","\x2b","\x59","\x00"),
	HX_HCSTRING("responseData","\x4b","\x05","\xe9","\xc4"),
	HX_HCSTRING("noShutdown","\xf7","\xc1","\x69","\x5b"),
	HX_HCSTRING("cnxTimeout","\xb4","\x3a","\x75","\x76"),
	HX_HCSTRING("responseHeaders","\xc5","\x0d","\xca","\x43"),
	HX_HCSTRING("chunk_size","\x13","\x8b","\xba","\xd8"),
	HX_HCSTRING("chunk_buf","\x21","\x09","\x61","\xa7"),
	HX_HCSTRING("file","\x7c","\xce","\xbb","\x43"),
	HX_HCSTRING("postData","\xaa","\xb6","\xa2","\x00"),
	HX_HCSTRING("headers","\x46","\x52","\x08","\x63"),
	HX_HCSTRING("params","\x46","\xfb","\x7a","\xed"),
	HX_HCSTRING("setHeader","\xcf","\x7e","\xa7","\x5c"),
	HX_HCSTRING("setParameter","\xa7","\xf5","\xff","\x6c"),
	HX_HCSTRING("request","\x4f","\xdf","\x84","\x44"),
	HX_HCSTRING("customRequest","\x9e","\x47","\x93","\xee"),
	HX_HCSTRING("readHttpResponse","\x9f","\x0e","\x50","\x47"),
	HX_HCSTRING("readChunk","\x37","\x13","\xaa","\x16"),
	HX_HCSTRING("onData","\xe9","\x5e","\xed","\xe4"),
	HX_HCSTRING("onError","\x29","\x6a","\x67","\x09"),
	HX_HCSTRING("onStatus","\xb1","\xdd","\xa8","\xe5"),
	::String(null()) };

static void Http_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Http_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Http_obj::PROXY,"PROXY");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Http_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Http_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Http_obj::PROXY,"PROXY");
};

#endif

hx::Class Http_obj::__mClass;

static ::String Http_obj_sStaticFields[] = {
	HX_HCSTRING("PROXY","\x4e","\x26","\x7e","\x46"),
	::String(null())
};

void Http_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.Http","\xf0","\x78","\xa9","\xea");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Http_obj::__GetStatic;
	__mClass->mSetStaticField = &Http_obj::__SetStatic;
	__mClass->mMarkFunc = Http_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Http_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Http_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Http_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Http_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Http_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Http_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Http_obj::__boot()
{
{
            	HX_STACK_FRAME("haxe.Http","boot",0x57345470,"haxe.Http.boot","C:\\Dev\\HaxeToolkit\\haxe\\std/haxe/Http.hx",65,0xbd57e5df)
HXLINE(  65)		PROXY = null();
            	}
}

} // end namespace haxe
