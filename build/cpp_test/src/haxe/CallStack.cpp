// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_CallStack
#include <haxe/CallStack.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif

namespace haxe{

void CallStack_obj::__construct() { }

Dynamic CallStack_obj::__CreateEmpty() { return new CallStack_obj; }

hx::ObjectPtr< CallStack_obj > CallStack_obj::__new()
{
	hx::ObjectPtr< CallStack_obj > _hx_result = new CallStack_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic CallStack_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CallStack_obj > _hx_result = new CallStack_obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< ::Dynamic> CallStack_obj::exceptionStack(){
            	HX_STACK_FRAME("haxe.CallStack","exceptionStack",0xde34d005,"haxe.CallStack.exceptionStack","C:\\Dev\\HaxeToolkit\\haxe\\std/haxe/CallStack.hx",152,0x8fc63ceb)
HXLINE( 174)		HX_VARI( ::Array< ::String >,s) = ::__hxcpp_get_exception_stack();
HXLINE( 175)		return ::haxe::CallStack_obj::makeStack(s);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CallStack_obj,exceptionStack,return )

::Array< ::Dynamic> CallStack_obj::makeStack(::Array< ::String > s){
            	HX_STACK_FRAME("haxe.CallStack","makeStack",0x41ea826e,"haxe.CallStack.makeStack","C:\\Dev\\HaxeToolkit\\haxe\\std/haxe/CallStack.hx",254,0x8fc63ceb)
            	HX_STACK_ARG(s,"s")
HXLINE( 302)		HX_VARI( ::Array< ::Dynamic>,m) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 303)		{
HXLINE( 303)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 303)			while((_g < s->length)){
HXLINE( 303)				HX_VARI( ::String,func) = s->__get(_g);
HXDLIN( 303)				++_g;
HXLINE( 304)				HX_VARI( ::Array< ::String >,words) = func.split(HX_("::",c0,32,00,00));
HXLINE( 305)				Bool _hx_tmp = (words->length == (int)0);
HXDLIN( 305)				if (_hx_tmp) {
HXLINE( 306)					m->push(::haxe::StackItem_obj::CFunction_dyn());
            				}
            				else {
HXLINE( 307)					Bool _hx_tmp1 = (words->length == (int)2);
HXDLIN( 307)					if (_hx_tmp1) {
HXLINE( 308)						::String _hx_tmp2 = words->__get((int)0);
HXDLIN( 308)						::String _hx_tmp3 = words->__get((int)1);
HXDLIN( 308)						::hx::EnumBase _hx_tmp4 = ::haxe::StackItem_obj::Method(_hx_tmp2,_hx_tmp3);
HXDLIN( 308)						m->push(_hx_tmp4);
            					}
            					else {
HXLINE( 309)						Bool _hx_tmp5 = (words->length == (int)4);
HXDLIN( 309)						if (_hx_tmp5) {
HXLINE( 310)							::String _hx_tmp6 = words->__get((int)0);
HXDLIN( 310)							::String _hx_tmp7 = words->__get((int)1);
HXDLIN( 310)							::hx::EnumBase _hx_tmp8 = ::haxe::StackItem_obj::Method(_hx_tmp6,_hx_tmp7);
HXDLIN( 310)							::String _hx_tmp9 = words->__get((int)2);
HXDLIN( 310)							::String _hx_tmp10 = words->__get((int)3);
HXDLIN( 310)							 ::Dynamic _hx_tmp11 = ::Std_obj::parseInt(_hx_tmp10);
HXDLIN( 310)							::hx::EnumBase _hx_tmp12 = ::haxe::StackItem_obj::FilePos(_hx_tmp8,_hx_tmp9,_hx_tmp11);
HXDLIN( 310)							m->push(_hx_tmp12);
            						}
            					}
            				}
            			}
            		}
HXLINE( 312)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CallStack_obj,makeStack,return )


CallStack_obj::CallStack_obj()
{
}

bool CallStack_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"makeStack") ) { outValue = makeStack_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"exceptionStack") ) { outValue = exceptionStack_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CallStack_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *CallStack_obj_sStaticStorageInfo = 0;
#endif

static void CallStack_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CallStack_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CallStack_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CallStack_obj::__mClass,"__mClass");
};

#endif

hx::Class CallStack_obj::__mClass;

static ::String CallStack_obj_sStaticFields[] = {
	HX_HCSTRING("exceptionStack","\x79","\x48","\x56","\x0b"),
	HX_HCSTRING("makeStack","\x7a","\xde","\xa3","\x57"),
	::String(null())
};

void CallStack_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.CallStack","\x62","\x4b","\x54","\x6d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CallStack_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CallStack_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CallStack_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CallStack_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CallStack_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CallStack_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CallStack_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
